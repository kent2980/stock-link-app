from app.models import IxNonFraction
from sqlmodel import Session, select, func

def depreciation_segment_information(session: Session, head_item_key:str, context:str):
    """
    減価償却費、セグメント情報
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jpcrp_cor_DepreciationSegmentInformation',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def equity_in_earnings_losses_of_affiliates(session: Session, head_item_key:str, context:str):
    """
    持分法投資利益又は損失（△）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jpcrp_cor_EquityInEarningsLossesOfAffiliates',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def goodwill_before_offsetting(session: Session, head_item_key:str, context:str):
    """
    のれん（相殺前）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jpcrp_cor_GoodwillBeforeOffsetting',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_tax_expense(session: Session, head_item_key:str, context:str):
    """
    税金費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jpcrp_cor_IncomeTaxExpense',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_in_property_plant_and_equipment_and_intangible_assets(session: Session, head_item_key:str, context:str):
    """
    有形固定資産及び無形固定資産の増加額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jpcrp_cor_IncreaseInPropertyPlantAndEquipmentAndIntangibleAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def investments_in_entities_accounted_for_using_equity_method(session: Session, head_item_key:str, context:str):
    """
    持分法適用会社への投資額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jpcrp_cor_InvestmentsInEntitiesAccountedForUsingEquityMethod',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def research_and_development_expenses_included_in_general_and_administrative_expenses_and_manufacturing_cost_for_current_period(session: Session, head_item_key:str, context:str):
    """
    一般管理費及び当期製造費用に含まれる研究開発費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jpcrp_cor_ResearchAndDevelopmentExpensesIncludedInGeneralAndAdministrativeExpensesAndManufacturingCostForCurrentPeriod',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revenues_from_external_customers(session: Session, head_item_key:str, context:str):
    """
    外部顧客への売上高
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jpcrp_cor_RevenuesFromExternalCustomers',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def transactions_with_other_segments(session: Session, head_item_key:str, context:str):
    """
    セグメント間の内部売上高又は振替高
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jpcrp_cor_TransactionsWithOtherSegments',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def number_of_submission_dei(session: Session, head_item_key:str, context:str):
    """
    提出回数、DEI
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jpdei_cor_NumberOfSubmissionDEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def acceptances_and_guarantees_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    支払承諾、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AcceptancesAndGuaranteesLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_payable_consignment(session: Session, head_item_key:str, context:str):
    """
    受託販売未払金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsPayableConsignment',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_payable_facilities(session: Session, head_item_key:str, context:str):
    """
    設備関係未払金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsPayableFacilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_payable_for_construction_contracts_cns(session: Session, head_item_key:str, context:str):
    """
    工事未払金、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsPayableForConstructionContractsCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_payable_other(session: Session, head_item_key:str, context:str):
    """
    未払金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsPayableOther',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_payable_other_and_accrued_expenses(session: Session, head_item_key:str, context:str):
    """
    未払金及び未払費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsPayableOtherAndAccruedExpenses',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_payable_real_estate(session: Session, head_item_key:str, context:str):
    """
    不動産事業未払金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsPayableRealEstate',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_payable_trade(session: Session, head_item_key:str, context:str):
    """
    買掛金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsPayableTrade',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_assets_ins(session: Session, head_item_key:str, context:str):
    """
    未収金、資産の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsReceivableAssetsINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_from_completed_construction_contracts_cns(session: Session, head_item_key:str, context:str):
    """
    完成工事未収入金、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsReceivableFromCompletedConstructionContractsCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_installment(session: Session, head_item_key:str, context:str):
    """
    割賦売掛金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsReceivableInstallment',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_installment_sales_calea(session: Session, head_item_key:str, context:str):
    """
    割賦債権、流動資産、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsReceivableInstallmentSalesCALEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_lease_calea(session: Session, head_item_key:str, context:str):
    """
    賃貸料等未収入金、流動資産、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsReceivableLeaseCALEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_operating_loans_calea(session: Session, head_item_key:str, context:str):
    """
    営業貸付金、流動資産、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsReceivableOperatingLoansCALEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_other(session: Session, head_item_key:str, context:str):
    """
    未収入金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsReceivableOther',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_other_loans_to_customers_calea(session: Session, head_item_key:str, context:str):
    """
    その他の営業貸付債権、流動資産、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsReceivableOtherLoansToCustomersCALEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_trade(session: Session, head_item_key:str, context:str):
    """
    売掛金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsReceivableTrade',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_trade_and_contract_assets(session: Session, head_item_key:str, context:str):
    """
    売掛金及び契約資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccountsReceivableTradeAndContractAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accrued_alcohol_tax(session: Session, head_item_key:str, context:str):
    """
    未払酒税
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccruedAlcoholTax',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accrued_business_office_taxes(session: Session, head_item_key:str, context:str):
    """
    未払事業所税
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccruedBusinessOfficeTaxes',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accrued_consumption_taxes(session: Session, head_item_key:str, context:str):
    """
    未払消費税等
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccruedConsumptionTaxes',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accrued_expenses(session: Session, head_item_key:str, context:str):
    """
    未払費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccruedExpenses',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accrued_income(session: Session, head_item_key:str, context:str):
    """
    未収収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccruedIncome',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accrued_premiums_assets_ins(session: Session, head_item_key:str, context:str):
    """
    未収保険料、資産の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccruedPremiumsAssetsINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_and_impairment_loss_buildings_and_structures(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額及び減損損失累計額、建物及び構築物
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationAndImpairmentLossBuildingsAndStructures',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_and_impairment_loss_lease_assets_ppe(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額及び減損損失累計額、リース資産、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationAndImpairmentLossLeaseAssetsPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_and_impairment_loss_machinery_equipment_and_vehicles(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額及び減損損失累計額、機械装置及び運搬具
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationAndImpairmentLossMachineryEquipmentAndVehicles',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_and_impairment_loss_other_ppe(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額及び減損損失累計額、その他、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationAndImpairmentLossOtherPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_and_impairment_loss_ppe_by_group(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額及び減損損失累計額、有形固定資産、一括控除
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationAndImpairmentLossPPEByGroup',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_and_impairment_loss_real_estate_for_investment(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額及び減損損失累計額、投資不動産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationAndImpairmentLossRealEstateForInvestment',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_and_impairment_loss_tools_furniture_and_fixtures(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額及び減損損失累計額、工具、器具及び備品
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationAndImpairmentLossToolsFurnitureAndFixtures',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_buildings(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、建物
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationBuildings',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_buildings_and_structures(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、建物及び構築物
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationBuildingsAndStructures',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_lease_assets_ppe(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、リース資産、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationLeaseAssetsPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_machinery_and_equipment(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、機械及び装置
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationMachineryAndEquipment',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_machinery_equipment_and_vehicles(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、機械装置及び運搬具
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationMachineryEquipmentAndVehicles',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_other_ppe(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、その他、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationOtherPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_ppe_by_group(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、有形固定資産、一括控除
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationPPEByGroup',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_real_estate_for_investment(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、投資不動産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationRealEstateForInvestment',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_right_of_use_assets(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、使用権資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationRightOfUseAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_structures(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、構築物
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationStructures',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_tools_furniture_and_fixtures(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、工具、器具及び備品
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationToolsFurnitureAndFixtures',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_vehicles(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、車両運搬具
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationVehicles',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_vessels(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、船舶
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedDepreciationVessels',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_impairment_loss_buildings_and_structures(session: Session, head_item_key:str, context:str):
    """
    減損損失累計額、建物及び構築物
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedImpairmentLossBuildingsAndStructures',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_impairment_loss_machinery_equipment_and_vehicles(session: Session, head_item_key:str, context:str):
    """
    減損損失累計額、機械装置及び運搬具
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedImpairmentLossMachineryEquipmentAndVehicles',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_impairment_loss_other_ppe(session: Session, head_item_key:str, context:str):
    """
    減損損失累計額、その他、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AccumulatedImpairmentLossOtherPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def advance_payments_other(session: Session, head_item_key:str, context:str):
    """
    前払金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AdvancePaymentsOther',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def advance_payments_trade(session: Session, head_item_key:str, context:str):
    """
    前渡金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AdvancePaymentsTrade',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def advances_for_purchases_at_leased_assets_ppelea(session: Session, head_item_key:str, context:str):
    """
    賃貸資産前渡金、有形固定資産、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AdvancesForPurchasesAtLeasedAssetsPPELEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def advances_paid(session: Session, head_item_key:str, context:str):
    """
    立替金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AdvancesPaid',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def advances_received(session: Session, head_item_key:str, context:str):
    """
    前受金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AdvancesReceived',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def advances_received_on_uncompleted_construction_contracts_cns(session: Session, head_item_key:str, context:str):
    """
    未成工事受入金、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AdvancesReceivedOnUncompletedConstructionContractsCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def advertising_and_promotion_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    広告宣伝費及び販売促進費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AdvertisingAndPromotionExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def advertising_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    広告宣伝費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AdvertisingExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def agent_fee_sga(session: Session, head_item_key:str, context:str):
    """
    代理店手数料、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AgentFeeSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def allowance_for_doubtful_accounts_assets_ins(session: Session, head_item_key:str, context:str):
    """
    貸倒引当金、資産の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AllowanceForDoubtfulAccountsAssetsINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def allowance_for_doubtful_accounts_ca(session: Session, head_item_key:str, context:str):
    """
    貸倒引当金、流動資産、一括控除
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AllowanceForDoubtfulAccountsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def allowance_for_doubtful_accounts_ioa_by_group(session: Session, head_item_key:str, context:str):
    """
    貸倒引当金、投資その他の資産、一括控除
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AllowanceForDoubtfulAccountsIOAByGroup',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def allowance_for_investment_loss(session: Session, head_item_key:str, context:str):
    """
    投資損失引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AllowanceForInvestmentLoss',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def allowance_for_investment_loss_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    投資損失引当金、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AllowanceForInvestmentLossAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def allowance_for_loan_losses_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    貸倒引当金、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AllowanceForLoanLossesAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_bond_issuance_cost_noe(session: Session, head_item_key:str, context:str):
    """
    社債発行費償却、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AmortizationOfBondIssuanceCostNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_bond_issuance_cost_ope_cf(session: Session, head_item_key:str, context:str):
    """
    社債発行費償却、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AmortizationOfBondIssuanceCostOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_deferred_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    繰延資産償却額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AmortizationOfDeferredAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_goodwill_ope_cf(session: Session, head_item_key:str, context:str):
    """
    のれん償却額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AmortizationOfGoodwillOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_goodwill_sga(session: Session, head_item_key:str, context:str):
    """
    のれん償却額、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AmortizationOfGoodwillSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_guarantee_deposits_ope_cf(session: Session, head_item_key:str, context:str):
    """
    差入保証金償却額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AmortizationOfGuaranteeDepositsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_long_term_prepaid_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    長期前払費用償却額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AmortizationOfLongTermPrepaidExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_negative_goodwill_noi(session: Session, head_item_key:str, context:str):
    """
    負ののれん償却額、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AmortizationOfNegativeGoodwillNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_negative_goodwill_ope_cf(session: Session, head_item_key:str, context:str):
    """
    負ののれん償却額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AmortizationOfNegativeGoodwillOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_stock_issuance_cost_noe(session: Session, head_item_key:str, context:str):
    """
    株式交付費償却、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AmortizationOfStockIssuanceCostNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def asset_retirement_obligations_cl(session: Session, head_item_key:str, context:str):
    """
    資産除去債務、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AssetRetirementObligationsCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def asset_retirement_obligations_liabilities(session: Session, head_item_key:str, context:str):
    """
    資産除去債務、負債の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AssetRetirementObligationsLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def asset_retirement_obligations_ncl(session: Session, head_item_key:str, context:str):
    """
    資産除去債務、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AssetRetirementObligationsNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def assets(session: Session, head_item_key:str, context:str):
    """
    資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_Assets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def assets_for_rent_net(session: Session, head_item_key:str, context:str):
    """
    貸与資産（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_AssetsForRentNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bad_debts_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    貸倒損失、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BadDebtsExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bad_debts_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    貸倒損失、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BadDebtsExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bad_debts_written_off_el(session: Session, head_item_key:str, context:str):
    """
    貸倒損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BadDebtsWrittenOffEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def beginning_finished_goods_cos(session: Session, head_item_key:str, context:str):
    """
    製品期首棚卸高、売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BeginningFinishedGoodsCOS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def beginning_merchandise_and_finished_goods_cos(session: Session, head_item_key:str, context:str):
    """
    商品及び製品期首棚卸高、売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BeginningMerchandiseAndFinishedGoodsCOS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bond_issuance_cost_da(session: Session, head_item_key:str, context:str):
    """
    社債発行費、繰延資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BondIssuanceCostDA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bond_issuance_cost_noe(session: Session, head_item_key:str, context:str):
    """
    社債発行費、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BondIssuanceCostNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bond_issuance_cost_ope_cf(session: Session, head_item_key:str, context:str):
    """
    社債発行費、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BondIssuanceCostOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bonds_payable(session: Session, head_item_key:str, context:str):
    """
    社債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BondsPayable',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bonuses_and_allowance_sga(session: Session, head_item_key:str, context:str):
    """
    賞与及び手当、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BonusesAndAllowanceSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bonuses_sga(session: Session, head_item_key:str, context:str):
    """
    賞与、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BonusesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def borrowed_money_from_trust_account_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    信託勘定借、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BorrowedMoneyFromTrustAccountLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def borrowed_money_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    借用金、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BorrowedMoneyLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def brokerage_income_orcmd(session: Session, head_item_key:str, context:str):
    """
    受取手数料、営業収益、商品先物取引業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BrokerageIncomeORCMD',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def buildings(session: Session, head_item_key:str, context:str):
    """
    建物
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_Buildings',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def buildings_and_accompanying_facilities(session: Session, head_item_key:str, context:str):
    """
    建物附属設備
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BuildingsAndAccompanyingFacilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def buildings_and_accompanying_facilities_net(session: Session, head_item_key:str, context:str):
    """
    建物附属設備（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BuildingsAndAccompanyingFacilitiesNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def buildings_and_structures(session: Session, head_item_key:str, context:str):
    """
    建物及び構築物
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BuildingsAndStructures',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def buildings_and_structures_net(session: Session, head_item_key:str, context:str):
    """
    建物及び構築物（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BuildingsAndStructuresNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def buildings_net(session: Session, head_item_key:str, context:str):
    """
    建物（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BuildingsNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def business_advisory_fee_noi(session: Session, head_item_key:str, context:str):
    """
    経営指導料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BusinessAdvisoryFeeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def business_commencement_expenses_da(session: Session, head_item_key:str, context:str):
    """
    開業費、繰延資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BusinessCommencementExpensesDA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def business_consignment_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    業務委託費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BusinessConsignmentExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def business_structure_improvement_expenses_el(session: Session, head_item_key:str, context:str):
    """
    事業構造改善費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BusinessStructureImprovementExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def business_structure_improvement_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    事業構造改善費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_BusinessStructureImprovementExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def call_loans_and_bills_bought_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    コールローン及び買入手形、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CallLoansAndBillsBoughtAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def call_loans_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    コールローン、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CallLoansAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def call_money_and_bills_sold_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    コールマネー及び売渡手形、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CallMoneyAndBillsSoldLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def call_money_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    コールマネー、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CallMoneyLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def capital_stock(session: Session, head_item_key:str, context:str):
    """
    資本金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CapitalStock',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def capital_surplus(session: Session, head_item_key:str, context:str):
    """
    資本剰余金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CapitalSurplus',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cash_and_cash_equivalents(session: Session, head_item_key:str, context:str):
    """
    現金及び現金同等物の残高
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CashAndCashEquivalents',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cash_and_deposits(session: Session, head_item_key:str, context:str):
    """
    現金及び預金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CashAndDeposits',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cash_and_deposits_assets_ins(session: Session, head_item_key:str, context:str):
    """
    現金及び預貯金、資産の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CashAndDepositsAssetsINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cash_and_due_from_banks_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    現金預け金、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CashAndDueFromBanksAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cash_dividends_paid_fin_cf(session: Session, head_item_key:str, context:str):
    """
    配当金の支払額、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CashDividendsPaidFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def change_in_treasury_shares_of_parent_arising_from_transactions_with_non_controlling_shareholders(session: Session, head_item_key:str, context:str):
    """
    非支配株主との取引に係る親会社の持分変動
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ChangeInTreasurySharesOfParentArisingFromTransactionsWithNonControllingShareholders',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def change_of_scope_of_consolidation(session: Session, head_item_key:str, context:str):
    """
    連結範囲の変動
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ChangeOfScopeOfConsolidation',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def change_of_scope_of_equity_method(session: Session, head_item_key:str, context:str):
    """
    持分法の適用範囲の変動
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ChangeOfScopeOfEquityMethod',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def claims_provable_in_bankruptcy_claims_provable_in_rehabilitation_and_other(session: Session, head_item_key:str, context:str):
    """
    破産更生債権等
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ClaimsProvableInBankruptcyClaimsProvableInRehabilitationAndOther',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def co_sponsor_fee_noi(session: Session, head_item_key:str, context:str):
    """
    協賛金収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CoSponsorFeeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def coinsurance_accounts_receivable_assets_ins(session: Session, head_item_key:str, context:str):
    """
    共同保険貸、資産の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CoinsuranceAccountsReceivableAssetsINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def collection_of_investment_and_loans_receivable_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投融資の回収による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CollectionOfInvestmentAndLoansReceivableInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def collection_of_lease_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    敷金の回収による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CollectionOfLeaseDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def collection_of_loans_receivable_inv_cf(session: Session, head_item_key:str, context:str):
    """
    貸付金の回収による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CollectionOfLoansReceivableInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def collection_of_loans_receivable_to_employees_inv_cf(session: Session, head_item_key:str, context:str):
    """
    従業員に対する貸付金の回収による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CollectionOfLoansReceivableToEmployeesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def collection_of_long_term_loans_receivable_inv_cf(session: Session, head_item_key:str, context:str):
    """
    長期貸付金の回収による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CollectionOfLongTermLoansReceivableInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def collection_of_long_term_loans_receivable_to_employees_inv_cf(session: Session, head_item_key:str, context:str):
    """
    従業員に対する長期貸付金の回収による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CollectionOfLongTermLoansReceivableToEmployeesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def collection_of_short_term_loans_receivable_inv_cf(session: Session, head_item_key:str, context:str):
    """
    短期貸付金の回収による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CollectionOfShortTermLoansReceivableInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commercial_papers_liabilities(session: Session, head_item_key:str, context:str):
    """
    コマーシャル・ペーパー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CommercialPapersLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commission_fee_noe(session: Session, head_item_key:str, context:str):
    """
    支払手数料、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CommissionFeeNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commission_fee_noi(session: Session, head_item_key:str, context:str):
    """
    受取手数料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CommissionFeeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commission_fee_ope_cf(session: Session, head_item_key:str, context:str):
    """
    支払手数料、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CommissionFeeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commission_fee_sga(session: Session, head_item_key:str, context:str):
    """
    支払手数料、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CommissionFeeSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commission_for_purchase_of_treasury_stock_noe(session: Session, head_item_key:str, context:str):
    """
    自己株式取得費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CommissionForPurchaseOfTreasuryStockNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commission_for_syndicate_loan_noe(session: Session, head_item_key:str, context:str):
    """
    シンジケートローン手数料、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CommissionForSyndicateLoanNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commission_income_rev_oa(session: Session, head_item_key:str, context:str):
    """
    手数料収入、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CommissionIncomeRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commissions_and_collection_fees_oeins(session: Session, head_item_key:str, context:str):
    """
    諸手数料及び集金費、経常費用、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CommissionsAndCollectionFeesOEINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commissions_from_subsidiaries_and_affiliates_rev_oa(session: Session, head_item_key:str, context:str):
    """
    関係会社受入手数料、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CommissionsFromSubsidiariesAndAffiliatesRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commitment_fee_noe(session: Session, head_item_key:str, context:str):
    """
    コミットメントフィー、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CommitmentFeeNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def communication_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    通信費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CommunicationExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    支払補償費、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CompensationExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_for_damage_el(session: Session, head_item_key:str, context:str):
    """
    損害賠償金、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CompensationForDamageEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_for_damage_paid_ope_cf(session: Session, head_item_key:str, context:str):
    """
    損害賠償金の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CompensationForDamagePaidOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_for_removal_ope_cf(session: Session, head_item_key:str, context:str):
    """
    移転補償金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CompensationForRemovalOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_for_transfer_ei(session: Session, head_item_key:str, context:str):
    """
    移転補償金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CompensationForTransferEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_income_ei(session: Session, head_item_key:str, context:str):
    """
    受取補償金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CompensationIncomeEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_income_for_expropriation_ei(session: Session, head_item_key:str, context:str):
    """
    収用補償金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CompensationIncomeForExpropriationEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_income_for_expropriation_ope_cf(session: Session, head_item_key:str, context:str):
    """
    収用補償金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CompensationIncomeForExpropriationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取補償金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CompensationIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    受取補償金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CompensationIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensations_sga(session: Session, head_item_key:str, context:str):
    """
    支払報酬、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CompensationsSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensations_salaries_and_allowances_sga(session: Session, head_item_key:str, context:str):
    """
    報酬及び給料手当、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CompensationsSalariesAndAllowancesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def comprehensive_income(session: Session, head_item_key:str, context:str):
    """
    包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ComprehensiveIncome',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def comprehensive_income_attributable_to_non_controlling_interests(session: Session, head_item_key:str, context:str):
    """
    非支配株主に係る包括利益、包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ComprehensiveIncomeAttributableToNonControllingInterests',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def comprehensive_income_attributable_to_owners_of_the_parent(session: Session, head_item_key:str, context:str):
    """
    親会社株主に係る包括利益、包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ComprehensiveIncomeAttributableToOwnersOfTheParent',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def construction_assistance_fund_receivables(session: Session, head_item_key:str, context:str):
    """
    建設協力金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ConstructionAssistanceFundReceivables',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def construction_in_progress(session: Session, head_item_key:str, context:str):
    """
    建設仮勘定
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ConstructionInProgress',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def consumption_taxes_receivable(session: Session, head_item_key:str, context:str):
    """
    未収消費税等
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ConsumptionTaxesReceivable',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def contract_assets(session: Session, head_item_key:str, context:str):
    """
    契約資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ContractAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def contract_liabilities(session: Session, head_item_key:str, context:str):
    """
    契約負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ContractLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def contribution_for_construction_ei(session: Session, head_item_key:str, context:str):
    """
    工事負担金等受入額、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ContributionForConstructionEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def contribution_noe(session: Session, head_item_key:str, context:str):
    """
    寄付金、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ContributionNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def contribution_sga(session: Session, head_item_key:str, context:str):
    """
    寄付金、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ContributionSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def convertible_bond_type_bonds_with_subscription_rights_to_shares(session: Session, head_item_key:str, context:str):
    """
    転換社債型新株予約権付社債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ConvertibleBondTypeBondsWithSubscriptionRightsToShares',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def correspondence_and_transportation_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    通信交通費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CorrespondenceAndTransportationExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_finished_goods_sold(session: Session, head_item_key:str, context:str):
    """
    製品売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostOfFinishedGoodsSold',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_goods_sold(session: Session, head_item_key:str, context:str):
    """
    商品売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostOfGoodsSold',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_lease_revenue_noe(session: Session, head_item_key:str, context:str):
    """
    賃貸収入原価、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostOfLeaseRevenueNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_merchandise_and_finished_goods_sold_cos(session: Session, head_item_key:str, context:str):
    """
    商品及び製品売上原価、売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostOfMerchandiseAndFinishedGoodsSoldCOS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_products_manufactured(session: Session, head_item_key:str, context:str):
    """
    当期製品製造原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostOfProductsManufactured',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_purchased_goods(session: Session, head_item_key:str, context:str):
    """
    当期商品仕入高
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostOfPurchasedGoods',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_sales(session: Session, head_item_key:str, context:str):
    """
    売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostOfSales',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_sales_of_completed_construction_contracts_cns(session: Session, head_item_key:str, context:str):
    """
    完成工事原価、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostOfSalesOfCompletedConstructionContractsCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_sales_on_other_business_cos_exp_oa(session: Session, head_item_key:str, context:str):
    """
    その他の事業売上原価、営業活動による費用・売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostOfSalesOnOtherBusinessCOSExpOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_sales_on_real_estate_business_and_other_cns(session: Session, head_item_key:str, context:str):
    """
    不動産事業等売上原価、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostOfSalesOnRealEstateBusinessAndOtherCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_sales_on_real_estate_business_cos_exp_oa(session: Session, head_item_key:str, context:str):
    """
    不動産事業売上原価、営業活動による費用・売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostOfSalesOnRealEstateBusinessCOSExpOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_sales_on_side_line_business_cns(session: Session, head_item_key:str, context:str):
    """
    兼業事業売上原価、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostOfSalesOnSideLineBusinessCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def costs_on_real_estate_business(session: Session, head_item_key:str, context:str):
    """
    不動産事業支出金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostsOnRealEstateBusiness',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def costs_on_uncompleted_construction_contracts_and_other_cns(session: Session, head_item_key:str, context:str):
    """
    未成工事支出金等、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostsOnUncompletedConstructionContractsAndOtherCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def costs_on_uncompleted_construction_contracts_cns(session: Session, head_item_key:str, context:str):
    """
    未成工事支出金、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostsOnUncompletedConstructionContractsCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def costs_on_uncompleted_services(session: Session, head_item_key:str, context:str):
    """
    未成業務支出金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CostsOnUncompletedServices',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def credit_card_revenue_rev_oa(session: Session, head_item_key:str, context:str):
    """
    包括信用購入あっせん収益、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CreditCardRevenueRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cumulative_effects_of_changes_in_accounting_policies(session: Session, head_item_key:str, context:str):
    """
    会計方針の変更による累積的影響額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CumulativeEffectsOfChangesInAccountingPolicies',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_assets(session: Session, head_item_key:str, context:str):
    """
    流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CurrentAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_liabilities(session: Session, head_item_key:str, context:str):
    """
    流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CurrentLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_portion_of_bonds(session: Session, head_item_key:str, context:str):
    """
    １年内償還予定の社債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CurrentPortionOfBonds',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_portion_of_bonds_with_subscription_rights_to_shares(session: Session, head_item_key:str, context:str):
    """
    １年内償還予定の新株予約権付社債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CurrentPortionOfBondsWithSubscriptionRightsToShares',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_portion_of_convertible_bonds(session: Session, head_item_key:str, context:str):
    """
    １年内償還予定の転換社債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CurrentPortionOfConvertibleBonds',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_portion_of_long_term_loans_payable(session: Session, head_item_key:str, context:str):
    """
    １年内返済予定の長期借入金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CurrentPortionOfLongTermLoansPayable',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_portion_of_long_term_loans_payable_to_subsidiaries_and_affiliates(session: Session, head_item_key:str, context:str):
    """
    １年内返済予定の関係会社長期借入金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CurrentPortionOfLongTermLoansPayableToSubsidiariesAndAffiliates',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_portion_of_long_term_loans_receivable(session: Session, head_item_key:str, context:str):
    """
    １年内回収予定の長期貸付金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CurrentPortionOfLongTermLoansReceivable',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_portion_of_long_term_payables_under_fluidity_lease_receivables_cllea(session: Session, head_item_key:str, context:str):
    """
    １年内支払予定の債権流動化に伴う長期支払債務、流動負債、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CurrentPortionOfLongTermPayablesUnderFluidityLeaseReceivablesCLLEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_portion_of_noncurrent_liabilities_clgas(session: Session, head_item_key:str, context:str):
    """
    １年以内に期限到来の固定負債、流動負債、ガス事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CurrentPortionOfNoncurrentLiabilitiesCLGAS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_portion_of_other_noncurrent_liabilities(session: Session, head_item_key:str, context:str):
    """
    １年内期限到来予定のその他の固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CurrentPortionOfOtherNoncurrentLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def customer_related_intangible_assets(session: Session, head_item_key:str, context:str):
    """
    顧客関連資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CustomerRelatedIntangibleAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def customers_deposits_received_for_commodity_futures_transaction_clcmd(session: Session, head_item_key:str, context:str):
    """
    預り証拠金、流動負債、商品先物取引業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CustomersDepositsReceivedForCommodityFuturesTransactionCLCMD',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def customers_liabilities_for_acceptances_and_guarantees_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    支払承諾見返、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_CustomersLiabilitiesForAcceptancesAndGuaranteesAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_by_corporate_divisionsplitoff_type(session: Session, head_item_key:str, context:str):
    """
    分割型の会社分割による減少
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseByCorporateDivisionsplitoffType',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_in_cash_and_cash_equivalents_resulting_from_exclusion_of_subsidiaries_from_consolidation_cce(session: Session, head_item_key:str, context:str):
    """
    連結除外に伴う現金及び現金同等物の減少額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseInCashAndCashEquivalentsResultingFromExclusionOfSubsidiariesFromConsolidationCCE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_in_money_held_in_trust_inv_cfbnk(session: Session, head_item_key:str, context:str):
    """
    金銭の信託の減少による収入、投資活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseInMoneyHeldInTrustInvCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_in_short_term_loans_payable_fin_cf(session: Session, head_item_key:str, context:str):
    """
    短期借入金の返済による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseInShortTermLoansPayableFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_accounts_receivable_installment_ope_cf(session: Session, head_item_key:str, context:str):
    """
    割賦売掛金の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInAccountsReceivableInstallmentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_accounts_receivable_other_ope_cf(session: Session, head_item_key:str, context:str):
    """
    未収入金の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInAccountsReceivableOtherOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_accounts_receivable_trade_and_contract_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    売上債権及び契約資産の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInAccountsReceivableTradeAndContractAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_advance_payments_ope_cf(session: Session, head_item_key:str, context:str):
    """
    前渡金の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInAdvancePaymentsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_advances_paid_ope_cf(session: Session, head_item_key:str, context:str):
    """
    立替金の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInAdvancesPaidOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_claims_provable_in_bankruptcy_claims_provable_in_rehabilitation_ope_cf(session: Session, head_item_key:str, context:str):
    """
    破産更生債権等の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInClaimsProvableInBankruptcyClaimsProvableInRehabilitationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_consumption_taxes_receivable_payable_ope_cf(session: Session, head_item_key:str, context:str):
    """
    未払又は未収消費税等の増減額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInConsumptionTaxesReceivablePayableOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_consumption_taxes_refund_receivable_ope_cf(session: Session, head_item_key:str, context:str):
    """
    未収消費税等の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInConsumptionTaxesRefundReceivableOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_costs_on_uncompleted_construction_contracts_and_other_ope_cfcns(session: Session, head_item_key:str, context:str):
    """
    未成工事支出金等の増減額（△は増加）、営業活動によるキャッシュ・フロー、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInCostsOnUncompletedConstructionContractsAndOtherOpeCFCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_costs_on_uncompleted_construction_contracts_ope_cfcns(session: Session, head_item_key:str, context:str):
    """
    未成工事支出金の増減額（△は増加）、営業活動によるキャッシュ・フロー、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInCostsOnUncompletedConstructionContractsOpeCFCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_deposits_paid_ope_cf(session: Session, head_item_key:str, context:str):
    """
    預け金の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInDepositsPaidOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_guarantee_deposits_ope_cf(session: Session, head_item_key:str, context:str):
    """
    差入保証金の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInGuaranteeDepositsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_inventories_ope_cf(session: Session, head_item_key:str, context:str):
    """
    棚卸資産の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInInventoriesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_investment_securities_for_sale_ope_cf(session: Session, head_item_key:str, context:str):
    """
    営業投資有価証券の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInInvestmentSecuritiesForSaleOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_lease_investment_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    リース投資資産の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInLeaseInvestmentAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_long_term_prepaid_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    長期前払費用の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInLongTermPrepaidExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_notes_and_accounts_receivable_trade_ope_cf(session: Session, head_item_key:str, context:str):
    """
    売上債権の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInNotesAndAccountsReceivableTradeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_operating_loans_receivable_ope_cf(session: Session, head_item_key:str, context:str):
    """
    営業貸付金の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInOperatingLoansReceivableOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_other_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の資産の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInOtherAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_other_current_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の流動資産の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInOtherCurrentAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_other_inventories_ope_cfcns(session: Session, head_item_key:str, context:str):
    """
    その他の棚卸資産の増減額（△は増加）、営業活動によるキャッシュ・フロー、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInOtherInventoriesOpeCFCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_other_investing_and_financing_activities_assets_ope_cfins(session: Session, head_item_key:str, context:str):
    """
    その他資産（除く投資活動関連、財務活動関連）の増減額（△は増加）、営業活動によるキャッシュ・フロー、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInOtherInvestingAndFinancingActivitiesAssetsOpeCFINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_other_investments_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投資その他の資産の増減額（△は増加）、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInOtherInvestmentsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_other_noncurrent_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の固定資産の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInOtherNoncurrentAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_prepaid_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    前払費用の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInPrepaidExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_prepaid_pension_costs_ope_cf(session: Session, head_item_key:str, context:str):
    """
    前払年金費用の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInPrepaidPensionCostsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_real_estate_for_sale_ope_cf(session: Session, head_item_key:str, context:str):
    """
    販売用不動産の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInRealEstateForSaleOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_short_term_investment_securities_inv_cf(session: Session, head_item_key:str, context:str):
    """
    有価証券の増減額（△は増加）、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInShortTermInvestmentSecuritiesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_short_term_loans_receivable_inv_cf(session: Session, head_item_key:str, context:str):
    """
    短期貸付金の増減額（△は増加）、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInShortTermLoansReceivableInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_supplies_ope_cf(session: Session, head_item_key:str, context:str):
    """
    貯蔵品の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInSuppliesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_time_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    定期預金の増減額（△は増加）、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInTimeDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_treasury_stock_fin_cf(session: Session, head_item_key:str, context:str):
    """
    自己株式の増減額（△は増加）、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DecreaseIncreaseInTreasuryStockFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deferred_and_prepaid_expenses_cawat(session: Session, head_item_key:str, context:str):
    """
    繰延及び前払費用、流動資産、海運業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DeferredAndPrepaidExpensesCAWAT',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deferred_assets(session: Session, head_item_key:str, context:str):
    """
    繰延資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DeferredAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deferred_gains_or_losses_on_hedges(session: Session, head_item_key:str, context:str):
    """
    繰延ヘッジ損益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DeferredGainsOrLossesOnHedges',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deferred_gains_or_losses_on_hedges_before_tax_oci(session: Session, head_item_key:str, context:str):
    """
    繰延ヘッジ損益（税引前）、その他の包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DeferredGainsOrLossesOnHedgesBeforeTaxOCI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deferred_gains_or_losses_on_hedges_net_of_tax_oci(session: Session, head_item_key:str, context:str):
    """
    繰延ヘッジ損益（税引後）、その他の包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DeferredGainsOrLossesOnHedgesNetOfTaxOCI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deferred_organization_expenses_da(session: Session, head_item_key:str, context:str):
    """
    創立費、繰延資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DeferredOrganizationExpensesDA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deferred_profit_on_installment_sales_cllea(session: Session, head_item_key:str, context:str):
    """
    割賦未実現利益、流動負債、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DeferredProfitOnInstallmentSalesCLLEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deferred_tax_assets(session: Session, head_item_key:str, context:str):
    """
    繰延税金資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DeferredTaxAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deferred_tax_assets_for_land_revaluation(session: Session, head_item_key:str, context:str):
    """
    再評価に係る繰延税金資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DeferredTaxAssetsForLandRevaluation',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deferred_tax_liabilities(session: Session, head_item_key:str, context:str):
    """
    繰延税金負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DeferredTaxLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deferred_tax_liabilities_for_land_revaluation(session: Session, head_item_key:str, context:str):
    """
    再評価に係る繰延税金負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DeferredTaxLiabilitiesForLandRevaluation',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deposit_received_real_estate(session: Session, head_item_key:str, context:str):
    """
    不動産事業受入金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DepositReceivedRealEstate',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deposits_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    預金、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DepositsLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deposits_paid(session: Session, head_item_key:str, context:str):
    """
    預け金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DepositsPaid',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deposits_received(session: Session, head_item_key:str, context:str):
    """
    預り金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DepositsReceived',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deposits_received_from_employees(session: Session, head_item_key:str, context:str):
    """
    従業員預り金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DepositsReceivedFromEmployees',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deposits_received_from_members(session: Session, head_item_key:str, context:str):
    """
    会員預り金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DepositsReceivedFromMembers',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def depreciation_and_amortization_on_other_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の償却額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DepreciationAndAmortizationOnOtherOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def depreciation_and_amortization_ope_cf(session: Session, head_item_key:str, context:str):
    """
    減価償却費、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DepreciationAndAmortizationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def depreciation_and_other_amortization_ope_cf(session: Session, head_item_key:str, context:str):
    """
    減価償却費及びその他の償却費、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DepreciationAndOtherAmortizationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def depreciation_noe(session: Session, head_item_key:str, context:str):
    """
    減価償却費、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DepreciationNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def depreciation_of_assets_for_rent_noe(session: Session, head_item_key:str, context:str):
    """
    貸与資産減価償却費、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DepreciationOfAssetsForRentNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def depreciation_of_intangible_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    無形固定資産償却費、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DepreciationOfIntangibleAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def depreciation_of_software_ope_cf(session: Session, head_item_key:str, context:str):
    """
    ソフトウエア償却費、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DepreciationOfSoftwareOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def depreciation_sga(session: Session, head_item_key:str, context:str):
    """
    減価償却費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DepreciationSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def directors_compensations_sga(session: Session, head_item_key:str, context:str):
    """
    役員報酬、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DirectorsCompensationsSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def directors_compensations_salaries_and_allowances_sga(session: Session, head_item_key:str, context:str):
    """
    役員報酬及び給料手当、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DirectorsCompensationsSalariesAndAllowancesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def directors_retirement_benefits_el(session: Session, head_item_key:str, context:str):
    """
    役員退職慰労金、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DirectorsRetirementBenefitsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def directors_retirement_benefits_sga(session: Session, head_item_key:str, context:str):
    """
    役員退職慰労金、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DirectorsRetirementBenefitsSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def disposal_of_treasury_stock(session: Session, head_item_key:str, context:str):
    """
    自己株式の処分
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DisposalOfTreasuryStock',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def distribution_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    配送費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DistributionExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def distribution_facilities_ppegas(session: Session, head_item_key:str, context:str):
    """
    供給設備、有形固定資産、ガス事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DistributionFacilitiesPPEGAS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def dividends_distribution_from_silent_partnership(session: Session, head_item_key:str, context:str):
    """
    匿名組合損益分配額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DividendsDistributionFromSilentPartnership',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def dividends_from_subsidiaries_and_affiliates_rev_oa(session: Session, head_item_key:str, context:str):
    """
    関係会社受取配当金、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DividendsFromSubsidiariesAndAffiliatesRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def dividends_from_surplus(session: Session, head_item_key:str, context:str):
    """
    剰余金の配当
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DividendsFromSurplus',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def dividends_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取配当金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DividendsIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def dividends_income_of_insurance_noi(session: Session, head_item_key:str, context:str):
    """
    保険配当金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DividendsIncomeOfInsuranceNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def dividends_income_of_life_insurance_noi(session: Session, head_item_key:str, context:str):
    """
    生命保険配当金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DividendsIncomeOfLifeInsuranceNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def dividends_paid_to_non_controlling_interests_fin_cf(session: Session, head_item_key:str, context:str):
    """
    非支配株主への配当金の支払額、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DividendsPaidToNonControllingInterestsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def dividends_payable(session: Session, head_item_key:str, context:str):
    """
    未払配当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_DividendsPayable',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def early_extra_retirement_payments_el(session: Session, head_item_key:str, context:str):
    """
    早期割増退職金、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EarlyExtraRetirementPaymentsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def effect_of_exchange_rate_change_on_cash_and_cash_equivalents(session: Session, head_item_key:str, context:str):
    """
    現金及び現金同等物に係る換算差額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EffectOfExchangeRateChangeOnCashAndCashEquivalents',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def electricity_sale_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    売電費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ElectricitySaleExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def electricity_sale_income_noi(session: Session, head_item_key:str, context:str):
    """
    売電収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ElectricitySaleIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def electronically_recorded_monetary_claims_operating_ca(session: Session, head_item_key:str, context:str):
    """
    電子記録債権、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ElectronicallyRecordedMonetaryClaimsOperatingCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def electronically_recorded_obligations_facilities_cl(session: Session, head_item_key:str, context:str):
    """
    設備関係電子記録債務、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ElectronicallyRecordedObligationsFacilitiesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def electronically_recorded_obligations_non_operating_cl(session: Session, head_item_key:str, context:str):
    """
    営業外電子記録債務、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ElectronicallyRecordedObligationsNonOperatingCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def electronically_recorded_obligations_operating_cl(session: Session, head_item_key:str, context:str):
    """
    電子記録債務、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ElectronicallyRecordedObligationsOperatingCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def employees_bonuses_sga(session: Session, head_item_key:str, context:str):
    """
    従業員賞与、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EmployeesBonusesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def employees_salaries_and_allowances_sga(session: Session, head_item_key:str, context:str):
    """
    従業員給料及び手当、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EmployeesSalariesAndAllowancesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def employees_salaries_and_allowances_sgacns(session: Session, head_item_key:str, context:str):
    """
    従業員給料手当、販売費及び一般管理費、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EmployeesSalariesAndAllowancesSGACNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def employees_salaries_and_bonuses_sga(session: Session, head_item_key:str, context:str):
    """
    従業員給料及び賞与、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EmployeesSalariesAndBonusesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def employees_salaries_sga(session: Session, head_item_key:str, context:str):
    """
    従業員給料、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EmployeesSalariesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def ending_finished_goods_cos(session: Session, head_item_key:str, context:str):
    """
    製品期末棚卸高、売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EndingFinishedGoodsCOS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def ending_merchandise_and_finished_goods_cos(session: Session, head_item_key:str, context:str):
    """
    商品及び製品期末棚卸高、売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EndingMerchandiseAndFinishedGoodsCOS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def enterprise_tax_sga(session: Session, head_item_key:str, context:str):
    """
    事業税、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EnterpriseTaxSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def entertainment_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    交際費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EntertainmentExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def environmental_expenses_el(session: Session, head_item_key:str, context:str):
    """
    環境対策費、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EnvironmentalExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def equity_in_earnings_losses_of_affiliates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    持分法による投資損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EquityInEarningsLossesOfAffiliatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def equity_in_earnings_of_affiliates_noi(session: Session, head_item_key:str, context:str):
    """
    持分法による投資利益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EquityInEarningsOfAffiliatesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def equity_in_losses_of_affiliates_noe(session: Session, head_item_key:str, context:str):
    """
    持分法による投資損失、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_EquityInLossesOfAffiliatesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def exercise_of_subscription_rights_to_shares(session: Session, head_item_key:str, context:str):
    """
    新株予約権の行使
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ExerciseOfSubscriptionRightsToShares',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def extra_retirement_payment_ope_cf(session: Session, head_item_key:str, context:str):
    """
    特別退職金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ExtraRetirementPaymentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def extra_retirement_payments_el(session: Session, head_item_key:str, context:str):
    """
    割増退職金、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ExtraRetirementPaymentsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def extra_retirement_payments_noe(session: Session, head_item_key:str, context:str):
    """
    割増退職金、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ExtraRetirementPaymentsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def extraordinary_income(session: Session, head_item_key:str, context:str):
    """
    特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ExtraordinaryIncome',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def extraordinary_loss(session: Session, head_item_key:str, context:str):
    """
    特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ExtraordinaryLoss',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def fees_and_commissions_oibnk(session: Session, head_item_key:str, context:str):
    """
    役務取引等収益、経常収益、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_FeesAndCommissionsOIBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def fees_and_commissions_payments_oebnk(session: Session, head_item_key:str, context:str):
    """
    役務取引等費用、経常費用、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_FeesAndCommissionsPaymentsOEBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def fiduciary_obligation_fee_noi(session: Session, head_item_key:str, context:str):
    """
    業務受託料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_FiduciaryObligationFeeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def financial_expenses(session: Session, head_item_key:str, context:str):
    """
    金融費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_FinancialExpenses',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def financing_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    資金調達費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_FinancingExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def financing_expenses_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    資金調達費用、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_FinancingExpensesOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def finished_goods(session: Session, head_item_key:str, context:str):
    """
    製品
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_FinishedGoods',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def foreign_currency_translation_adjustment(session: Session, head_item_key:str, context:str):
    """
    為替換算調整勘定
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ForeignCurrencyTranslationAdjustment',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def foreign_currency_translation_adjustment_net_of_tax_oci(session: Session, head_item_key:str, context:str):
    """
    為替換算調整勘定（税引後）、その他の包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ForeignCurrencyTranslationAdjustmentNetOfTaxOCI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def foreign_exchange_gains_noi(session: Session, head_item_key:str, context:str):
    """
    為替差益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ForeignExchangeGainsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def foreign_exchange_losses_gains_ope_cf(session: Session, head_item_key:str, context:str):
    """
    為替差損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ForeignExchangeLossesGainsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def foreign_exchange_losses_noe(session: Session, head_item_key:str, context:str):
    """
    為替差損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ForeignExchangeLossesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def foreign_exchanges_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    外国為替、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ForeignExchangesAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def foreign_exchanges_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    外国為替、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ForeignExchangesLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def freightage_and_packing_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    運賃及び荷造費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_FreightageAndPackingExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def freightage_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    運賃、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_FreightageExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_adjustment_of_account_payable_noi(session: Session, head_item_key:str, context:str):
    """
    債務勘定整理益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnAdjustmentOfAccountPayableNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_bad_debts_recovered_noi(session: Session, head_item_key:str, context:str):
    """
    償却債権取立益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnBadDebtsRecoveredNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_change_in_equity_ei(session: Session, head_item_key:str, context:str):
    """
    持分変動利益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnChangeInEquityEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_disposal_of_noncurrent_assets_ei(session: Session, head_item_key:str, context:str):
    """
    固定資産処分益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnDisposalOfNoncurrentAssetsEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_disposal_of_noncurrent_assets_noi(session: Session, head_item_key:str, context:str):
    """
    固定資産処分益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnDisposalOfNoncurrentAssetsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_donation_of_noncurrent_assets_ei(session: Session, head_item_key:str, context:str):
    """
    固定資産受贈益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnDonationOfNoncurrentAssetsEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_donation_of_noncurrent_assets_noi(session: Session, head_item_key:str, context:str):
    """
    固定資産受贈益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnDonationOfNoncurrentAssetsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_donation_of_noncurrent_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産受贈益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnDonationOfNoncurrentAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_extinguishment_of_tie_in_shares_ei(session: Session, head_item_key:str, context:str):
    """
    抱合せ株式消滅差益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnExtinguishmentOfTieInSharesEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_forfeiture_of_unclaimed_dividends_noi(session: Session, head_item_key:str, context:str):
    """
    未払配当金除斥益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnForfeitureOfUnclaimedDividendsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_forgiveness_of_debt_ope_cf(session: Session, head_item_key:str, context:str):
    """
    債務免除益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnForgivenessOfDebtOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_forgiveness_of_debts_ei(session: Session, head_item_key:str, context:str):
    """
    債務免除益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnForgivenessOfDebtsEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_fund_management_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    資金運用収益、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnFundManagementOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_insurance_adjustment_ei(session: Session, head_item_key:str, context:str):
    """
    保険差益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnInsuranceAdjustmentEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_investment_of_securities_noi(session: Session, head_item_key:str, context:str):
    """
    有価証券運用益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnInvestmentOfSecuritiesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_investments_in_capital_noi(session: Session, head_item_key:str, context:str):
    """
    出資金運用益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnInvestmentsInCapitalNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_investments_in_partnership_noi(session: Session, head_item_key:str, context:str):
    """
    投資事業組合運用益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnInvestmentsInPartnershipNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_investments_in_silent_partnership_noi(session: Session, head_item_key:str, context:str):
    """
    匿名組合投資利益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnInvestmentsInSilentPartnershipNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_liquidation_of_subsidiaries_and_affiliates_ei(session: Session, head_item_key:str, context:str):
    """
    関係会社清算益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnLiquidationOfSubsidiariesAndAffiliatesEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_liquidation_of_subsidiaries_ei(session: Session, head_item_key:str, context:str):
    """
    子会社清算益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnLiquidationOfSubsidiariesEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_negative_goodwill_ei(session: Session, head_item_key:str, context:str):
    """
    負ののれん発生益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnNegativeGoodwillEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_negative_goodwill_ope_cf(session: Session, head_item_key:str, context:str):
    """
    負ののれん発生益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnNegativeGoodwillOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_redemption_of_investment_securities_ei(session: Session, head_item_key:str, context:str):
    """
    投資有価証券償還益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnRedemptionOfInvestmentSecuritiesEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_redemption_of_securities_noi(session: Session, head_item_key:str, context:str):
    """
    有価証券償還益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnRedemptionOfSecuritiesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_asset_retirement_obligations_ei(session: Session, head_item_key:str, context:str):
    """
    資産除去債務戻入益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnReversalOfAssetRetirementObligationsEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_provision_for_loss_on_disaster_ei(session: Session, head_item_key:str, context:str):
    """
    災害損失引当金戻入額、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnReversalOfProvisionForLossOnDisasterEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_subscription_rights_to_shares_ei(session: Session, head_item_key:str, context:str):
    """
    新株予約権戻入益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnReversalOfSubscriptionRightsToSharesEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_subscription_rights_to_shares_ope_cf(session: Session, head_item_key:str, context:str):
    """
    新株予約権戻入益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnReversalOfSubscriptionRightsToSharesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_revision_of_retirement_benefit_plan_ei(session: Session, head_item_key:str, context:str):
    """
    退職給付制度改定益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnRevisionOfRetirementBenefitPlanEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_golf_memberships_ei(session: Session, head_item_key:str, context:str):
    """
    ゴルフ会員権売却益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnSalesOfGolfMembershipsEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_goods_noi(session: Session, head_item_key:str, context:str):
    """
    物品売却益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnSalesOfGoodsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_investment_securities_ei(session: Session, head_item_key:str, context:str):
    """
    投資有価証券売却益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnSalesOfInvestmentSecuritiesEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_investment_securities_noi(session: Session, head_item_key:str, context:str):
    """
    投資有価証券売却益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnSalesOfInvestmentSecuritiesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_memberships_ei(session: Session, head_item_key:str, context:str):
    """
    会員権売却益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnSalesOfMembershipsEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_non_current_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産売却益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnSalesOfNonCurrentAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_noncurrent_assets_ei(session: Session, head_item_key:str, context:str):
    """
    固定資産売却益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnSalesOfNoncurrentAssetsEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_noncurrent_assets_noi(session: Session, head_item_key:str, context:str):
    """
    固定資産売却益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnSalesOfNoncurrentAssetsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_property_plant_and_equipment_ei(session: Session, head_item_key:str, context:str):
    """
    有形固定資産売却益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnSalesOfPropertyPlantAndEquipmentEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_scraps1_noi(session: Session, head_item_key:str, context:str):
    """
    作業くず売却益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnSalesOfScraps1NOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_scraps2_noi(session: Session, head_item_key:str, context:str):
    """
    スクラップ売却益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnSalesOfScraps2NOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_securities_oiins(session: Session, head_item_key:str, context:str):
    """
    有価証券売却益、経常収益、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnSalesOfSecuritiesOIINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_subsidiaries_and_affiliates_stocks_ei(session: Session, head_item_key:str, context:str):
    """
    関係会社株式売却益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnSalesOfSubsidiariesAndAffiliatesStocksEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_subsidiaries_stocks_ei(session: Session, head_item_key:str, context:str):
    """
    子会社株式売却益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnSalesOfSubsidiariesStocksEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_step_acquisitions_ei(session: Session, head_item_key:str, context:str):
    """
    段階取得に係る差益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnStepAcquisitionsEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_transfer_of_business_ei(session: Session, head_item_key:str, context:str):
    """
    事業譲渡益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnTransferOfBusinessEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_valuation_of_compound_financial_instruments_noi(session: Session, head_item_key:str, context:str):
    """
    複合金融商品評価益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnValuationOfCompoundFinancialInstrumentsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_valuation_of_derivatives_noi(session: Session, head_item_key:str, context:str):
    """
    デリバティブ評価益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnValuationOfDerivativesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_valuation_of_investment_securities_noi(session: Session, head_item_key:str, context:str):
    """
    投資有価証券評価益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnValuationOfInvestmentSecuritiesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_valuation_of_securities_noi(session: Session, head_item_key:str, context:str):
    """
    有価証券評価益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GainOnValuationOfSecuritiesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def general_and_administrative_expenses_oebnk(session: Session, head_item_key:str, context:str):
    """
    営業経費、経常費用、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GeneralAndAdministrativeExpensesOEBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def general_and_administrative_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    一般管理費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GeneralAndAdministrativeExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def general_reserve(session: Session, head_item_key:str, context:str):
    """
    別途積立金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GeneralReserve',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def golf_club_membership(session: Session, head_item_key:str, context:str):
    """
    ゴルフ会員権
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GolfClubMembership',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def golf_courses(session: Session, head_item_key:str, context:str):
    """
    コース勘定
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GolfCourses',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def goodwill(session: Session, head_item_key:str, context:str):
    """
    のれん
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_Goodwill',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gross_profit(session: Session, head_item_key:str, context:str):
    """
    売上総利益又は売上総損失（△）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GrossProfit',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gross_profit_merchandise_gp(session: Session, head_item_key:str, context:str):
    """
    商品売上総利益又は商品売上総損失（△）、売上総利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GrossProfitMerchandiseGP',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gross_profit_on_completed_construction_contracts_cns(session: Session, head_item_key:str, context:str):
    """
    完成工事総利益又は完成工事総損失（△）、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GrossProfitOnCompletedConstructionContractsCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gross_profit_on_real_estate_business_and_other_cns(session: Session, head_item_key:str, context:str):
    """
    不動産事業等総利益又は不動産事業等総損失（△）、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GrossProfitOnRealEstateBusinessAndOtherCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gross_profit_on_side_line_business_cns(session: Session, head_item_key:str, context:str):
    """
    兼業事業総利益又は兼業事業総損失（△）、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GrossProfitOnSideLineBusinessCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gross_profit_other_business_gp(session: Session, head_item_key:str, context:str):
    """
    その他の事業総利益又はその他の事業総損失（△）、売上総利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GrossProfitOtherBusinessGP',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gross_profit_real_estate_business_gp(session: Session, head_item_key:str, context:str):
    """
    不動産事業総利益又は不動産事業総損失（△）、売上総利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GrossProfitRealEstateBusinessGP',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def guarantee_commission_noe(session: Session, head_item_key:str, context:str):
    """
    支払保証料、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GuaranteeCommissionNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def guarantee_commission_received_noi(session: Session, head_item_key:str, context:str):
    """
    受取保証料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GuaranteeCommissionReceivedNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def guarantee_deposits_cacmd(session: Session, head_item_key:str, context:str):
    """
    差入保証金、流動資産、商品先物取引業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GuaranteeDepositsCACMD',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def guarantee_deposits_ioa(session: Session, head_item_key:str, context:str):
    """
    差入保証金、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GuaranteeDepositsIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def guarantee_deposits_received2_ncl(session: Session, head_item_key:str, context:str):
    """
    預り保証金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GuaranteeDepositsReceived2NCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def guarantee_deposits_received_clsec(session: Session, head_item_key:str, context:str):
    """
    受入保証金、流動負債、第一種金融商品取引業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GuaranteeDepositsReceivedCLSEC',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def guarantee_deposits_received_ncl(session: Session, head_item_key:str, context:str):
    """
    受入保証金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GuaranteeDepositsReceivedNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def guarantee_received_ncllea(session: Session, head_item_key:str, context:str):
    """
    受取保証金、固定負債、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_GuaranteeReceivedNCLLEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def haulage_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    運搬費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_HaulageExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def head_office_transfer_cost_el(session: Session, head_item_key:str, context:str):
    """
    本社移転費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_HeadOfficeTransferCostEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def house_rent_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取家賃、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_HouseRentIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def impairment_loss_el(session: Session, head_item_key:str, context:str):
    """
    減損損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ImpairmentLossEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def impairment_loss_ope_cf(session: Session, head_item_key:str, context:str):
    """
    減損損失、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ImpairmentLossOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_before_dividends_distribution_from_silent_partnership_income_taxes(session: Session, head_item_key:str, context:str):
    """
    匿名組合損益分配前税引前当期純利益又は純損失（△）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncomeBeforeDividendsDistributionFromSilentPartnershipIncomeTaxes',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_before_income_taxes(session: Session, head_item_key:str, context:str):
    """
    税引前当期純利益又は税引前当期純損失（△）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncomeBeforeIncomeTaxes',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_taxes(session: Session, head_item_key:str, context:str):
    """
    法人税等
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncomeTaxes',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_taxes_current(session: Session, head_item_key:str, context:str):
    """
    法人税、住民税及び事業税
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncomeTaxesCurrent',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_taxes_current_consolidated_ins(session: Session, head_item_key:str, context:str):
    """
    法人税及び住民税等、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncomeTaxesCurrentConsolidatedINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_taxes_deferred(session: Session, head_item_key:str, context:str):
    """
    法人税等調整額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncomeTaxesDeferred',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_taxes_paid_ope_cf(session: Session, head_item_key:str, context:str):
    """
    法人税等の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncomeTaxesPaidOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_taxes_paid_refund_ope_cf(session: Session, head_item_key:str, context:str):
    """
    法人税等の支払額又は還付額（△は支払）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncomeTaxesPaidRefundOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_taxes_payable(session: Session, head_item_key:str, context:str):
    """
    未払法人税等
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncomeTaxesPayable',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_taxes_receivable(session: Session, head_item_key:str, context:str):
    """
    未収還付法人税等
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncomeTaxesReceivable',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_taxes_refund_ope_cf(session: Session, head_item_key:str, context:str):
    """
    法人税等の還付額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncomeTaxesRefundOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_accounts_payable_other_and_accrued_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    未払金及び未払費用の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInAccountsPayableOtherAndAccruedExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_accounts_payable_other_ope_cf(session: Session, head_item_key:str, context:str):
    """
    未払金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInAccountsPayableOtherOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_accrued_consumption_taxes_ope_cf(session: Session, head_item_key:str, context:str):
    """
    未払消費税等の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInAccruedConsumptionTaxesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_accrued_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    未払費用の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInAccruedExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_accrued_liabilities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    未払債務の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInAccruedLiabilitiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_advances_received_on_uncompleted_construction_contracts_ope_cfcns(session: Session, head_item_key:str, context:str):
    """
    未成工事受入金の増減額（△は減少）、営業活動によるキャッシュ・フロー、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInAdvancesReceivedOnUncompletedConstructionContractsOpeCFCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_advances_received_ope_cf(session: Session, head_item_key:str, context:str):
    """
    前受金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInAdvancesReceivedOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_allowance_for_doubtful_accounts_ope_cf(session: Session, head_item_key:str, context:str):
    """
    貸倒引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInAllowanceForDoubtfulAccountsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_allowance_for_investment_loss_ope_cf(session: Session, head_item_key:str, context:str):
    """
    投資損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInAllowanceForInvestmentLossOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_allowance_for_loan_losses_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    貸倒引当金の増減（△）、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInAllowanceForLoanLossesOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_cash_and_cash_equivalents_resulting_from_change_of_scope_of_consolidation_cce(session: Session, head_item_key:str, context:str):
    """
    連結の範囲の変更に伴う現金及び現金同等物の増減額（△は減少）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInCashAndCashEquivalentsResultingFromChangeOfScopeOfConsolidationCCE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_commercial_papers_fin_cf(session: Session, head_item_key:str, context:str):
    """
    コマーシャル・ペーパーの増減額（△は減少）、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInCommercialPapersFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_contract_liabilities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    契約負債の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInContractLiabilitiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_customers_deposits_received_for_commodity_futures_transaction_ope_cfcmd(session: Session, head_item_key:str, context:str):
    """
    預り証拠金の増減額（△は減少）、営業活動によるキャッシュ・フロー、商品先物取引業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInCustomersDepositsReceivedForCommodityFuturesTransactionOpeCFCMD',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_deposits_received_ope_cf(session: Session, head_item_key:str, context:str):
    """
    預り金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInDepositsReceivedOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_guarantee_deposits_received_ope_cf(session: Session, head_item_key:str, context:str):
    """
    預り保証金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInGuaranteeDepositsReceivedOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_guarantee_deposits_received_ope_cfsec(session: Session, head_item_key:str, context:str):
    """
    受入保証金の増減額（△は減少）、営業活動によるキャッシュ・フロー、第一種金融商品取引業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInGuaranteeDepositsReceivedOpeCFSEC',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_income_taxes_payable_the_factor_based_tax_ope_cf(session: Session, head_item_key:str, context:str):
    """
    未払法人税等（外形標準課税）の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInIncomeTaxesPayableTheFactorBasedTaxOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_lease_and_guarantee_deposits_received_ope_cf(session: Session, head_item_key:str, context:str):
    """
    預り敷金及び保証金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInLeaseAndGuaranteeDepositsReceivedOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_long_term_accounts_payable_other_ope_cf(session: Session, head_item_key:str, context:str):
    """
    長期未払金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInLongTermAccountsPayableOtherOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_net_defined_benefit_asset_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る資産の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInNetDefinedBenefitAssetOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_net_defined_benefit_liability_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る負債の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInNetDefinedBenefitLiabilityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_notes_and_accounts_payable_trade_ope_cf(session: Session, head_item_key:str, context:str):
    """
    仕入債務の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInNotesAndAccountsPayableTradeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_notes_discounted_ope_cf(session: Session, head_item_key:str, context:str):
    """
    割引手形の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInNotesDiscountedOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_operating_debt_ope_cf(session: Session, head_item_key:str, context:str):
    """
    営業債務の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInOperatingDebtOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_other_assets_liabilities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の資産・負債の増減額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInOtherAssetsLiabilitiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_other_current_liabilities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の流動負債の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInOtherCurrentLiabilitiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_other_investing_and_financing_activities_liabilities_ope_cfins(session: Session, head_item_key:str, context:str):
    """
    その他負債（除く投資活動関連、財務活動関連）の増減額（△は減少）、営業活動によるキャッシュ・フロー、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInOtherInvestingAndFinancingActivitiesLiabilitiesOpeCFINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_other_liabilities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の負債の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInOtherLiabilitiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_other_noncurrent_liabilities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の固定負債の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInOtherNoncurrentLiabilitiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_other_provision_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInOtherProvisionOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_outstanding_claims_ope_cfins(session: Session, head_item_key:str, context:str):
    """
    支払備金の増減額（△は減少）、営業活動によるキャッシュ・フロー、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInOutstandingClaimsOpeCFINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_policy_reserve_ope_cfins(session: Session, head_item_key:str, context:str):
    """
    責任準備金の増減額（△は減少）、営業活動によるキャッシュ・フロー、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInPolicyReserveOpeCFINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_bonuses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    賞与引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForBonusesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_contingent_loss_ope_cf(session: Session, head_item_key:str, context:str):
    """
    偶発損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForContingentLossOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_directors_bonuses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    役員賞与引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForDirectorsBonusesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_directors_retirement_benefits_ope_cf(session: Session, head_item_key:str, context:str):
    """
    役員退職慰労引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForDirectorsRetirementBenefitsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_environmental_measures_ope_cf(session: Session, head_item_key:str, context:str):
    """
    環境対策引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForEnvironmentalMeasuresOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_loss_on_construction_contracts_ope_cf(session: Session, head_item_key:str, context:str):
    """
    工事損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForLossOnConstructionContractsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_loss_on_guarantees_ope_cf(session: Session, head_item_key:str, context:str):
    """
    債務保証損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForLossOnGuaranteesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_loss_on_interest_repayment_ope_cf(session: Session, head_item_key:str, context:str):
    """
    利息返還損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForLossOnInterestRepaymentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_loss_on_liquidation_of_subsidiaries_and_affiliates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社整理損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForLossOnLiquidationOfSubsidiariesAndAffiliatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_loss_on_litigation_ope_cf(session: Session, head_item_key:str, context:str):
    """
    訴訟損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForLossOnLitigationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_loss_on_order_received_ope_cf(session: Session, head_item_key:str, context:str):
    """
    受注損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForLossOnOrderReceivedOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_loss_on_store_closing_ope_cf(session: Session, head_item_key:str, context:str):
    """
    店舗閉鎖損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForLossOnStoreClosingOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_point_card_certificates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    ポイント引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForPointCardCertificatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_product_warranties_ope_cf(session: Session, head_item_key:str, context:str):
    """
    製品保証引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForProductWarrantiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_reimbursement_of_deposits_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    睡眠預金払戻損失引当金の増減（△）、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForReimbursementOfDepositsOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_repairs_ope_cf(session: Session, head_item_key:str, context:str):
    """
    修繕引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForRepairsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_retirement_benefits_and_directors_retirement_benefits_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付及び役員退職慰労引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForRetirementBenefitsAndDirectorsRetirementBenefitsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_retirement_benefits_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForRetirementBenefitsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_sales_promotion_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    販売促進引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForSalesPromotionExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_share_based_payments_ope_cf(session: Session, head_item_key:str, context:str):
    """
    株式報酬引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForShareBasedPaymentsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_share_based_remuneration_for_directors_and_other_officers_ope_cf(session: Session, head_item_key:str, context:str):
    """
    役員株式給付引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForShareBasedRemunerationForDirectorsAndOtherOfficersOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_share_based_remuneration_ope_cf(session: Session, head_item_key:str, context:str):
    """
    株式給付引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForShareBasedRemunerationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_shareholder_benefit_program_ope_cf(session: Session, head_item_key:str, context:str):
    """
    株主優待引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForShareholderBenefitProgramOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_special_repairs_ope_cf(session: Session, head_item_key:str, context:str):
    """
    特別修繕引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForSpecialRepairsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_warranties_for_completed_construction_ope_cf(session: Session, head_item_key:str, context:str):
    """
    完成工事補償引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionForWarrantiesForCompletedConstructionOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_ope_cf(session: Session, head_item_key:str, context:str):
    """
    引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInProvisionOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_reserve_for_price_fluctuation_ope_cfins(session: Session, head_item_key:str, context:str):
    """
    価格変動準備金の増減額（△は減少）、営業活動によるキャッシュ・フロー、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInReserveForPriceFluctuationOpeCFINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_reserves_under_the_special_laws2_ope_cf(session: Session, head_item_key:str, context:str):
    """
    特別法上の引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInReservesUnderTheSpecialLaws2OpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_short_term_bank_loans_and_commercial_papers_fin_cf(session: Session, head_item_key:str, context:str):
    """
    短期借入金及びコマーシャル・ペーパーの増減額（△は減少）、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInShortTermBankLoansAndCommercialPapersFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_short_term_loans_payable_fin_cf(session: Session, head_item_key:str, context:str):
    """
    短期借入金の増減額（△は減少）、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInShortTermLoansPayableFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_unearned_revenue_ope_cf(session: Session, head_item_key:str, context:str):
    """
    前受収益の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseDecreaseInUnearnedRevenueOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_in_cash_and_cash_equivalents_from_newly_consolidated_subsidiary_cce(session: Session, head_item_key:str, context:str):
    """
    新規連結に伴う現金及び現金同等物の増加額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseInCashAndCashEquivalentsFromNewlyConsolidatedSubsidiaryCCE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_in_cash_and_cash_equivalents_resulting_from_merger_cce(session: Session, head_item_key:str, context:str):
    """
    合併に伴う現金及び現金同等物の増加額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseInCashAndCashEquivalentsResultingFromMergerCCE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_in_cash_and_cash_equivalents_resulting_from_merger_with_unconsolidated_subsidiaries_cce(session: Session, head_item_key:str, context:str):
    """
    非連結子会社との合併に伴う現金及び現金同等物の増加額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseInCashAndCashEquivalentsResultingFromMergerWithUnconsolidatedSubsidiariesCCE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_in_money_held_in_trust_inv_cfbnk(session: Session, head_item_key:str, context:str):
    """
    金銭の信託の増加による支出、投資活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseInMoneyHeldInTrustInvCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_in_short_term_loans_payable_fin_cf(session: Session, head_item_key:str, context:str):
    """
    短期借入れによる収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IncreaseInShortTermLoansPayableFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_and_dividends_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取保険金及び配当金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InsuranceAndDividendsIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    保険料、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InsuranceExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_fee_noi(session: Session, head_item_key:str, context:str):
    """
    受取保険料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InsuranceFeeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_funds(session: Session, head_item_key:str, context:str):
    """
    保険積立金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InsuranceFunds',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_funds_for_directors(session: Session, head_item_key:str, context:str):
    """
    役員に対する保険積立金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InsuranceFundsForDirectors',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_income_ei(session: Session, head_item_key:str, context:str):
    """
    受取保険金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InsuranceIncomeEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取保険金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InsuranceIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    受取保険金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InsuranceIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_premiums_refunded_cancellation_noi(session: Session, head_item_key:str, context:str):
    """
    保険解約返戻金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InsurancePremiumsRefundedCancellationNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_return_noi(session: Session, head_item_key:str, context:str):
    """
    保険返戻金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InsuranceReturnNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def intangible_assets(session: Session, head_item_key:str, context:str):
    """
    無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IntangibleAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_and_dividends_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取利息及び配当金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestAndDividendsIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_and_dividends_income_oiins(session: Session, head_item_key:str, context:str):
    """
    利息及び配当金収入、経常収益、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestAndDividendsIncomeOIINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_and_dividends_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    受取利息及び受取配当金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestAndDividendsIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_and_dividends_income_ope_cfins_nonlife(session: Session, head_item_key:str, context:str):
    """
    利息及び配当金収入、営業活動によるキャッシュ・フロー、保険業、損害保険
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestAndDividendsIncomeOpeCFINSNonlife',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_and_dividends_income_received_ope_cf_inv_cf(session: Session, head_item_key:str, context:str):
    """
    利息及び配当金の受取額、営業活動によるキャッシュ・フロー又は投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestAndDividendsIncomeReceivedOpeCFInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_and_dividends_on_securities_oibnk(session: Session, head_item_key:str, context:str):
    """
    有価証券利息配当金、経常収益、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestAndDividendsOnSecuritiesOIBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_expenses_and_loss_on_sales_of_notes_receivable_trade_ope_cf(session: Session, head_item_key:str, context:str):
    """
    支払利息及び手形売却損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestExpensesAndLossOnSalesOfNotesReceivableTradeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    支払利息、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_expenses_oebnk(session: Session, head_item_key:str, context:str):
    """
    資金調達費用、経常費用、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestExpensesOEBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_expenses_oeins(session: Session, head_item_key:str, context:str):
    """
    支払利息、経常費用、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestExpensesOEINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    支払利息、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_expenses_paid_on_loans_and_bonds_ope_cf(session: Session, head_item_key:str, context:str):
    """
    支払利息及び社債利息、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestExpensesPaidOnLoansAndBondsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_expenses_paid_ope_cf_fin_cf(session: Session, head_item_key:str, context:str):
    """
    利息の支払額、営業活動によるキャッシュ・フロー又は財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestExpensesPaidOpeCFFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取利息、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_income_oibnk(session: Session, head_item_key:str, context:str):
    """
    資金運用収益、経常収益、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestIncomeOIBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_income_on_securities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有価証券利息、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestIncomeOnSecuritiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    受取利息、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_income_received_ope_cf(session: Session, head_item_key:str, context:str):
    """
    利息の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestIncomeReceivedOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_on_bonds_noe(session: Session, head_item_key:str, context:str):
    """
    社債利息、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestOnBondsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_on_bonds_ope_cf(session: Session, head_item_key:str, context:str):
    """
    社債利息、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestOnBondsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_on_deposits_oebnk(session: Session, head_item_key:str, context:str):
    """
    預金利息、経常費用、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestOnDepositsOEBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_on_loans_and_discounts_oibnk(session: Session, head_item_key:str, context:str):
    """
    貸出金利息、経常収益、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestOnLoansAndDiscountsOIBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_on_operating_loans_spf(session: Session, head_item_key:str, context:str):
    """
    営業貸付金利息、特定金融業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestOnOperatingLoansSPF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_on_payables_under_securities_lending_transactions_oebnk(session: Session, head_item_key:str, context:str):
    """
    債券貸借取引支払利息、経常費用、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestOnPayablesUnderSecuritiesLendingTransactionsOEBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_on_refund_noi(session: Session, head_item_key:str, context:str):
    """
    還付加算金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestOnRefundNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_on_securities_noi(session: Session, head_item_key:str, context:str):
    """
    有価証券利息、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InterestOnSecuritiesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def inventories(session: Session, head_item_key:str, context:str):
    """
    棚卸資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_Inventories',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def investment_expenses_oeins(session: Session, head_item_key:str, context:str):
    """
    資産運用費用、経常費用、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InvestmentExpensesOEINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def investment_income_oiins(session: Session, head_item_key:str, context:str):
    """
    資産運用収益、経常収益、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InvestmentIncomeOIINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def investment_securities(session: Session, head_item_key:str, context:str):
    """
    投資有価証券
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InvestmentSecurities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def investments_and_other_assets(session: Session, head_item_key:str, context:str):
    """
    投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InvestmentsAndOtherAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def investments_and_other_assets_gross(session: Session, head_item_key:str, context:str):
    """
    投資その他の資産（総額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InvestmentsAndOtherAssetsGross',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def investments_in_capital(session: Session, head_item_key:str, context:str):
    """
    出資金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InvestmentsInCapital',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def investments_in_capital_of_subsidiaries_and_affiliates(session: Session, head_item_key:str, context:str):
    """
    関係会社出資金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_InvestmentsInCapitalOfSubsidiariesAndAffiliates',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def issuance_of_new_shares(session: Session, head_item_key:str, context:str):
    """
    新株の発行
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IssuanceOfNewShares',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def issuance_of_new_sharesexercise_of_subscription_rights_to_shares(session: Session, head_item_key:str, context:str):
    """
    新株の発行（新株予約権の行使）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IssuanceOfNewSharesexerciseOfSubscriptionRightsToShares',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def issuance_of_subscription_rights_to_shares(session: Session, head_item_key:str, context:str):
    """
    新株予約権の発行
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_IssuanceOfSubscriptionRightsToShares',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def land(session: Session, head_item_key:str, context:str):
    """
    土地
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_Land',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def land_and_buildings_for_sale_carwy(session: Session, head_item_key:str, context:str):
    """
    販売土地及び建物、流動資産、鉄道事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LandAndBuildingsForSaleCARWY',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def land_and_buildings_for_sale_in_lots(session: Session, head_item_key:str, context:str):
    """
    分譲土地建物
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LandAndBuildingsForSaleInLots',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def land_and_house_rent_received_noi(session: Session, head_item_key:str, context:str):
    """
    受取地代家賃、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LandAndHouseRentReceivedNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def land_in_trust(session: Session, head_item_key:str, context:str):
    """
    信託土地
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LandInTrust',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lapse_of_subscription_rights_to_shares(session: Session, head_item_key:str, context:str):
    """
    新株予約権の失効
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LapseOfSubscriptionRightsToShares',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_and_guarantee_deposits(session: Session, head_item_key:str, context:str):
    """
    敷金及び保証金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeaseAndGuaranteeDeposits',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_and_guarantee_deposits_received(session: Session, head_item_key:str, context:str):
    """
    受入敷金保証金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeaseAndGuaranteeDepositsReceived',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_assets_ia(session: Session, head_item_key:str, context:str):
    """
    リース資産、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeaseAssetsIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_assets_net_ppe(session: Session, head_item_key:str, context:str):
    """
    リース資産（純額）、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeaseAssetsNetPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_assets_ppe(session: Session, head_item_key:str, context:str):
    """
    リース資産、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeaseAssetsPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_deposits_ioa(session: Session, head_item_key:str, context:str):
    """
    敷金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeaseDepositsIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_investment_assets_ca(session: Session, head_item_key:str, context:str):
    """
    リース投資資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeaseInvestmentAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_investment_assets_ioa(session: Session, head_item_key:str, context:str):
    """
    リース投資資産、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeaseInvestmentAssetsIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_obligations_cl(session: Session, head_item_key:str, context:str):
    """
    リース債務、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeaseObligationsCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_obligations_liabilities(session: Session, head_item_key:str, context:str):
    """
    リース債務、負債の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeaseObligationsLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_obligations_ncl(session: Session, head_item_key:str, context:str):
    """
    リース債務、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeaseObligationsNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_property_ialea(session: Session, head_item_key:str, context:str):
    """
    賃貸資産、無形固定資産、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeasePropertyIALEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_receivables_and_investment_assets_ca(session: Session, head_item_key:str, context:str):
    """
    リース債権及びリース投資資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeaseReceivablesAndInvestmentAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def leased_assets_ppelea(session: Session, head_item_key:str, context:str):
    """
    賃貸資産、合計、有形固定資産、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeasedAssetsPPELEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def leasehold_right(session: Session, head_item_key:str, context:str):
    """
    借地権
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LeaseholdRight',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def legal_and_employee_benefits_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    法定福利及び厚生費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LegalAndEmployeeBenefitsExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def legal_capital_surplus(session: Session, head_item_key:str, context:str):
    """
    資本準備金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LegalCapitalSurplus',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def legal_retained_earnings(session: Session, head_item_key:str, context:str):
    """
    利益準備金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LegalRetainedEarnings',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def legal_welfare_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    法定福利費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LegalWelfareExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def liabilities(session: Session, head_item_key:str, context:str):
    """
    負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_Liabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def liabilities_and_net_assets(session: Session, head_item_key:str, context:str):
    """
    負債純資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LiabilitiesAndNetAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def liabilities_from_application_of_equity_method_ncl(session: Session, head_item_key:str, context:str):
    """
    持分法適用に伴う負債、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LiabilitiesFromApplicationOfEquityMethodNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def listing_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    上場関連費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ListingExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def listing_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    上場関連費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ListingExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def litigation_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    訴訟関連費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LitigationExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def litigation_settlement_el(session: Session, head_item_key:str, context:str):
    """
    訴訟和解金、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LitigationSettlementEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loans_and_bills_discounted_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    貸出金、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LoansAndBillsDiscountedAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loans_receivables_assets_ins(session: Session, head_item_key:str, context:str):
    """
    貸付金、資産の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LoansReceivablesAssetsINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_accounts_payable_other(session: Session, head_item_key:str, context:str):
    """
    長期未払金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermAccountsPayableOther',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_accounts_receivable_other(session: Session, head_item_key:str, context:str):
    """
    長期未収入金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermAccountsReceivableOther',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_advances_received(session: Session, head_item_key:str, context:str):
    """
    長期前受金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermAdvancesReceived',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_deferred_contribution_for_construction(session: Session, head_item_key:str, context:str):
    """
    長期前受工事負担金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermDeferredContributionForConstruction',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_deposits_received(session: Session, head_item_key:str, context:str):
    """
    長期預り金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermDepositsReceived',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_guarantee_deposited(session: Session, head_item_key:str, context:str):
    """
    長期預り保証金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermGuaranteeDeposited',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_lease_and_guarantee_deposited(session: Session, head_item_key:str, context:str):
    """
    長期預り敷金保証金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermLeaseAndGuaranteeDeposited',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_lease_deposited(session: Session, head_item_key:str, context:str):
    """
    長期預り敷金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermLeaseDeposited',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_loans_payable(session: Session, head_item_key:str, context:str):
    """
    長期借入金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermLoansPayable',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_loans_payable_to_subsidiaries_and_affiliates(session: Session, head_item_key:str, context:str):
    """
    関係会社長期借入金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermLoansPayableToSubsidiariesAndAffiliates',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_loans_receivable(session: Session, head_item_key:str, context:str):
    """
    長期貸付金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermLoansReceivable',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_loans_receivable_from_directors_and_employees(session: Session, head_item_key:str, context:str):
    """
    役員及び従業員に対する長期貸付金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermLoansReceivableFromDirectorsAndEmployees',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_loans_receivable_from_employees(session: Session, head_item_key:str, context:str):
    """
    従業員に対する長期貸付金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermLoansReceivableFromEmployees',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_loans_receivable_from_subsidiaries_and_affiliates(session: Session, head_item_key:str, context:str):
    """
    関係会社長期貸付金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermLoansReceivableFromSubsidiariesAndAffiliates',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_payables_under_fluidity_lease_receivables_ncllea(session: Session, head_item_key:str, context:str):
    """
    債権流動化に伴う長期支払債務、固定負債、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermPayablesUnderFluidityLeaseReceivablesNCLLEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_prepaid_expenses(session: Session, head_item_key:str, context:str):
    """
    長期前払費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermPrepaidExpenses',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_time_deposits(session: Session, head_item_key:str, context:str):
    """
    長期預金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermTimeDeposits',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_unearned_revenue(session: Session, head_item_key:str, context:str):
    """
    長期前受収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LongTermUnearnedRevenue',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_adjustment_expenses_oeins(session: Session, head_item_key:str, context:str):
    """
    損害調査費、経常費用、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossAdjustmentExpensesOEINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_cancellation_of_insurance_contract_ope_cf(session: Session, head_item_key:str, context:str):
    """
    保険解約損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnCancellationOfInsuranceContractOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_change_in_equity_ope_cf(session: Session, head_item_key:str, context:str):
    """
    持分変動損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnChangeInEquityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_disposal_of_noncurrent_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産処分損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnDisposalOfNoncurrentAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_disposal_of_property_plant_and_equipment_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有形固定資産処分損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnDisposalOfPropertyPlantAndEquipmentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_extinguishment_of_tie_in_shares_ope_cf(session: Session, head_item_key:str, context:str):
    """
    抱合せ株式消滅差損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnExtinguishmentOfTieInSharesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_investments_in_partnership_ope_cf(session: Session, head_item_key:str, context:str):
    """
    投資事業組合運用損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnInvestmentsInPartnershipOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_liquidation_of_subsidiaries_and_affiliates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社清算損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnLiquidationOfSubsidiariesAndAffiliatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_liquidation_of_subsidiaries_ope_cf(session: Session, head_item_key:str, context:str):
    """
    子会社清算損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnLiquidationOfSubsidiariesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_money_held_in_trust_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    金銭の信託の運用損益（△は運用益）、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnMoneyHeldInTrustOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_operation_of_investments_in_capital_ope_cf(session: Session, head_item_key:str, context:str):
    """
    出資金運用損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnOperationOfInvestmentsInCapitalOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_redemption_of_investment_securities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    投資有価証券償還損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnRedemptionOfInvestmentSecuritiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_redemption_of_securities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有価証券償還損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnRedemptionOfSecuritiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sales_and_retirement_of_noncurrent_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産除売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnSalesAndRetirementOfNoncurrentAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sales_and_retirement_of_property_plant_and_equipment_and_intangible_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有形及び無形固定資産除売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnSalesAndRetirementOfPropertyPlantAndEquipmentAndIntangibleAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sales_and_retirement_of_property_plant_and_equipment_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有形固定資産除売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnSalesAndRetirementOfPropertyPlantAndEquipmentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sales_and_valuation_of_investment_securities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    投資有価証券売却及び評価損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnSalesAndValuationOfInvestmentSecuritiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sales_of_golf_club_memberships_ope_cf(session: Session, head_item_key:str, context:str):
    """
    ゴルフ会員権売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnSalesOfGolfClubMembershipsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sales_of_investment_securities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    投資有価証券売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnSalesOfInvestmentSecuritiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sales_of_membership_ope_cf(session: Session, head_item_key:str, context:str):
    """
    会員権売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnSalesOfMembershipOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sales_of_noncurrent_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnSalesOfNoncurrentAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sales_of_property_plant_and_equipment_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有形固定資産売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnSalesOfPropertyPlantAndEquipmentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sales_of_securities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有価証券売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnSalesOfSecuritiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sales_of_short_term_and_long_term_investment_securities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有価証券及び投資有価証券売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnSalesOfShortTermAndLongTermInvestmentSecuritiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sales_of_stocks_of_subsidiaries_and_affiliates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社株式売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnSalesOfStocksOfSubsidiariesAndAffiliatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sales_of_subsidiaries_stocks_ope_cf(session: Session, head_item_key:str, context:str):
    """
    子会社株式売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnSalesOfSubsidiariesStocksOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_step_acquisitions_ope_cf(session: Session, head_item_key:str, context:str):
    """
    段階取得に係る差損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnStepAcquisitionsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_transfer_of_business_ope_cf(session: Session, head_item_key:str, context:str):
    """
    事業譲渡損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnTransferOfBusinessOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_valuation_of_compound_financial_instruments_ope_cf(session: Session, head_item_key:str, context:str):
    """
    複合金融商品評価損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnValuationOfCompoundFinancialInstrumentsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_valuation_of_derivatives_ope_cf(session: Session, head_item_key:str, context:str):
    """
    デリバティブ評価損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnValuationOfDerivativesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_valuation_of_investment_securities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    投資有価証券評価損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnValuationOfInvestmentSecuritiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_valuation_of_securities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有価証券評価損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnValuationOfSecuritiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_valuation_of_short_term_and_long_term_investment_securities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有価証券及び投資有価証券評価損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainOnValuationOfShortTermAndLongTermInvestmentSecuritiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_related_to_property_plant_and_equipment_ope_cfins(session: Session, head_item_key:str, context:str):
    """
    有形固定資産関係損益（△は益）、営業活動によるキャッシュ・フロー、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainRelatedToPropertyPlantAndEquipmentOpeCFINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_related_to_securities_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    有価証券関係損益（△）、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainRelatedToSecuritiesOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_related_to_securities_ope_cfins(session: Session, head_item_key:str, context:str):
    """
    有価証券関係損益（△は益）、営業活動によるキャッシュ・フロー、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossGainRelatedToSecuritiesOpeCFINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_abandonment_of_inventories_el(session: Session, head_item_key:str, context:str):
    """
    棚卸資産廃棄損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnAbandonmentOfInventoriesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_abandonment_of_inventories_noe(session: Session, head_item_key:str, context:str):
    """
    棚卸資産廃棄損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnAbandonmentOfInventoriesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_abandonment_of_inventories_ope_cf(session: Session, head_item_key:str, context:str):
    """
    棚卸資産廃棄損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnAbandonmentOfInventoriesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_abandonment_of_noncurrent_assets_el(session: Session, head_item_key:str, context:str):
    """
    固定資産廃棄損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnAbandonmentOfNoncurrentAssetsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_abandonment_of_noncurrent_assets_noe(session: Session, head_item_key:str, context:str):
    """
    固定資産廃棄損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnAbandonmentOfNoncurrentAssetsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_abandonment_of_noncurrent_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産廃棄損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnAbandonmentOfNoncurrentAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_business_restructuring_ope_cf(session: Session, head_item_key:str, context:str):
    """
    事業再編損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnBusinessRestructuringOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_business_withdrawal_el(session: Session, head_item_key:str, context:str):
    """
    事業撤退損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnBusinessWithdrawalEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_cancel_of_lease_contracts_noe(session: Session, head_item_key:str, context:str):
    """
    リース解約損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnCancelOfLeaseContractsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_cancellation_of_lease_contracts_el(session: Session, head_item_key:str, context:str):
    """
    リース解約損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnCancellationOfLeaseContractsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_cancellation_of_leasehold_contracts_el(session: Session, head_item_key:str, context:str):
    """
    賃貸借契約解約損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnCancellationOfLeaseholdContractsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_cancellation_of_leases_ope_cf(session: Session, head_item_key:str, context:str):
    """
    リース解約損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnCancellationOfLeasesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_cancellation_of_rental_contract_ope_cf(session: Session, head_item_key:str, context:str):
    """
    賃貸借契約解約損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnCancellationOfRentalContractOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_change_in_equity_el(session: Session, head_item_key:str, context:str):
    """
    持分変動損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnChangeInEquityEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_closing_of_stores_el(session: Session, head_item_key:str, context:str):
    """
    店舗閉鎖損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnClosingOfStoresEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_disaster2_ope_cf(session: Session, head_item_key:str, context:str):
    """
    災害による損失、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnDisaster2OpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_disaster_el(session: Session, head_item_key:str, context:str):
    """
    災害による損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnDisasterEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_disposal_of_inventories_el(session: Session, head_item_key:str, context:str):
    """
    棚卸資産処分損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnDisposalOfInventoriesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_disposal_of_inventories_noe(session: Session, head_item_key:str, context:str):
    """
    棚卸資産処分損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnDisposalOfInventoriesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_disposal_of_noncurrent_assets_el(session: Session, head_item_key:str, context:str):
    """
    固定資産処分損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnDisposalOfNoncurrentAssetsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_disposal_of_noncurrent_assets_noe(session: Session, head_item_key:str, context:str):
    """
    固定資産処分損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnDisposalOfNoncurrentAssetsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_extinguishment_of_tie_in_shares_el(session: Session, head_item_key:str, context:str):
    """
    抱合せ株式消滅差損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnExtinguishmentOfTieInSharesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_insurance_cancellation_el(session: Session, head_item_key:str, context:str):
    """
    保険解約損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnInsuranceCancellationEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_insurance_cancellation_noe(session: Session, head_item_key:str, context:str):
    """
    保険解約損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnInsuranceCancellationNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_investments_in_capital_noe(session: Session, head_item_key:str, context:str):
    """
    出資金運用損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnInvestmentsInCapitalNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_investments_in_partnership_noe(session: Session, head_item_key:str, context:str):
    """
    投資事業組合運用損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnInvestmentsInPartnershipNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_liquidation_of_business_el(session: Session, head_item_key:str, context:str):
    """
    事業整理損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnLiquidationOfBusinessEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_liquidation_of_business_ope_cf(session: Session, head_item_key:str, context:str):
    """
    事業整理損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnLiquidationOfBusinessOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_liquidation_of_subsidiaries_and_affiliates_el(session: Session, head_item_key:str, context:str):
    """
    関係会社清算損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnLiquidationOfSubsidiariesAndAffiliatesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_liquidation_of_subsidiaries_and_affiliates_general_el(session: Session, head_item_key:str, context:str):
    """
    関係会社整理損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnLiquidationOfSubsidiariesAndAffiliatesGeneralEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_liquidation_of_subsidiaries_and_affiliates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社整理損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnLiquidationOfSubsidiariesAndAffiliatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_liquidation_of_subsidiaries_el(session: Session, head_item_key:str, context:str):
    """
    子会社清算損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnLiquidationOfSubsidiariesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_liquidation_of_subsidiaries_general_el(session: Session, head_item_key:str, context:str):
    """
    子会社整理損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnLiquidationOfSubsidiariesGeneralEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_liquidation_of_subsidiaries_ope_cf(session: Session, head_item_key:str, context:str):
    """
    子会社整理損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnLiquidationOfSubsidiariesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_litigation_el(session: Session, head_item_key:str, context:str):
    """
    訴訟関連損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnLitigationEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_redemption_of_securities_noe(session: Session, head_item_key:str, context:str):
    """
    有価証券償還損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnRedemptionOfSecuritiesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_reduction_of_noncurrent_assets_el(session: Session, head_item_key:str, context:str):
    """
    固定資産圧縮損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnReductionOfNoncurrentAssetsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_reduction_of_noncurrent_assets_noe(session: Session, head_item_key:str, context:str):
    """
    固定資産圧縮損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnReductionOfNoncurrentAssetsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_reduction_of_noncurrent_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産圧縮損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnReductionOfNoncurrentAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_retirement_of_inventories_ope_cf(session: Session, head_item_key:str, context:str):
    """
    棚卸資産除却損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnRetirementOfInventoriesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_retirement_of_noncurrent_assets_el(session: Session, head_item_key:str, context:str):
    """
    固定資産除却損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnRetirementOfNoncurrentAssetsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_retirement_of_noncurrent_assets_noe(session: Session, head_item_key:str, context:str):
    """
    固定資産除却損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnRetirementOfNoncurrentAssetsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_retirement_of_noncurrent_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産除却損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnRetirementOfNoncurrentAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_retirement_of_property_plant_and_equipment_el(session: Session, head_item_key:str, context:str):
    """
    有形固定資産除却損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnRetirementOfPropertyPlantAndEquipmentEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_retirement_of_property_plant_and_equipment_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有形固定資産除却損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnRetirementOfPropertyPlantAndEquipmentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_and_retirement_of_noncurrent_assets_el(session: Session, head_item_key:str, context:str):
    """
    固定資産除売却損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnSalesAndRetirementOfNoncurrentAssetsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_and_retirement_of_noncurrent_assets_noe(session: Session, head_item_key:str, context:str):
    """
    固定資産除売却損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnSalesAndRetirementOfNoncurrentAssetsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_of_accounts_receivable_noe(session: Session, head_item_key:str, context:str):
    """
    売上債権売却損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnSalesOfAccountsReceivableNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_of_electronically_recorded_monetary_claims_noe(session: Session, head_item_key:str, context:str):
    """
    電子記録債権売却損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnSalesOfElectronicallyRecordedMonetaryClaimsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_of_investment_securities_el(session: Session, head_item_key:str, context:str):
    """
    投資有価証券売却損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnSalesOfInvestmentSecuritiesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_of_investment_securities_noe(session: Session, head_item_key:str, context:str):
    """
    投資有価証券売却損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnSalesOfInvestmentSecuritiesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_of_membership_el(session: Session, head_item_key:str, context:str):
    """
    会員権売却損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnSalesOfMembershipEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_of_noncurrent_assets_el(session: Session, head_item_key:str, context:str):
    """
    固定資産売却損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnSalesOfNoncurrentAssetsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_of_notes_payable_noe(session: Session, head_item_key:str, context:str):
    """
    手形売却損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnSalesOfNotesPayableNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_of_securities_noe(session: Session, head_item_key:str, context:str):
    """
    有価証券売却損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnSalesOfSecuritiesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_of_stocks_of_subsidiaries_and_affiliates_el(session: Session, head_item_key:str, context:str):
    """
    関係会社株式売却損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnSalesOfStocksOfSubsidiariesAndAffiliatesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_of_subsidiaries_stocks_el(session: Session, head_item_key:str, context:str):
    """
    子会社株式売却損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnSalesOfSubsidiariesStocksEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_step_acquisitions_el(session: Session, head_item_key:str, context:str):
    """
    段階取得に係る差損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnStepAcquisitionsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_store_closings_ope_cf(session: Session, head_item_key:str, context:str):
    """
    店舗閉鎖損失、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnStoreClosingsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_support_to_subsidiaries_and_subsidiaries_and_affiliates_el(session: Session, head_item_key:str, context:str):
    """
    関係会社支援損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnSupportToSubsidiariesAndSubsidiariesAndAffiliatesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_transfer_of_business_el(session: Session, head_item_key:str, context:str):
    """
    事業譲渡損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnTransferOfBusinessEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_transfer_of_receivables_noe(session: Session, head_item_key:str, context:str):
    """
    債権売却損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnTransferOfReceivablesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_compound_financial_instruments_noe(session: Session, head_item_key:str, context:str):
    """
    複合金融商品評価損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnValuationOfCompoundFinancialInstrumentsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_derivatives_noe(session: Session, head_item_key:str, context:str):
    """
    デリバティブ評価損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnValuationOfDerivativesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_golf_club_membership_el(session: Session, head_item_key:str, context:str):
    """
    ゴルフ会員権評価損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnValuationOfGolfClubMembershipEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_golf_club_memberships_ope_cf(session: Session, head_item_key:str, context:str):
    """
    ゴルフ会員権評価損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnValuationOfGolfClubMembershipsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_inventories_el(session: Session, head_item_key:str, context:str):
    """
    棚卸資産評価損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnValuationOfInventoriesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_inventories_noe(session: Session, head_item_key:str, context:str):
    """
    棚卸資産評価損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnValuationOfInventoriesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_investment_securities_el(session: Session, head_item_key:str, context:str):
    """
    投資有価証券評価損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnValuationOfInvestmentSecuritiesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_investment_securities_noe(session: Session, head_item_key:str, context:str):
    """
    投資有価証券評価損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnValuationOfInvestmentSecuritiesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_membership_el(session: Session, head_item_key:str, context:str):
    """
    会員権評価損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnValuationOfMembershipEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_membership_ope_cf(session: Session, head_item_key:str, context:str):
    """
    会員権評価損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnValuationOfMembershipOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_securities_oeins(session: Session, head_item_key:str, context:str):
    """
    有価証券評価損、経常費用、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnValuationOfSecuritiesOEINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_stocks_of_subsidiaries_and_affiliates_el(session: Session, head_item_key:str, context:str):
    """
    関係会社株式評価損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnValuationOfStocksOfSubsidiariesAndAffiliatesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_stocks_of_subsidiaries_and_affiliates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社株式評価損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_LossOnValuationOfStocksOfSubsidiariesAndAffiliatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def machinery_and_equipment(session: Session, head_item_key:str, context:str):
    """
    機械及び装置
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MachineryAndEquipment',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def machinery_and_equipment_net(session: Session, head_item_key:str, context:str):
    """
    機械及び装置（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MachineryAndEquipmentNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def machinery_equipment_and_vehicles(session: Session, head_item_key:str, context:str):
    """
    機械装置及び運搬具
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MachineryEquipmentAndVehicles',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def machinery_equipment_and_vehicles_net(session: Session, head_item_key:str, context:str):
    """
    機械装置及び運搬具（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MachineryEquipmentAndVehiclesNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def machinery_vehicles_tools_furniture_and_fixtures(session: Session, head_item_key:str, context:str):
    """
    機械、運搬具及び工具器具備品
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MachineryVehiclesToolsFurnitureAndFixtures',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def machinery_vehicles_tools_furniture_and_fixtures_net(session: Session, head_item_key:str, context:str):
    """
    機械、運搬具及び工具器具備品（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MachineryVehiclesToolsFurnitureAndFixturesNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def medical_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    衛生費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MedicalExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def membership(session: Session, head_item_key:str, context:str):
    """
    会員権
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_Membership',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def merchandise(session: Session, head_item_key:str, context:str):
    """
    商品
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_Merchandise',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def merchandise_and_finished_goods(session: Session, head_item_key:str, context:str):
    """
    商品及び製品
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MerchandiseAndFinishedGoods',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def miscellaneous_expenses_gas(session: Session, head_item_key:str, context:str):
    """
    雑支出、ガス事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MiscellaneousExpensesGAS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def miscellaneous_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    雑支出、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MiscellaneousExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def miscellaneous_expenses_noerwy(session: Session, head_item_key:str, context:str):
    """
    雑支出、営業外費用、鉄道事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MiscellaneousExpensesNOERWY',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def miscellaneous_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    雑費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MiscellaneousExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def miscellaneous_income_gas(session: Session, head_item_key:str, context:str):
    """
    雑収入、ガス事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MiscellaneousIncomeGAS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def miscellaneous_income_noi(session: Session, head_item_key:str, context:str):
    """
    雑収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MiscellaneousIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def miscellaneous_income_noirwy(session: Session, head_item_key:str, context:str):
    """
    雑収入、営業外収益、鉄道事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MiscellaneousIncomeNOIRWY',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def miscellaneous_loss_noe(session: Session, head_item_key:str, context:str):
    """
    雑損失、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MiscellaneousLossNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def monetary_claims_bought_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    買入金銭債権、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MonetaryClaimsBoughtAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def money_held_in_trust_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    金銭の信託、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_MoneyHeldInTrustAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def negative_goodwill(session: Session, head_item_key:str, context:str):
    """
    負ののれん
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NegativeGoodwill',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def negotiable_certificates_of_deposit_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    譲渡性預金、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NegotiableCertificatesOfDepositLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_assets(session: Session, head_item_key:str, context:str):
    """
    純資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_cash_provided_by_used_in_financing_activities(session: Session, head_item_key:str, context:str):
    """
    財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetCashProvidedByUsedInFinancingActivities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_cash_provided_by_used_in_investment_activities(session: Session, head_item_key:str, context:str):
    """
    投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetCashProvidedByUsedInInvestmentActivities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_cash_provided_by_used_in_operating_activities(session: Session, head_item_key:str, context:str):
    """
    営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetCashProvidedByUsedInOperatingActivities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_changes_of_items_other_than_shareholders_equity(session: Session, head_item_key:str, context:str):
    """
    株主資本以外の項目の当期変動額（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetChangesOfItemsOtherThanShareholdersEquity',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_decrease_increase_in_call_loans_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    コールローン等の純増（△）減、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetDecreaseIncreaseInCallLoansOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_decrease_increase_in_deposit_excluding_deposit_paid_to_bank_of_japan_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    預け金（日銀預け金を除く）の純増（△）減、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetDecreaseIncreaseInDepositExcludingDepositPaidToBankOfJapanOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_decrease_increase_in_foreign_exchanges_assets_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    外国為替（資産）の純増（△）減、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetDecreaseIncreaseInForeignExchangesAssetsOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_decrease_increase_in_lease_receivables_and_investment_assets_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    リース債権及びリース投資資産の純増（△）減、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetDecreaseIncreaseInLeaseReceivablesAndInvestmentAssetsOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_decrease_increase_in_loans_and_bills_discounted_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    貸出金の純増（△）減、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetDecreaseIncreaseInLoansAndBillsDiscountedOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_decrease_increase_in_receivables_under_securities_borrowing_transactions_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    債券貸借取引支払保証金の純増（△）減、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetDecreaseIncreaseInReceivablesUnderSecuritiesBorrowingTransactionsOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_decrease_increase_in_short_term_investment_securities_inv_cf(session: Session, head_item_key:str, context:str):
    """
    有価証券の純増減額（△は増加）、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetDecreaseIncreaseInShortTermInvestmentSecuritiesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_decrease_increase_in_short_term_loans_receivable_inv_cf(session: Session, head_item_key:str, context:str):
    """
    短期貸付金の純増減額（△は増加）、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetDecreaseIncreaseInShortTermLoansReceivableInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_decrease_increase_in_time_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    定期預金の純増減額（△は増加）、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetDecreaseIncreaseInTimeDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_decrease_increase_in_trading_account_securities_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    商品有価証券の純増（△）減、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetDecreaseIncreaseInTradingAccountSecuritiesOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_decrease_increase_in_treasury_stock_fin_cf(session: Session, head_item_key:str, context:str):
    """
    自己株式の純増減額（△は増加）、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetDecreaseIncreaseInTreasuryStockFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_defined_benefit_asset(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetDefinedBenefitAsset',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_defined_benefit_liability(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetDefinedBenefitLiability',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_increase_decrease_in_borrowed_money_excluding_subordinated_borrowings_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    借用金（劣後特約付借入金を除く）の純増減（△）、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetIncreaseDecreaseInBorrowedMoneyExcludingSubordinatedBorrowingsOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_increase_decrease_in_borrowed_money_from_trust_account_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    信託勘定借の純増減（△）、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetIncreaseDecreaseInBorrowedMoneyFromTrustAccountOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_increase_decrease_in_call_money_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    コールマネー等の純増減（△）、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetIncreaseDecreaseInCallMoneyOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_increase_decrease_in_cash_and_cash_equivalents(session: Session, head_item_key:str, context:str):
    """
    現金及び現金同等物の増減額（△は減少）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetIncreaseDecreaseInCashAndCashEquivalents',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_increase_decrease_in_cash_and_deposits_inv_cfins(session: Session, head_item_key:str, context:str):
    """
    預貯金の純増減額（△は増加）、投資活動によるキャッシュ・フロー、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetIncreaseDecreaseInCashAndDepositsInvCFINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_increase_decrease_in_commercial_papers_fin_cf(session: Session, head_item_key:str, context:str):
    """
    コマーシャル・ペーパーの純増減額（△は減少）、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetIncreaseDecreaseInCommercialPapersFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_increase_decrease_in_deposit_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    預金の純増減（△）、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetIncreaseDecreaseInDepositOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_increase_decrease_in_foreign_exchanges_liabilities_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    外国為替（負債）の純増減（△）、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetIncreaseDecreaseInForeignExchangesLiabilitiesOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_increase_decrease_in_negotiable_certificates_of_deposit_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    譲渡性預金の純増減（△）、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetIncreaseDecreaseInNegotiableCertificatesOfDepositOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_increase_decrease_in_payables_under_securities_lending_transactions_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    債券貸借取引受入担保金の純増減（△）、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetIncreaseDecreaseInPayablesUnderSecuritiesLendingTransactionsOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_increase_decrease_in_short_term_loans_payable_fin_cf(session: Session, head_item_key:str, context:str):
    """
    短期借入金の純増減額（△は減少）、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetIncreaseDecreaseInShortTermLoansPayableFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_loss_paid_oeins(session: Session, head_item_key:str, context:str):
    """
    正味支払保険金、経常費用、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetLossPaidOEINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_premiums_written_oiins(session: Session, head_item_key:str, context:str):
    """
    正味収入保険料、経常収益、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetPremiumsWrittenOIINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_sales(session: Session, head_item_key:str, context:str):
    """
    売上高
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetSales',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_sales_of_completed_construction_contracts_cns(session: Session, head_item_key:str, context:str):
    """
    完成工事高、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetSalesOfCompletedConstructionContractsCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_sales_of_finished_goods_rev_oa(session: Session, head_item_key:str, context:str):
    """
    製品売上高、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetSalesOfFinishedGoodsRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_sales_of_goods_rev_oa(session: Session, head_item_key:str, context:str):
    """
    商品売上高、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetSalesOfGoodsRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_sales_of_merchandise_and_finished_goods_rev_oa(session: Session, head_item_key:str, context:str):
    """
    商品及び製品売上高、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetSalesOfMerchandiseAndFinishedGoodsRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_sales_of_real_estate_business_and_other_cns(session: Session, head_item_key:str, context:str):
    """
    不動産事業等売上高、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetSalesOfRealEstateBusinessAndOtherCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_sales_of_side_line_business_cns(session: Session, head_item_key:str, context:str):
    """
    兼業事業売上高、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NetSalesOfSideLineBusinessCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def non_controlling_interests(session: Session, head_item_key:str, context:str):
    """
    非支配株主持分
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NonControllingInterests',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def non_operating_expenses(session: Session, head_item_key:str, context:str):
    """
    営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NonOperatingExpenses',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def non_operating_income(session: Session, head_item_key:str, context:str):
    """
    営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NonOperatingIncome',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def noncurrent_assets(session: Session, head_item_key:str, context:str):
    """
    固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NoncurrentAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def noncurrent_liabilities(session: Session, head_item_key:str, context:str):
    """
    固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NoncurrentLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_and_accounts_payable_trade(session: Session, head_item_key:str, context:str):
    """
    支払手形及び買掛金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NotesAndAccountsPayableTrade',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_and_accounts_receivable_trade(session: Session, head_item_key:str, context:str):
    """
    受取手形及び売掛金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NotesAndAccountsReceivableTrade',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_and_accounts_receivable_trade_and_contract_assets(session: Session, head_item_key:str, context:str):
    """
    受取手形、売掛金及び契約資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NotesAndAccountsReceivableTradeAndContractAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_and_accounts_receivable_trade_net(session: Session, head_item_key:str, context:str):
    """
    受取手形及び売掛金（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NotesAndAccountsReceivableTradeNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_and_operating_accounts_payable_trade(session: Session, head_item_key:str, context:str):
    """
    支払手形及び営業未払金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NotesAndOperatingAccountsPayableTrade',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_and_operating_accounts_receivable_ca(session: Session, head_item_key:str, context:str):
    """
    受取手形及び営業未収入金、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NotesAndOperatingAccountsReceivableCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_payable_accounts_payable_for_construction_contracts_and_other_cns(session: Session, head_item_key:str, context:str):
    """
    支払手形・工事未払金等、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NotesPayableAccountsPayableForConstructionContractsAndOtherCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_payable_accounts_payable_for_construction_contracts_cns(session: Session, head_item_key:str, context:str):
    """
    支払手形・工事未払金、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NotesPayableAccountsPayableForConstructionContractsCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_payable_facilities(session: Session, head_item_key:str, context:str):
    """
    設備関係支払手形
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NotesPayableFacilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_payable_trade(session: Session, head_item_key:str, context:str):
    """
    支払手形
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NotesPayableTrade',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_receivable_accounts_receivable_from_completed_construction_contracts_and_other_cns(session: Session, head_item_key:str, context:str):
    """
    受取手形・完成工事未収入金等、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NotesReceivableAccountsReceivableFromCompletedConstructionContractsAndOtherCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_receivable_accounts_receivable_from_completed_construction_contracts_cns(session: Session, head_item_key:str, context:str):
    """
    受取手形・完成工事未収入金、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NotesReceivableAccountsReceivableFromCompletedConstructionContractsCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_receivable_trade(session: Session, head_item_key:str, context:str):
    """
    受取手形
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_NotesReceivableTrade',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def office_transfer_expenses_el(session: Session, head_item_key:str, context:str):
    """
    事務所移転費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OfficeTransferExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def office_transfer_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    事務所移転費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OfficeTransferExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def office_work_fee_noi(session: Session, head_item_key:str, context:str):
    """
    受取事務手数料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OfficeWorkFeeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_accounts_payable(session: Session, head_item_key:str, context:str):
    """
    営業未払金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingAccountsPayable',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_accounts_receivable_ca(session: Session, head_item_key:str, context:str):
    """
    営業未収入金、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingAccountsReceivableCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_cost(session: Session, head_item_key:str, context:str):
    """
    営業原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingCost',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_expenses(session: Session, head_item_key:str, context:str):
    """
    営業費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingExpenses',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_expenses_and_cost_of_sales_of_transportation_rwy(session: Session, head_item_key:str, context:str):
    """
    運輸業等営業費及び売上原価、鉄道事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingExpensesAndCostOfSalesOfTransportationRWY',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_expenses_ins(session: Session, head_item_key:str, context:str):
    """
    経常費用、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingExpensesINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_expenses_rwy(session: Session, head_item_key:str, context:str):
    """
    営業費、鉄道事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingExpensesRWY',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_gross_profit(session: Session, head_item_key:str, context:str):
    """
    営業総利益又は営業総損失（△）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingGrossProfit',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_income(session: Session, head_item_key:str, context:str):
    """
    営業利益又は営業損失（△）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingIncome',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_income_ins(session: Session, head_item_key:str, context:str):
    """
    経常収益、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingIncomeINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    営業収入、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_loans_ca(session: Session, head_item_key:str, context:str):
    """
    営業貸付金、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingLoansCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_revenue1(session: Session, head_item_key:str, context:str):
    """
    営業収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingRevenue1',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_revenue_cmd(session: Session, head_item_key:str, context:str):
    """
    営業収益、商品先物取引業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingRevenueCMD',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_revenue_rwy(session: Session, head_item_key:str, context:str):
    """
    営業収益、鉄道事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperatingRevenueRWY',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operational_investment_securities_ca(session: Session, head_item_key:str, context:str):
    """
    営業投資有価証券、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OperationalInvestmentSecuritiesCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def ordinary_expenses_bnk(session: Session, head_item_key:str, context:str):
    """
    経常費用、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OrdinaryExpensesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def ordinary_income(session: Session, head_item_key:str, context:str):
    """
    経常利益又は経常損失（△）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OrdinaryIncome',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def ordinary_income_bnk(session: Session, head_item_key:str, context:str):
    """
    経常収益、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OrdinaryIncomeBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_assets_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    その他資産、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherAssetsAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_assets_assets_ins(session: Session, head_item_key:str, context:str):
    """
    その他資産、資産の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherAssetsAssetsINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_ca(session: Session, head_item_key:str, context:str):
    """
    その他、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_cl(session: Session, head_item_key:str, context:str):
    """
    その他、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_cos_exp_oa(session: Session, head_item_key:str, context:str):
    """
    その他、営業活動による費用・売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherCOSExpOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_capital_surplus(session: Session, head_item_key:str, context:str):
    """
    その他資本剰余金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherCapitalSurplus',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_comprehensive_income(session: Session, head_item_key:str, context:str):
    """
    その他の包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherComprehensiveIncome',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_cost_cos_exp_oa(session: Session, head_item_key:str, context:str):
    """
    その他の原価、営業活動による費用・売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherCostCOSExpOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_ei(session: Session, head_item_key:str, context:str):
    """
    その他、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_el(session: Session, head_item_key:str, context:str):
    """
    その他、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_expenses_oebnk(session: Session, head_item_key:str, context:str):
    """
    その他経常費用、経常費用、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherExpensesOEBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    その他の経費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_facilities_ppegas(session: Session, head_item_key:str, context:str):
    """
    その他の設備、有形固定資産、ガス事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherFacilitiesPPEGAS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_financial_revenue_rev_oa(session: Session, head_item_key:str, context:str):
    """
    その他の金融収益、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherFinancialRevenueRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_general_and_administrative_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    その他の一般管理費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherGeneralAndAdministrativeExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_ia(session: Session, head_item_key:str, context:str):
    """
    その他、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_ioa(session: Session, head_item_key:str, context:str):
    """
    その他、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_income_oibnk(session: Session, head_item_key:str, context:str):
    """
    その他経常収益、経常収益、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherIncomeOIBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_intangible_assets_lea(session: Session, head_item_key:str, context:str):
    """
    その他の無形固定資産、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherIntangibleAssetsLEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_inventories(session: Session, head_item_key:str, context:str):
    """
    その他の棚卸資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherInventories',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_liabilities_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    その他負債、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherLiabilitiesLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_liabilities_liabilities_ins(session: Session, head_item_key:str, context:str):
    """
    その他負債、負債の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherLiabilitiesLiabilitiesINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_loss_gain_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherLossGainOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_ncl(session: Session, head_item_key:str, context:str):
    """
    その他、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_noe(session: Session, head_item_key:str, context:str):
    """
    その他、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_noi(session: Session, head_item_key:str, context:str):
    """
    その他、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_net_fin_cf(session: Session, head_item_key:str, context:str):
    """
    その他、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherNetFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_net_inv_cf(session: Session, head_item_key:str, context:str):
    """
    その他、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherNetInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_net_inv_cf_subtotal_ins(session: Session, head_item_key:str, context:str):
    """
    その他、投資活動によるキャッシュ・フロー、小計の下、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherNetInvCFSubtotalINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_net_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherNetOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_net_ope_cf_subtotal(session: Session, head_item_key:str, context:str):
    """
    その他、営業活動によるキャッシュ・フロー、小計の下
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherNetOpeCFSubtotal',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_net_ppe(session: Session, head_item_key:str, context:str):
    """
    その他（純額）、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherNetPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_non_operating_expenses_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の営業外損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherNonOperatingExpensesIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_operating_assets_calea(session: Session, head_item_key:str, context:str):
    """
    その他の営業資産、流動資産、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherOperatingAssetsCALEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_operating_expenses_oeins(session: Session, head_item_key:str, context:str):
    """
    その他経常費用、経常費用、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherOperatingExpensesOEINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_operating_expenses_spf(session: Session, head_item_key:str, context:str):
    """
    その他の営業費用、特定金融業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherOperatingExpensesSPF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_operating_income_oiins(session: Session, head_item_key:str, context:str):
    """
    その他経常収益、経常収益、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherOperatingIncomeOIINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_operating_revenue1_rev_oa(session: Session, head_item_key:str, context:str):
    """
    その他の営業収益、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherOperatingRevenue1RevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_operating_revenue_cmd(session: Session, head_item_key:str, context:str):
    """
    その他、営業収益、商品先物取引業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherOperatingRevenueCMD',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_ordinary_expenses_oebnk(session: Session, head_item_key:str, context:str):
    """
    その他業務費用、経常費用、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherOrdinaryExpensesOEBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_ordinary_income_oibnk(session: Session, head_item_key:str, context:str):
    """
    その他業務収益、経常収益、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherOrdinaryIncomeOIBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_other_assets_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    その他の資産、その他資産、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherOtherAssetsAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_other_liabilities_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    その他の負債、その他負債、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherOtherLiabilitiesLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_ppe(session: Session, head_item_key:str, context:str):
    """
    その他、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_payments_fin_cf(session: Session, head_item_key:str, context:str):
    """
    その他の支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherPaymentsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_payments_inv_cf(session: Session, head_item_key:str, context:str):
    """
    その他の支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherPaymentsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_payments_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の支出、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherPaymentsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_personal_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    その他の人件費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherPersonalExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_proceeds_inv_cf(session: Session, head_item_key:str, context:str):
    """
    その他の収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherProceedsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_proceeds_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の収入、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherProceedsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_provision_cl(session: Session, head_item_key:str, context:str):
    """
    その他の引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherProvisionCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_provision_ncl(session: Session, head_item_key:str, context:str):
    """
    その他の引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherProvisionNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_retained_earnings(session: Session, head_item_key:str, context:str):
    """
    その他利益剰余金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherRetainedEarnings',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_rev_oa(session: Session, head_item_key:str, context:str):
    """
    その他、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_revenue1_rev_oa(session: Session, head_item_key:str, context:str):
    """
    その他の収益、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherRevenue1RevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_revenue2_rev_oa(session: Session, head_item_key:str, context:str):
    """
    その他の収入、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherRevenue2RevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_sga(session: Session, head_item_key:str, context:str):
    """
    その他、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_selling_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    その他の販売費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OtherSellingExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def outstanding_claims_liabilities_ins(session: Session, head_item_key:str, context:str):
    """
    支払備金、負債の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OutstandingClaimsLiabilitiesINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def own_used_assets_ppelea(session: Session, head_item_key:str, context:str):
    """
    社用資産、有形固定資産、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_OwnUsedAssetsPPELEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def packing_and_transportation_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    荷造運搬費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PackingAndTransportationExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def patent_right(session: Session, head_item_key:str, context:str):
    """
    特許権
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PatentRight',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payables_under_fluidity_lease_receivables_cllea(session: Session, head_item_key:str, context:str):
    """
    債権流動化に伴う支払債務、流動負債、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PayablesUnderFluidityLeaseReceivablesCLLEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payables_under_repurchase_agreements_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    売現先勘定、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PayablesUnderRepurchaseAgreementsLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payables_under_securities_lending_transactions_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    債券貸借取引受入担保金、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PayablesUnderSecuritiesLendingTransactionsLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_associated_with_disaster_loss2_ope_cf(session: Session, head_item_key:str, context:str):
    """
    災害による損失の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsAssociatedWithDisasterLoss2OpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_asset_retirement_obligations_inv_cf(session: Session, head_item_key:str, context:str):
    """
    資産除去債務の履行による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForAssetRetirementObligationsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_business_restructuring_ope_cf(session: Session, head_item_key:str, context:str):
    """
    事業再編による支出、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForBusinessRestructuringOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_directors_retirement_benefits_ope_cf(session: Session, head_item_key:str, context:str):
    """
    役員退職慰労金の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForDirectorsRetirementBenefitsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_extra_retirement_payments_ope_cf(session: Session, head_item_key:str, context:str):
    """
    特別退職金の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForExtraRetirementPaymentsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_finance_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    資金調達による支出、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForFinanceOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_guarantee_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    差入保証金の差入による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForGuaranteeDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_investments_in_capital_inv_cf(session: Session, head_item_key:str, context:str):
    """
    出資金の払込による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForInvestmentsInCapitalInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_investments_in_real_estates_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投資不動産の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForInvestmentsInRealEstatesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_issuance_of_common_stock_fin_cf(session: Session, head_item_key:str, context:str):
    """
    株式の発行による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForIssuanceOfCommonStockFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_lease_and_guarantee_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    敷金及び保証金の差入による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForLeaseAndGuaranteeDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_lease_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    敷金の差入による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForLeaseDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_long_term_accounts_payable_other_fin_cf(session: Session, head_item_key:str, context:str):
    """
    長期未払金の返済による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForLongTermAccountsPayableOtherFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_other_operating_activity_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の営業支出、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForOtherOperatingActivityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_payroll_ope_cf(session: Session, head_item_key:str, context:str):
    """
    人件費の支出、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForPayrollOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_raw_materials_and_goods_ope_cf(session: Session, head_item_key:str, context:str):
    """
    原材料又は商品の仕入れによる支出、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForRawMaterialsAndGoodsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_removal_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    移転費用の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForRemovalExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_retirement_of_noncurrent_assets_inv_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産の除却による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForRetirementOfNoncurrentAssetsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_retirement_of_property_plant_and_equipment_inv_cf(session: Session, head_item_key:str, context:str):
    """
    有形固定資産の除却による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForRetirementOfPropertyPlantAndEquipmentInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_sales_of_investments_in_subsidiaries_resulting_in_change_in_scope_of_consolidation_inv_cf(session: Session, head_item_key:str, context:str):
    """
    連結の範囲の変更を伴う子会社株式の売却による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForSalesOfInvestmentsInSubsidiariesResultingInChangeInScopeOfConsolidationInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_sales_of_notes_receivable_trade_ope_cf(session: Session, head_item_key:str, context:str):
    """
    手形売却に伴う支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForSalesOfNotesReceivableTradeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_transfer_of_business2_inv_cf(session: Session, head_item_key:str, context:str):
    """
    事業譲受による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsForTransferOfBusiness2InvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_from_changes_in_ownership_interests_in_subsidiaries_that_do_not_result_in_change_in_scope_of_consolidation_fin_cf(session: Session, head_item_key:str, context:str):
    """
    連結の範囲の変更を伴わない子会社株式の取得による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsFromChangesInOwnershipInterestsInSubsidiariesThatDoNotResultInChangeInScopeOfConsolidationFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_into_time_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    定期預金の預入による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsIntoTimeDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_of_investment_and_loans_receivable_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投融資による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsOfInvestmentAndLoansReceivableInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_of_listing_expenses_fin_cf(session: Session, head_item_key:str, context:str):
    """
    上場関連費用の支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsOfListingExpensesFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_of_loans_receivable_inv_cf(session: Session, head_item_key:str, context:str):
    """
    貸付けによる支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsOfLoansReceivableInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_of_loans_receivable_to_employees_inv_cf(session: Session, head_item_key:str, context:str):
    """
    従業員に対する貸付けによる支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsOfLoansReceivableToEmployeesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_of_long_term_loans_receivable_inv_cf(session: Session, head_item_key:str, context:str):
    """
    長期貸付けによる支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsOfLongTermLoansReceivableInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_of_short_term_loans_receivable_inv_cf(session: Session, head_item_key:str, context:str):
    """
    短期貸付けによる支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PaymentsOfShortTermLoansReceivableInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def penalty_income_ei(session: Session, head_item_key:str, context:str):
    """
    違約金収入、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PenaltyIncomeEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def penalty_income_noi(session: Session, head_item_key:str, context:str):
    """
    違約金収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PenaltyIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def per_item_revenue_rev_oa(session: Session, head_item_key:str, context:str):
    """
    個別信用購入あっせん収益、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PerItemRevenueRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def personal_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    人件費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PersonalExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def policy_reserve_liabilities_ins(session: Session, head_item_key:str, context:str):
    """
    責任準備金、負債の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PolicyReserveLiabilitiesINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def power_utilities_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    動力用水光熱費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PowerUtilitiesExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def prepaid_expenses(session: Session, head_item_key:str, context:str):
    """
    前払費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PrepaidExpenses',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def prepaid_pension_cost_assets(session: Session, head_item_key:str, context:str):
    """
    前払年金費用、資産の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PrepaidPensionCostAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def prepaid_pension_cost_ioa(session: Session, head_item_key:str, context:str):
    """
    前払年金費用、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PrepaidPensionCostIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_cancellation_of_insurance_funds_inv_cf(session: Session, head_item_key:str, context:str):
    """
    保険積立金の解約による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromCancellationOfInsuranceFundsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_changes_in_ownership_interests_in_subsidiaries_that_do_not_result_in_change_in_scope_of_consolidation_fin_cf(session: Session, head_item_key:str, context:str):
    """
    連結の範囲の変更を伴わない子会社株式の売却による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromChangesInOwnershipInterestsInSubsidiariesThatDoNotResultInChangeInScopeOfConsolidationFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_collection_of_guarantee_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    差入保証金の回収による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromCollectionOfGuaranteeDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_collection_of_lease_and_guarantee_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    敷金及び保証金の回収による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromCollectionOfLeaseAndGuaranteeDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_compensation_for_expropriation_ope_cf(session: Session, head_item_key:str, context:str):
    """
    収用補償金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromCompensationForExpropriationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_compensation_for_removal_ope_cf(session: Session, head_item_key:str, context:str):
    """
    移転補償金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromCompensationForRemovalOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_compensation_ope_cf(session: Session, head_item_key:str, context:str):
    """
    補償金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromCompensationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_contribution_for_construction_ope_cf(session: Session, head_item_key:str, context:str):
    """
    工事負担金等受入額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromContributionForConstructionOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_contribution_received_for_construction_inv_cf(session: Session, head_item_key:str, context:str):
    """
    工事負担金等受入による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromContributionReceivedForConstructionInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_disposal_of_treasury_stock_fin_cf(session: Session, head_item_key:str, context:str):
    """
    自己株式の処分による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromDisposalOfTreasuryStockFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_distribution_of_investment_in_partnerships_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投資事業組合からの分配による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromDistributionOfInvestmentInPartnershipsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_dividends_income_from_equity_method_affiliate_ope_cf(session: Session, head_item_key:str, context:str):
    """
    持分法適用会社からの配当金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromDividendsIncomeFromEquityMethodAffiliateOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_exercise_of_stock_option_fin_cf(session: Session, head_item_key:str, context:str):
    """
    ストックオプションの行使による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromExerciseOfStockOptionFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_fund_management_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    資金運用による収入、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromFundManagementOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_guarantee_deposits_received_inv_cf(session: Session, head_item_key:str, context:str):
    """
    預り保証金の受入による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromGuaranteeDepositsReceivedInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_insurance_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    保険金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromInsuranceIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_issuance_of_bonds_fin_cf(session: Session, head_item_key:str, context:str):
    """
    社債の発行による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromIssuanceOfBondsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_issuance_of_commercial_papers_fin_cf(session: Session, head_item_key:str, context:str):
    """
    コマーシャル・ペーパーの発行による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromIssuanceOfCommercialPapersFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_issuance_of_common_stock_fin_cf(session: Session, head_item_key:str, context:str):
    """
    株式の発行による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromIssuanceOfCommonStockFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_issuance_of_stock_resulting_from_exercise_of_subscription_rights_to_shares_fin_cf(session: Session, head_item_key:str, context:str):
    """
    新株予約権の行使による株式の発行による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromIssuanceOfStockResultingFromExerciseOfSubscriptionRightsToSharesFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_issuance_of_subscription_rights_to_shares_fin_cf(session: Session, head_item_key:str, context:str):
    """
    新株予約権の発行による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromIssuanceOfSubscriptionRightsToSharesFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_liquidation_of_subsidiaries_inv_cf(session: Session, head_item_key:str, context:str):
    """
    子会社の清算による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromLiquidationOfSubsidiariesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_long_term_loans_payable_fin_cf(session: Session, head_item_key:str, context:str):
    """
    長期借入れによる収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromLongTermLoansPayableFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_maturity_of_insurance_funds_inv_cf(session: Session, head_item_key:str, context:str):
    """
    保険積立金の払戻による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromMaturityOfInsuranceFundsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_purchase_of_investments_in_subsidiaries_resulting_in_change_in_scope_of_consolidation_inv_cf(session: Session, head_item_key:str, context:str):
    """
    連結の範囲の変更を伴う子会社株式の取得による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromPurchaseOfInvestmentsInSubsidiariesResultingInChangeInScopeOfConsolidationInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_redemption_of_investment_securities_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投資有価証券の償還による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromRedemptionOfInvestmentSecuritiesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_redemption_of_securities_inv_cf(session: Session, head_item_key:str, context:str):
    """
    有価証券の償還による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromRedemptionOfSecuritiesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_redemption_of_securities_inv_cfbnk(session: Session, head_item_key:str, context:str):
    """
    有価証券の償還による収入、投資活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromRedemptionOfSecuritiesInvCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_rent_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    賃貸料の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromRentIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_rental_of_real_estate_for_investment_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投資不動産の賃貸による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromRentalOfRealEstateForInvestmentInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sale_and_leaseback_fin_cf(session: Session, head_item_key:str, context:str):
    """
    セール・アンド・リースバックによる収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSaleAndLeasebackFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_and_redemption_of_investment_securities_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投資有価証券の売却及び償還による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesAndRedemptionOfInvestmentSecuritiesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_and_redemption_of_securities_inv_cfins(session: Session, head_item_key:str, context:str):
    """
    有価証券の売却・償還による収入、投資活動によるキャッシュ・フロー、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesAndRedemptionOfSecuritiesInvCFINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_and_redemption_of_short_term_and_long_term_investment_securities_inv_cf(session: Session, head_item_key:str, context:str):
    """
    有価証券及び投資有価証券の売却及び償還による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesAndRedemptionOfShortTermAndLongTermInvestmentSecuritiesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_golf_club_memberships_inv_cf(session: Session, head_item_key:str, context:str):
    """
    ゴルフ会員権の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesOfGolfClubMembershipsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_intangible_assets_inv_cf(session: Session, head_item_key:str, context:str):
    """
    無形固定資産の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesOfIntangibleAssetsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_investment_securities_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投資有価証券の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesOfInvestmentSecuritiesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_investments_in_real_estates_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投資不動産の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesOfInvestmentsInRealEstatesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_investments_in_subsidiaries_inv_cf(session: Session, head_item_key:str, context:str):
    """
    子会社株式の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesOfInvestmentsInSubsidiariesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_investments_in_subsidiaries_resulting_in_change_in_scope_of_consolidation_inv_cf(session: Session, head_item_key:str, context:str):
    """
    連結の範囲の変更を伴う子会社株式の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesOfInvestmentsInSubsidiariesResultingInChangeInScopeOfConsolidationInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_noncurrent_assets_inv_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesOfNoncurrentAssetsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_property_plant_and_equipment_and_intangible_assets_inv_cf(session: Session, head_item_key:str, context:str):
    """
    有形及び無形固定資産の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesOfPropertyPlantAndEquipmentAndIntangibleAssetsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_property_plant_and_equipment_inv_cf(session: Session, head_item_key:str, context:str):
    """
    有形固定資産の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesOfPropertyPlantAndEquipmentInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_securities_inv_cfbnk(session: Session, head_item_key:str, context:str):
    """
    有価証券の売却による収入、投資活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesOfSecuritiesInvCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_short_term_investment_securities_inv_cf(session: Session, head_item_key:str, context:str):
    """
    有価証券の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesOfShortTermInvestmentSecuritiesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_stocks_of_subsidiaries_and_affiliates_inv_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社株式の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesOfStocksOfSubsidiariesAndAffiliatesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_treasury_stock_fin_cf(session: Session, head_item_key:str, context:str):
    """
    自己株式の売却による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesOfTreasuryStockFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_trust_beneficiary_right_inv_cf(session: Session, head_item_key:str, context:str):
    """
    信託受益権の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSalesOfTrustBeneficiaryRightInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_share_issuance_to_non_controlling_shareholders_fin_cf(session: Session, head_item_key:str, context:str):
    """
    非支配株主からの払込みによる収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromShareIssuanceToNonControllingShareholdersFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_share_of_profits_on_investments_in_capital_inv_cf(session: Session, head_item_key:str, context:str):
    """
    出資金の分配による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromShareOfProfitsOnInvestmentsInCapitalInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_subsidies_for_employment_adjustment_ope_cf(session: Session, head_item_key:str, context:str):
    """
    雇用調整助成金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSubsidiesForEmploymentAdjustmentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_subsidy_income2_ope_cf(session: Session, head_item_key:str, context:str):
    """
    助成金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSubsidyIncome2OpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_subsidy_ope_cf(session: Session, head_item_key:str, context:str):
    """
    補助金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromSubsidyOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_transfer_of_business_inv_cf(session: Session, head_item_key:str, context:str):
    """
    事業譲渡による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromTransferOfBusinessInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_withdrawal_of_investments_in_silent_partnership_inv_cf(session: Session, head_item_key:str, context:str):
    """
    匿名組合出資金の払戻による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromWithdrawalOfInvestmentsInSilentPartnershipInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_withdrawal_of_time_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    定期預金の払戻による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProceedsFromWithdrawalOfTimeDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def production_facilities_ppegas(session: Session, head_item_key:str, context:str):
    """
    製造設備、有形固定資産、ガス事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProductionFacilitiesPPEGAS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def profit_loss(session: Session, head_item_key:str, context:str):
    """
    当期純利益又は当期純損失（△）（平成26年3月28日財規等改正後）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProfitLoss',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def profit_loss_attributable_to_non_controlling_interests(session: Session, head_item_key:str, context:str):
    """
    非支配株主に帰属する当期純利益又は非支配株主に帰属する当期純損失（△）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProfitLossAttributableToNonControllingInterests',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def profit_loss_attributable_to_owners_of_parent(session: Session, head_item_key:str, context:str):
    """
    親会社株主に帰属する当期純利益又は親会社株主に帰属する当期純損失（△）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProfitLossAttributableToOwnersOfParent',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def promotion_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    販売促進費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PromotionExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def property_for_lease_ppelea(session: Session, head_item_key:str, context:str):
    """
    賃貸資産、有形固定資産、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PropertyForLeasePPELEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def property_plant_and_equipment(session: Session, head_item_key:str, context:str):
    """
    有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PropertyPlantAndEquipment',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_cl(session: Session, head_item_key:str, context:str):
    """
    引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_bonuses(session: Session, head_item_key:str, context:str):
    """
    賞与引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForBonuses',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_bonuses_sga(session: Session, head_item_key:str, context:str):
    """
    賞与引当金繰入額、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForBonusesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_business_structure_improvement_cl(session: Session, head_item_key:str, context:str):
    """
    事業構造改善引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForBusinessStructureImprovementCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_business_structure_improvement_el(session: Session, head_item_key:str, context:str):
    """
    事業構造改善引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForBusinessStructureImprovementEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_business_structure_improvement_ncl(session: Session, head_item_key:str, context:str):
    """
    事業構造改善引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForBusinessStructureImprovementNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_contingent_loss_cl(session: Session, head_item_key:str, context:str):
    """
    偶発損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForContingentLossCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_contingent_loss_el(session: Session, head_item_key:str, context:str):
    """
    偶発損失引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForContingentLossEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_contingent_loss_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    偶発損失引当金、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForContingentLossLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_contingent_loss_ncl(session: Session, head_item_key:str, context:str):
    """
    偶発損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForContingentLossNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_directors_bonuses(session: Session, head_item_key:str, context:str):
    """
    役員賞与引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForDirectorsBonuses',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_directors_bonuses_sga(session: Session, head_item_key:str, context:str):
    """
    役員賞与引当金繰入額、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForDirectorsBonusesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_directors_retirement_benefits(session: Session, head_item_key:str, context:str):
    """
    役員退職慰労引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForDirectorsRetirementBenefits',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_directors_retirement_benefits_el(session: Session, head_item_key:str, context:str):
    """
    役員退職慰労引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForDirectorsRetirementBenefitsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_directors_retirement_benefits_sga(session: Session, head_item_key:str, context:str):
    """
    役員退職慰労引当金繰入額、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForDirectorsRetirementBenefitsSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_environmental_measures_cl(session: Session, head_item_key:str, context:str):
    """
    環境対策引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForEnvironmentalMeasuresCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_environmental_measures_ncl(session: Session, head_item_key:str, context:str):
    """
    環境対策引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForEnvironmentalMeasuresNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_gas_holder_repairs_gas(session: Session, head_item_key:str, context:str):
    """
    ガスホルダー修繕引当金、ガス事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForGasHolderRepairsGAS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_business_liquidation_el(session: Session, head_item_key:str, context:str):
    """
    事業整理損失引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnBusinessLiquidationEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_business_of_subsidiaries_and_affiliates_el(session: Session, head_item_key:str, context:str):
    """
    関係会社事業損失引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnBusinessOfSubsidiariesAndAffiliatesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_business_of_subsidiaries_and_affiliates_ncl(session: Session, head_item_key:str, context:str):
    """
    関係会社事業損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnBusinessOfSubsidiariesAndAffiliatesNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_construction_contracts(session: Session, head_item_key:str, context:str):
    """
    工事損失引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnConstructionContracts',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_disaster_cl(session: Session, head_item_key:str, context:str):
    """
    災害損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnDisasterCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_disaster_el(session: Session, head_item_key:str, context:str):
    """
    災害損失引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnDisasterEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_guarantees(session: Session, head_item_key:str, context:str):
    """
    債務保証損失引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnGuarantees',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_guarantees_cl(session: Session, head_item_key:str, context:str):
    """
    債務保証損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnGuaranteesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_guarantees_el(session: Session, head_item_key:str, context:str):
    """
    債務保証損失引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnGuaranteesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_interest_repayment_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    利息返還損失引当金、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnInterestRepaymentLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_interest_repayment_ncl(session: Session, head_item_key:str, context:str):
    """
    利息返還損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnInterestRepaymentNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_liquidation_of_subsidiaries_and_affiliates_cl(session: Session, head_item_key:str, context:str):
    """
    関係会社整理損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnLiquidationOfSubsidiariesAndAffiliatesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_liquidation_of_subsidiaries_and_affiliates_ncl(session: Session, head_item_key:str, context:str):
    """
    関係会社整理損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnLiquidationOfSubsidiariesAndAffiliatesNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_litigation_cl(session: Session, head_item_key:str, context:str):
    """
    訴訟損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnLitigationCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_litigation_el(session: Session, head_item_key:str, context:str):
    """
    訴訟損失引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnLitigationEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_litigation_ncl(session: Session, head_item_key:str, context:str):
    """
    訴訟損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnLitigationNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_order_received_cl(session: Session, head_item_key:str, context:str):
    """
    受注損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnOrderReceivedCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_store_closing(session: Session, head_item_key:str, context:str):
    """
    店舗閉鎖損失引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnStoreClosing',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_store_closing_el(session: Session, head_item_key:str, context:str):
    """
    店舗閉鎖損失引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForLossOnStoreClosingEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_point_card_certificates_cl(session: Session, head_item_key:str, context:str):
    """
    ポイント引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForPointCardCertificatesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_point_card_certificates_ncl(session: Session, head_item_key:str, context:str):
    """
    ポイント引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForPointCardCertificatesNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_product_warranties(session: Session, head_item_key:str, context:str):
    """
    製品保証引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForProductWarranties',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_product_warranties_ncl(session: Session, head_item_key:str, context:str):
    """
    製品保証引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForProductWarrantiesNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_product_warranties_sga(session: Session, head_item_key:str, context:str):
    """
    製品保証引当金繰入額、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForProductWarrantiesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_reimbursement_of_deposits_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    睡眠預金払戻損失引当金、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForReimbursementOfDepositsLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_repairs_ncl(session: Session, head_item_key:str, context:str):
    """
    修繕引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForRepairsNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_retirement_benefits(session: Session, head_item_key:str, context:str):
    """
    退職給付引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForRetirementBenefits',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_retirement_benefits_sga(session: Session, head_item_key:str, context:str):
    """
    退職給付引当金繰入額、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForRetirementBenefitsSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_safety_measures_gas(session: Session, head_item_key:str, context:str):
    """
    保安対策引当金、ガス事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForSafetyMeasuresGAS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_sales_promotion_expenses(session: Session, head_item_key:str, context:str):
    """
    販売促進引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForSalesPromotionExpenses',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_based_payments_cl(session: Session, head_item_key:str, context:str):
    """
    株式報酬引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForShareBasedPaymentsCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_based_payments_ncl(session: Session, head_item_key:str, context:str):
    """
    株式報酬引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForShareBasedPaymentsNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_based_payments_sga(session: Session, head_item_key:str, context:str):
    """
    株式報酬引当金繰入額、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForShareBasedPaymentsSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_based_remuneration_cl(session: Session, head_item_key:str, context:str):
    """
    株式給付引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForShareBasedRemunerationCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_based_remuneration_for_directors_and_other_officers_cl(session: Session, head_item_key:str, context:str):
    """
    役員株式給付引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForShareBasedRemunerationForDirectorsAndOtherOfficersCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_based_remuneration_for_directors_and_other_officers_ncl(session: Session, head_item_key:str, context:str):
    """
    役員株式給付引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForShareBasedRemunerationForDirectorsAndOtherOfficersNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_based_remuneration_ncl(session: Session, head_item_key:str, context:str):
    """
    株式給付引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForShareBasedRemunerationNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_based_remuneration_sga(session: Session, head_item_key:str, context:str):
    """
    株式給付引当金繰入額、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForShareBasedRemunerationSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_shareholder_benefit_program_cl(session: Session, head_item_key:str, context:str):
    """
    株主優待引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForShareholderBenefitProgramCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_special_repairs(session: Session, head_item_key:str, context:str):
    """
    特別修繕引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForSpecialRepairs',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_special_repairs_nclwat(session: Session, head_item_key:str, context:str):
    """
    特別修繕引当金、固定負債、海運業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForSpecialRepairsNCLWAT',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_warranties_for_completed_construction(session: Session, head_item_key:str, context:str):
    """
    完成工事補償引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionForWarrantiesForCompletedConstruction',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_ncl(session: Session, head_item_key:str, context:str):
    """
    引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_allowance_for_doubtful_accounts_el(session: Session, head_item_key:str, context:str):
    """
    貸倒引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionOfAllowanceForDoubtfulAccountsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_allowance_for_doubtful_accounts_noe(session: Session, head_item_key:str, context:str):
    """
    貸倒引当金繰入額、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionOfAllowanceForDoubtfulAccountsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_allowance_for_doubtful_accounts_sga(session: Session, head_item_key:str, context:str):
    """
    貸倒引当金繰入額、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionOfAllowanceForDoubtfulAccountsSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_allowance_for_investment_loss_el(session: Session, head_item_key:str, context:str):
    """
    投資損失引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionOfAllowanceForInvestmentLossEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_general_reserve(session: Session, head_item_key:str, context:str):
    """
    別途積立金の積立
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionOfGeneralReserve',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_legal_retained_earnings(session: Session, head_item_key:str, context:str):
    """
    利益準備金の積立
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionOfLegalRetainedEarnings',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_outstanding_claims_oeins(session: Session, head_item_key:str, context:str):
    """
    支払備金繰入額、経常費用、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionOfOutstandingClaimsOEINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_policy_reserve_oeins(session: Session, head_item_key:str, context:str):
    """
    責任準備金繰入額、経常費用、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionOfPolicyReserveOEINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_reserve_for_advanced_depreciation_of_noncurrent_assets(session: Session, head_item_key:str, context:str):
    """
    固定資産圧縮積立金の積立
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionOfReserveForAdvancedDepreciationOfNoncurrentAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_reserve_for_dividends3(session: Session, head_item_key:str, context:str):
    """
    配当準備積立金の積立
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionOfReserveForDividends3',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_reserve_for_price_fluctuation_elins(session: Session, head_item_key:str, context:str):
    """
    価格変動準備金繰入額、特別損失、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionOfReserveForPriceFluctuationELINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_reserves_under_the_special_laws_el(session: Session, head_item_key:str, context:str):
    """
    特別法上の準備金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ProvisionOfReservesUnderTheSpecialLawsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_discounts_noi(session: Session, head_item_key:str, context:str):
    """
    仕入割引、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseDiscountsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_assets_for_rent_ope_cf(session: Session, head_item_key:str, context:str):
    """
    賃貸資産の取得による支出、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfAssetsForRentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_insurance_funds_inv_cf(session: Session, head_item_key:str, context:str):
    """
    保険積立金の積立による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfInsuranceFundsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_intangible_assets_inv_cf(session: Session, head_item_key:str, context:str):
    """
    無形固定資産の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfIntangibleAssetsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_investment_securities_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投資有価証券の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfInvestmentSecuritiesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_investments_in_capital_of_subsidiaries_inv_cf(session: Session, head_item_key:str, context:str):
    """
    子会社出資金の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfInvestmentsInCapitalOfSubsidiariesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_investments_in_subsidiaries_inv_cf(session: Session, head_item_key:str, context:str):
    """
    子会社株式の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfInvestmentsInSubsidiariesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_investments_in_subsidiaries_resulting_in_change_in_scope_of_consolidation_inv_cf(session: Session, head_item_key:str, context:str):
    """
    連結の範囲の変更を伴う子会社株式の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfInvestmentsInSubsidiariesResultingInChangeInScopeOfConsolidationInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_long_term_prepaid_expenses_inv_cf(session: Session, head_item_key:str, context:str):
    """
    長期前払費用の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfLongTermPrepaidExpensesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_noncurrent_assets_inv_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfNoncurrentAssetsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_property_plant_and_equipment_and_intangible_assets_inv_cf(session: Session, head_item_key:str, context:str):
    """
    有形及び無形固定資産の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfPropertyPlantAndEquipmentAndIntangibleAssetsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_property_plant_and_equipment_inv_cf(session: Session, head_item_key:str, context:str):
    """
    有形固定資産の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfPropertyPlantAndEquipmentInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_securities_inv_cfbnk(session: Session, head_item_key:str, context:str):
    """
    有価証券の取得による支出、投資活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfSecuritiesInvCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_shares_of_consolidated_subsidiaries(session: Session, head_item_key:str, context:str):
    """
    連結子会社株式の取得による持分の増減
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfSharesOfConsolidatedSubsidiaries',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_short_term_and_long_term_investment_securities_inv_cf(session: Session, head_item_key:str, context:str):
    """
    有価証券及び投資有価証券の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfShortTermAndLongTermInvestmentSecuritiesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_short_term_investment_securities_inv_cf(session: Session, head_item_key:str, context:str):
    """
    有価証券の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfShortTermInvestmentSecuritiesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_software_inv_cf(session: Session, head_item_key:str, context:str):
    """
    ソフトウエアの取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfSoftwareInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_stocks_of_subsidiaries_and_affiliates_inv_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社株式の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfStocksOfSubsidiariesAndAffiliatesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_treasury_stock(session: Session, head_item_key:str, context:str):
    """
    自己株式の取得
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfTreasuryStock',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_treasury_stock_fin_cf(session: Session, head_item_key:str, context:str):
    """
    自己株式の取得による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfTreasuryStockFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_treasury_stock_of_subsidiaries_in_consolidation_fin_cf(session: Session, head_item_key:str, context:str):
    """
    子会社の自己株式の取得による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfTreasuryStockOfSubsidiariesInConsolidationFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_trust_beneficiary_right_inv_cf(session: Session, head_item_key:str, context:str):
    """
    信託受益権の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchaseOfTrustBeneficiaryRightInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchased_receivables_ca(session: Session, head_item_key:str, context:str):
    """
    買取債権、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_PurchasedReceivablesCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def raw_materials(session: Session, head_item_key:str, context:str):
    """
    原材料
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RawMaterials',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def raw_materials_and_supplies(session: Session, head_item_key:str, context:str):
    """
    原材料及び貯蔵品
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RawMaterialsAndSupplies',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def raw_materials_and_supplies_cns(session: Session, head_item_key:str, context:str):
    """
    材料貯蔵品、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RawMaterialsAndSuppliesCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def real_estate_for_investment(session: Session, head_item_key:str, context:str):
    """
    投資不動産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RealEstateForInvestment',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def real_estate_for_investment_net(session: Session, head_item_key:str, context:str):
    """
    投資不動産（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RealEstateForInvestmentNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def real_estate_for_rent_net(session: Session, head_item_key:str, context:str):
    """
    賃貸不動産（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RealEstateForRentNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def real_estate_for_sale(session: Session, head_item_key:str, context:str):
    """
    販売用不動産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RealEstateForSale',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def real_estate_for_sale_cns(session: Session, head_item_key:str, context:str):
    """
    販売用不動産、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RealEstateForSaleCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def real_estate_for_sale_in_process(session: Session, head_item_key:str, context:str):
    """
    仕掛販売用不動産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RealEstateForSaleInProcess',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def real_estate_income_rev_oa(session: Session, head_item_key:str, context:str):
    """
    不動産収入、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RealEstateIncomeRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def real_estate_rent_noi(session: Session, head_item_key:str, context:str):
    """
    不動産賃貸料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RealEstateRentNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def redemption_of_bonds_fin_cf(session: Session, head_item_key:str, context:str):
    """
    社債の償還による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RedemptionOfBondsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def redemption_of_commercial_papers_fin_cf(session: Session, head_item_key:str, context:str):
    """
    コマーシャル・ペーパーの償還による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RedemptionOfCommercialPapersFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reduction_entry_of_land_contribution_for_construction_el(session: Session, head_item_key:str, context:str):
    """
    工事負担金等圧縮額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReductionEntryOfLandContributionForConstructionEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def refund_of_income_taxes_income_taxes(session: Session, head_item_key:str, context:str):
    """
    法人税等還付税額、法人税等
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RefundOfIncomeTaxesIncomeTaxes',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def refunded_consumption_taxes_noi(session: Session, head_item_key:str, context:str):
    """
    還付消費税等、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RefundedConsumptionTaxesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reinsurance_accounts_receivable_assets_ins(session: Session, head_item_key:str, context:str):
    """
    再保険貸、資産の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReinsuranceAccountsReceivableAssetsINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def relocation_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    移転費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RelocationExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def remeasurements_of_defined_benefit_plans(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る調整累計額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RemeasurementsOfDefinedBenefitPlans',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def remeasurements_of_defined_benefit_plans_before_tax_oci(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る調整額（税引前）、その他の包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RemeasurementsOfDefinedBenefitPlansBeforeTaxOCI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def remeasurements_of_defined_benefit_plans_net_of_tax_oci(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る調整額（税引後）、その他の包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RemeasurementsOfDefinedBenefitPlansNetOfTaxOCI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_cost_cos_exp_oa(session: Session, head_item_key:str, context:str):
    """
    賃貸原価、営業活動による費用・売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentCostCOSExpOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_cost_of_real_estate_noe(session: Session, head_item_key:str, context:str):
    """
    不動産賃貸原価、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentCostOfRealEstateNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    賃貸費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_expenses_on_facilities_noe(session: Session, head_item_key:str, context:str):
    """
    設備賃貸費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentExpensesOnFacilitiesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_expenses_on_noncurrent_assets_noe(session: Session, head_item_key:str, context:str):
    """
    固定資産賃貸費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentExpensesOnNoncurrentAssetsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_expenses_on_real_estates_noe(session: Session, head_item_key:str, context:str):
    """
    不動産賃貸費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentExpensesOnRealEstatesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_expenses_on_real_estates_sga(session: Session, head_item_key:str, context:str):
    """
    不動産賃借料、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentExpensesOnRealEstatesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    賃借料、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取賃貸料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_income_on_facilities_noi(session: Session, head_item_key:str, context:str):
    """
    設備賃貸料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentIncomeOnFacilitiesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_income_on_noncurrent_assets_noi(session: Session, head_item_key:str, context:str):
    """
    固定資産賃貸料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentIncomeOnNoncurrentAssetsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    受取賃貸料、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_income_rev_oa(session: Session, head_item_key:str, context:str):
    """
    賃貸収入、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentIncomeRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_of_real_estate_for_investment_noi(session: Session, head_item_key:str, context:str):
    """
    投資不動産賃貸料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentOfRealEstateForInvestmentNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rents_sga(session: Session, head_item_key:str, context:str):
    """
    地代家賃、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RentsSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repair_and_maintenance_sga(session: Session, head_item_key:str, context:str):
    """
    修繕維持費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RepairAndMaintenanceSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repair_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    修繕費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RepairExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayment_of_long_term_loans_payable_fin_cf(session: Session, head_item_key:str, context:str):
    """
    長期借入金の返済による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RepaymentOfLongTermLoansPayableFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayments_of_finance_lease_obligations_fin_cf(session: Session, head_item_key:str, context:str):
    """
    ファイナンス・リース債務の返済による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RepaymentsOfFinanceLeaseObligationsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayments_of_guarantee_deposits_received_inv_cf(session: Session, head_item_key:str, context:str):
    """
    預り保証金の返還による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RepaymentsOfGuaranteeDepositsReceivedInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayments_of_installment_payables_fin_cf(session: Session, head_item_key:str, context:str):
    """
    割賦債務の返済による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RepaymentsOfInstallmentPayablesFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayments_of_lease_obligations_fin_cf(session: Session, head_item_key:str, context:str):
    """
    リース債務の返済による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RepaymentsOfLeaseObligationsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayments_to_non_controlling_shareholders_fin_cf(session: Session, head_item_key:str, context:str):
    """
    非支配株主への払戻による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RepaymentsToNonControllingShareholdersFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def research_and_development_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    研究開発費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ResearchAndDevelopmentExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def research_study_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    調査研究費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ResearchStudyExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_advanced_depreciation_of_noncurrent_assets(session: Session, head_item_key:str, context:str):
    """
    固定資産圧縮積立金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReserveForAdvancedDepreciationOfNoncurrentAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_commodities_transaction_liabilities_reserves_under_the_special_laws_cmd(session: Session, head_item_key:str, context:str):
    """
    商品取引責任準備金、特別法上の準備金、商品先物取引業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReserveForCommoditiesTransactionLiabilitiesReservesUnderTheSpecialLawsCMD',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_contract_of_insurance(session: Session, head_item_key:str, context:str):
    """
    保険契約準備金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReserveForContractOfInsurance',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_dividends3(session: Session, head_item_key:str, context:str):
    """
    配当準備積立金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReserveForDividends3',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_financial_products_transaction_liabilities_reserves_under_the_special_laws_sec(session: Session, head_item_key:str, context:str):
    """
    金融商品取引責任準備金、特別法上の準備金、第一種金融商品取引業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReserveForFinancialProductsTransactionLiabilitiesReservesUnderTheSpecialLawsSEC',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_insurance_policy_liabilities_liabilities_ins(session: Session, head_item_key:str, context:str):
    """
    保険契約準備金、負債の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReserveForInsurancePolicyLiabilitiesLiabilitiesINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_price_fluctuation_liabilities_ins(session: Session, head_item_key:str, context:str):
    """
    価格変動準備金、負債の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReserveForPriceFluctuationLiabilitiesINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_reduction_entry2(session: Session, head_item_key:str, context:str):
    """
    圧縮積立金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReserveForReductionEntry2',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_reduction_entry_of_real_estate(session: Session, head_item_key:str, context:str):
    """
    不動産圧縮積立金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReserveForReductionEntryOfRealEstate',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_special_account_for_advanced_depreciation_of_noncurrent_assets(session: Session, head_item_key:str, context:str):
    """
    固定資産圧縮特別勘定積立金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReserveForSpecialAccountForAdvancedDepreciationOfNoncurrentAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserves_under_the_special_laws1(session: Session, head_item_key:str, context:str):
    """
    特別法上の準備金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReservesUnderTheSpecialLaws1',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserves_under_the_special_laws2(session: Session, head_item_key:str, context:str):
    """
    特別法上の引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReservesUnderTheSpecialLaws2',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rest_of_the_other_assets_assets_ins(session: Session, head_item_key:str, context:str):
    """
    その他の資産、資産の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RestOfTheOtherAssetsAssetsINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def restated_balance(session: Session, head_item_key:str, context:str):
    """
    会計方針の変更を反映した当期首残高
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RestatedBalance',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def restructuring_loss_el(session: Session, head_item_key:str, context:str):
    """
    事業再編損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RestructuringLossEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def retained_earnings(session: Session, head_item_key:str, context:str):
    """
    利益剰余金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RetainedEarnings',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def retained_earnings_brought_forward(session: Session, head_item_key:str, context:str):
    """
    繰越利益剰余金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RetainedEarningsBroughtForward',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def retirement_benefit_expenses_el(session: Session, head_item_key:str, context:str):
    """
    退職給付費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RetirementBenefitExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def retirement_benefit_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    退職給付費用、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RetirementBenefitExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def retirement_of_treasury_stock(session: Session, head_item_key:str, context:str):
    """
    自己株式の消却
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RetirementOfTreasuryStock',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def retirement_payments_sga(session: Session, head_item_key:str, context:str):
    """
    退職金、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RetirementPaymentsSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revaluation_reserve_for_land(session: Session, head_item_key:str, context:str):
    """
    土地再評価差額金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RevaluationReserveForLand',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revaluation_reserve_for_land_net_of_tax_oci(session: Session, head_item_key:str, context:str):
    """
    土地再評価差額金（税引後）、その他の包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RevaluationReserveForLandNetOfTaxOCI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revenue(session: Session, head_item_key:str, context:str):
    """
    売上収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_Revenue',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revenue_from_contracts_with_customers(session: Session, head_item_key:str, context:str):
    """
    顧客との契約から生じる収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RevenueFromContractsWithCustomers',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revenue_from_credit_guarantee_rev_oa(session: Session, head_item_key:str, context:str):
    """
    信用保証収益、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RevenueFromCreditGuaranteeRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revenue_other_than_that_from_contracts_with_customers(session: Session, head_item_key:str, context:str):
    """
    顧客との契約から生じる収益以外の収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RevenueOtherThanThatFromContractsWithCustomers',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_allowance_for_doubtful_accounts_ei(session: Session, head_item_key:str, context:str):
    """
    貸倒引当金戻入額、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReversalOfAllowanceForDoubtfulAccountsEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_allowance_for_doubtful_accounts_noi(session: Session, head_item_key:str, context:str):
    """
    貸倒引当金戻入額、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReversalOfAllowanceForDoubtfulAccountsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_policy_reserve_ins(session: Session, head_item_key:str, context:str):
    """
    責任準備金戻入額、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReversalOfPolicyReserveINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_provision_for_business_structure_improvement_ei(session: Session, head_item_key:str, context:str):
    """
    事業構造改善引当金戻入額、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReversalOfProvisionForBusinessStructureImprovementEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_provision_for_directors_retirement_benefits_ei(session: Session, head_item_key:str, context:str):
    """
    役員退職慰労引当金戻入額、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReversalOfProvisionForDirectorsRetirementBenefitsEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_provision_for_loss_on_liquidation_of_subsidiaries_and_affiliates_ei(session: Session, head_item_key:str, context:str):
    """
    関係会社整理損失引当金戻入額、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReversalOfProvisionForLossOnLiquidationOfSubsidiariesAndAffiliatesEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_provision_for_loss_on_store_closing_ei(session: Session, head_item_key:str, context:str):
    """
    店舗閉鎖損失引当金戻入額、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReversalOfProvisionForLossOnStoreClosingEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_reserve_for_advanced_depreciation_of_noncurrent_assets(session: Session, head_item_key:str, context:str):
    """
    固定資産圧縮積立金の取崩
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReversalOfReserveForAdvancedDepreciationOfNoncurrentAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_reserve_for_reduction_entry2(session: Session, head_item_key:str, context:str):
    """
    圧縮積立金の取崩
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReversalOfReserveForReductionEntry2',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_reserve_for_reduction_entry_of_real_estate(session: Session, head_item_key:str, context:str):
    """
    不動産圧縮積立金の取崩
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReversalOfReserveForReductionEntryOfRealEstate',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_reserve_for_special_depreciation(session: Session, head_item_key:str, context:str):
    """
    特別償却準備金の取崩
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReversalOfReserveForSpecialDepreciation',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_revaluation_reserve_for_land(session: Session, head_item_key:str, context:str):
    """
    土地再評価差額金の取崩
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReversalOfRevaluationReserveForLand',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_special_reserve_for_expansion_of_railway_transport_capacity_eirwy(session: Session, head_item_key:str, context:str):
    """
    特定都市鉄道整備準備金取崩額、特別利益、鉄道事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ReversalOfSpecialReserveForExpansionOfRailwayTransportCapacityEIRWY',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def right_of_trademark(session: Session, head_item_key:str, context:str):
    """
    商標権
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RightOfTrademark',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def right_of_use_assets(session: Session, head_item_key:str, context:str):
    """
    使用権資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RightOfUseAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def right_of_use_assets_net(session: Session, head_item_key:str, context:str):
    """
    使用権資産（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RightOfUseAssetsNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def right_of_using_facilities_ia(session: Session, head_item_key:str, context:str):
    """
    施設利用権
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RightOfUsingFacilitiesIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def royalty_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取ロイヤリティー、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_RoyaltyIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def salaries_allowances_and_bonuses_sga(session: Session, head_item_key:str, context:str):
    """
    給料手当及び賞与、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SalariesAllowancesAndBonusesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def salaries_and_allowances_sga(session: Session, head_item_key:str, context:str):
    """
    給料及び手当、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SalariesAndAllowancesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def salaries_and_bonuses_sga(session: Session, head_item_key:str, context:str):
    """
    給料及び賞与、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SalariesAndBonusesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def salaries_and_wages_sga(session: Session, head_item_key:str, context:str):
    """
    給料及び賃金、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SalariesAndWagesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def salaries_sga(session: Session, head_item_key:str, context:str):
    """
    給料、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SalariesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def sales_and_administrative_expenses_oeins(session: Session, head_item_key:str, context:str):
    """
    営業費及び一般管理費、経常費用、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SalesAndAdministrativeExpensesOEINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def sales_commission_sga(session: Session, head_item_key:str, context:str):
    """
    販売手数料、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SalesCommissionSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def sales_discounts_noe(session: Session, head_item_key:str, context:str):
    """
    売上割引、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SalesDiscountsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def sales_on_other_business_rev_oa(session: Session, head_item_key:str, context:str):
    """
    その他の事業売上高、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SalesOnOtherBusinessRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def sales_on_real_estate_business_rev_oa(session: Session, head_item_key:str, context:str):
    """
    不動産事業売上高、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SalesOnRealEstateBusinessRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def securities_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    有価証券、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SecuritiesAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def securities_assets_ins(session: Session, head_item_key:str, context:str):
    """
    有価証券、資産の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SecuritiesAssetsINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def selling_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    販売費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SellingExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def selling_general_and_administrative_expenses(session: Session, head_item_key:str, context:str):
    """
    販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SellingGeneralAndAdministrativeExpenses',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def selling_general_and_administrative_expenses_gas(session: Session, head_item_key:str, context:str):
    """
    供給販売費及び一般管理費、ガス事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SellingGeneralAndAdministrativeExpensesGAS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def semi_finished_goods(session: Session, head_item_key:str, context:str):
    """
    半製品
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SemiFinishedGoods',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def service_and_maintenance_facilities_ppegas(session: Session, head_item_key:str, context:str):
    """
    業務設備、有形固定資産、ガス事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ServiceAndMaintenanceFacilitiesPPEGAS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def settlement_package_el(session: Session, head_item_key:str, context:str):
    """
    和解金、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SettlementPackageEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def settlement_package_noe(session: Session, head_item_key:str, context:str):
    """
    和解金、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SettlementPackageNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def settlement_package_ope_cf(session: Session, head_item_key:str, context:str):
    """
    和解金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SettlementPackageOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def settlement_package_paid_ope_cf(session: Session, head_item_key:str, context:str):
    """
    和解金の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SettlementPackagePaidOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def settlement_package_received_ope_cf(session: Session, head_item_key:str, context:str):
    """
    和解金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SettlementPackageReceivedOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def settlement_received_ei(session: Session, head_item_key:str, context:str):
    """
    受取和解金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SettlementReceivedEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def settlement_received_ope_cf(session: Session, head_item_key:str, context:str):
    """
    受取和解金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SettlementReceivedOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def share_acquisition_rights_issuance_costs_noe(session: Session, head_item_key:str, context:str):
    """
    新株予約権発行費、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ShareAcquisitionRightsIssuanceCostsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def share_based_compensation_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    株式報酬費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ShareBasedCompensationExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def share_based_compensation_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    株式報酬費用、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ShareBasedCompensationExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def share_of_other_comprehensive_income_of_associates_accounted_for_using_equity_method_oci(session: Session, head_item_key:str, context:str):
    """
    持分法適用会社に対する持分相当額、その他の包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ShareOfOtherComprehensiveIncomeOfAssociatesAccountedForUsingEquityMethodOCI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def shareholders_equity(session: Session, head_item_key:str, context:str):
    """
    株主資本
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ShareholdersEquity',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def short_term_bonds_payable(session: Session, head_item_key:str, context:str):
    """
    短期社債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ShortTermBondsPayable',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def short_term_investment_securities(session: Session, head_item_key:str, context:str):
    """
    有価証券
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ShortTermInvestmentSecurities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def short_term_loans_payable(session: Session, head_item_key:str, context:str):
    """
    短期借入金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ShortTermLoansPayable',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def short_term_loans_payable_to_subsidiaries_and_affiliates(session: Session, head_item_key:str, context:str):
    """
    関係会社短期借入金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ShortTermLoansPayableToSubsidiariesAndAffiliates',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def short_term_loans_receivable(session: Session, head_item_key:str, context:str):
    """
    短期貸付金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ShortTermLoansReceivable',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def short_term_loans_receivable_to_subsidiaries_and_affiliates(session: Session, head_item_key:str, context:str):
    """
    関係会社短期貸付金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ShortTermLoansReceivableToSubsidiariesAndAffiliates',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def software(session: Session, head_item_key:str, context:str):
    """
    ソフトウエア
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_Software',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def software_in_progress(session: Session, head_item_key:str, context:str):
    """
    ソフトウエア仮勘定
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SoftwareInProgress',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def special_reserve_for_expansion_of_railway_transport_capacity_rwy(session: Session, head_item_key:str, context:str):
    """
    特定都市鉄道整備準備金、鉄道事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SpecialReserveForExpansionOfRailwayTransportCapacityRWY',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def special_retirement_expenses_el(session: Session, head_item_key:str, context:str):
    """
    特別退職金、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SpecialRetirementExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def state_subsidy_ei(session: Session, head_item_key:str, context:str):
    """
    国庫補助金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_StateSubsidyEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def stationery_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    事務用品費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_StationeryExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def stevedoring_income_rev_oa(session: Session, head_item_key:str, context:str):
    """
    倉庫荷役料、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_StevedoringIncomeRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def stock_issuance_cost_da(session: Session, head_item_key:str, context:str):
    """
    株式交付費、繰延資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_StockIssuanceCostDA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def stock_issuance_cost_noe(session: Session, head_item_key:str, context:str):
    """
    株式交付費、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_StockIssuanceCostNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def stock_issuance_cost_ope_cf(session: Session, head_item_key:str, context:str):
    """
    株式交付費、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_StockIssuanceCostOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def stock_issuance_cost_prior_noe(session: Session, head_item_key:str, context:str):
    """
    新株発行費、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_StockIssuanceCostPriorNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def stocks_of_subsidiaries_and_affiliates(session: Session, head_item_key:str, context:str):
    """
    関係会社株式
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_StocksOfSubsidiariesAndAffiliates',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def structures(session: Session, head_item_key:str, context:str):
    """
    構築物
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_Structures',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def structures_net(session: Session, head_item_key:str, context:str):
    """
    構築物（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_StructuresNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subscription_rights_to_shares(session: Session, head_item_key:str, context:str):
    """
    新株予約権
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SubscriptionRightsToShares',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subsidies_for_employment_adjustment_noi(session: Session, head_item_key:str, context:str):
    """
    雇用調整助成金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SubsidiesForEmploymentAdjustmentNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subsidies_for_employment_adjustment_ope_cf(session: Session, head_item_key:str, context:str):
    """
    雇用調整助成金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SubsidiesForEmploymentAdjustmentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subsidies_received_inv_cf(session: Session, head_item_key:str, context:str):
    """
    補助金の受取額、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SubsidiesReceivedInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subsidy_ei(session: Session, head_item_key:str, context:str):
    """
    補助金収入、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SubsidyEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subsidy_eirwy(session: Session, head_item_key:str, context:str):
    """
    補助金、特別利益、鉄道事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SubsidyEIRWY',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subsidy_income2_ei(session: Session, head_item_key:str, context:str):
    """
    助成金収入、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SubsidyIncome2EI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subsidy_income2_ope_cf(session: Session, head_item_key:str, context:str):
    """
    助成金収入、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SubsidyIncome2OpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subsidy_income_noi(session: Session, head_item_key:str, context:str):
    """
    補助金収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SubsidyIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subsidy_income_noi_bounty(session: Session, head_item_key:str, context:str):
    """
    助成金収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SubsidyIncomeNOIBounty',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subsidy_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    補助金収入、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SubsidyIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subtotal_ope_cf(session: Session, head_item_key:str, context:str):
    """
    小計、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SubtotalOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def supplies(session: Session, head_item_key:str, context:str):
    """
    貯蔵品
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_Supplies',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def supplies_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    消耗品費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SuppliesExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def surrender_value_of_insurance_ei(session: Session, head_item_key:str, context:str):
    """
    保険解約返戻金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SurrenderValueOfInsuranceEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def surrender_value_of_insurance_ope_cf(session: Session, head_item_key:str, context:str):
    """
    保険解約返戻金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SurrenderValueOfInsuranceOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def suspense_payments_assets_ins(session: Session, head_item_key:str, context:str):
    """
    仮払金、資産の部、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_SuspensePaymentsAssetsINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def taxes_and_dues_noe(session: Session, head_item_key:str, context:str):
    """
    租税公課、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TaxesAndDuesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def taxes_and_dues_sga(session: Session, head_item_key:str, context:str):
    """
    租税公課、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TaxesAndDuesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def technical_support_fee_noi(session: Session, head_item_key:str, context:str):
    """
    受取技術料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TechnicalSupportFeeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def telephone_subscription_right(session: Session, head_item_key:str, context:str):
    """
    電話加入権
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TelephoneSubscriptionRight',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def tools_furniture_and_fixtures(session: Session, head_item_key:str, context:str):
    """
    工具、器具及び備品
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ToolsFurnitureAndFixtures',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def tools_furniture_and_fixtures_net(session: Session, head_item_key:str, context:str):
    """
    工具、器具及び備品（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ToolsFurnitureAndFixturesNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def total_beginning_and_purchase_of_goods(session: Session, head_item_key:str, context:str):
    """
    合計、商品期首棚卸高及び当期商品仕入高
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TotalBeginningAndPurchaseOfGoods',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def total_beginning_finished_goods_and_cost_of_products_manufactured_for_the_period(session: Session, head_item_key:str, context:str):
    """
    合計、製品期首棚卸高及び当期製品製造原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TotalBeginningFinishedGoodsAndCostOfProductsManufacturedForThePeriod',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def total_changes_of_items_during_the_period(session: Session, head_item_key:str, context:str):
    """
    当期変動額合計
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TotalChangesOfItemsDuringThePeriod',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def total_of_net_cash_provided_by_used_in_investment_transactions_inv_cfins(session: Session, head_item_key:str, context:str):
    """
    資産運用活動計、投資活動によるキャッシュ・フロー、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TotalOfNetCashProvidedByUsedInInvestmentTransactionsInvCFINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def total_of_net_cash_provided_by_used_in_operating_activities_and_investment_transactions_inv_cfins(session: Session, head_item_key:str, context:str):
    """
    営業活動及び資産運用活動計、投資活動によるキャッシュ・フロー、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TotalOfNetCashProvidedByUsedInOperatingActivitiesAndInvestmentTransactionsInvCFINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trading_account_securities_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    商品有価証券、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TradingAccountSecuritiesAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trading_assets_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    特定取引資産、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TradingAssetsAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trading_expenses_oebnk(session: Session, head_item_key:str, context:str):
    """
    特定取引費用、経常費用、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TradingExpensesOEBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trading_income_oibnk(session: Session, head_item_key:str, context:str):
    """
    特定取引収益、経常収益、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TradingIncomeOIBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trading_liabilities_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    特定取引負債、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TradingLiabilitiesLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def transfer_from_reserve_for_financial_products_transaction_liabilities_eibnk(session: Session, head_item_key:str, context:str):
    """
    金融商品取引責任準備金取崩額、特別利益、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TransferFromReserveForFinancialProductsTransactionLiabilitiesEIBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def transfer_of_loss_on_disposal_of_treasury_stock(session: Session, head_item_key:str, context:str):
    """
    自己株式処分差損の振替
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TransferOfLossOnDisposalOfTreasuryStock',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def transfer_to_capital_surplus_from_retained_earnings(session: Session, head_item_key:str, context:str):
    """
    利益剰余金から資本剰余金への振替
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TransferToCapitalSurplusFromRetainedEarnings',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def transfer_to_other_account_cos(session: Session, head_item_key:str, context:str):
    """
    他勘定振替高、売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TransferToOtherAccountCOS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def transfer_to_reserve_for_financial_products_transaction_liabilities_elbnk(session: Session, head_item_key:str, context:str):
    """
    金融商品取引責任準備金繰入額、特別損失、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TransferToReserveForFinancialProductsTransactionLiabilitiesELBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def transportation_and_communication_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    旅費交通費及び通信費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TransportationAndCommunicationExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def transportation_and_warehousing_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    運送費及び保管費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TransportationAndWarehousingExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def transportation_income_rev_oa(session: Session, head_item_key:str, context:str):
    """
    運送収入、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TransportationIncomeRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def traveling_and_transportation_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    旅費及び交通費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TravelingAndTransportationExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def treasury_stock(session: Session, head_item_key:str, context:str):
    """
    自己株式
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TreasuryStock',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trees_ppe(session: Session, head_item_key:str, context:str):
    """
    立木、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TreesPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trust_fees_bnk(session: Session, head_item_key:str, context:str):
    """
    信託報酬、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_TrustFeesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def underwriting_expenses_oeins(session: Session, head_item_key:str, context:str):
    """
    保険引受費用、経常費用、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_UnderwritingExpensesOEINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def underwriting_income_oiins(session: Session, head_item_key:str, context:str):
    """
    保険引受収益、経常収益、保険業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_UnderwritingIncomeOIINS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def unearned_revenue(session: Session, head_item_key:str, context:str):
    """
    前受収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_UnearnedRevenue',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def utilities_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    水道光熱費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_UtilitiesExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def valuation_and_translation_adjustments(session: Session, head_item_key:str, context:str):
    """
    評価・換算差額等
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ValuationAndTranslationAdjustments',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def valuation_difference_on_available_for_sale_securities(session: Session, head_item_key:str, context:str):
    """
    その他有価証券評価差額金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ValuationDifferenceOnAvailableForSaleSecurities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def valuation_difference_on_available_for_sale_securities_before_tax_oci(session: Session, head_item_key:str, context:str):
    """
    その他有価証券評価差額金（税引前）、その他の包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ValuationDifferenceOnAvailableForSaleSecuritiesBeforeTaxOCI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def valuation_difference_on_available_for_sale_securities_net_of_tax_oci(session: Session, head_item_key:str, context:str):
    """
    その他有価証券評価差額金（税引後）、その他の包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_ValuationDifferenceOnAvailableForSaleSecuritiesNetOfTaxOCI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def vehicle_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    車両費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_VehicleExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def vehicles(session: Session, head_item_key:str, context:str):
    """
    車両運搬具
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_Vehicles',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def vehicles_net(session: Session, head_item_key:str, context:str):
    """
    車両運搬具（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_VehiclesNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def vessels(session: Session, head_item_key:str, context:str):
    """
    船舶
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_Vessels',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def vessels_net(session: Session, head_item_key:str, context:str):
    """
    船舶（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_VesselsNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def warehousing_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    保管費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_WarehousingExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def warehousing_fee_income_rev_oa(session: Session, head_item_key:str, context:str):
    """
    倉庫保管料、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_WarehousingFeeIncomeRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def welfare_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    福利厚生費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_WelfareExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def work_in_process(session: Session, head_item_key:str, context:str):
    """
    仕掛品
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'jppfs_cor_WorkInProcess',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def business_structure_improvement_payments_ope_cf(session: Session, head_item_key:str, context:str):
    """
    事業構造改善支出、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-29270_BusinessStructureImprovementPaymentsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def changes_in_equity_due_to_capital_transfer(session: Session, head_item_key:str, context:str):
    """
    資本移動に伴う持分の変動
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-29270_ChangesInEquityDueToCapitalTransfer',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loans_made_to_customers_inv_cf(session: Session, head_item_key:str, context:str):
    """
    貸付金による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-29270_LoansMadeToCustomersInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def losses_on_fire_disaster_el(session: Session, head_item_key:str, context:str):
    """
    火災損害等損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-29270_LossesOnFireDisasterEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_share_of_consolidated_subsidiaries_treasury_stock_changes_of_items_during_period(session: Session, head_item_key:str, context:str):
    """
    連結子会社の自己株式取得による持分の増減
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-29270_PurchaseOfShareOfConsolidatedSubsidiariesTreasuryStockChangesOfItemsDuringPeriod',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def non_deductible_consumption_tax_noe(session: Session, head_item_key:str, context:str):
    """
    控除対象外消費税等、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-40710_NonDeductibleConsumptionTaxNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_goodwill_el(session: Session, head_item_key:str, context:str):
    """
    のれん償却額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-43200_AmortizationOfGoodwillEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_goodwill_segment_information(session: Session, head_item_key:str, context:str):
    """
    のれんの償却額、セグメント情報
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-43200_AmortizationOfGoodwillSegmentInformation',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def depreciation_of_fixed_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有形固定資産減価償却費、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-43200_DepreciationOfFixedAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def depreciation_of_intangible_assets(session: Session, head_item_key:str, context:str):
    """
    無形固定資産減価償却費、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-43200_DepreciationOfIntangibleAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def issuance_of_new_shares_restricted_stock(session: Session, head_item_key:str, context:str):
    """
    新株の発行（譲渡制限付株式報酬）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-43200_IssuanceOfNewSharesRestrictedStock',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_and_guarantee_deposits_ioa(session: Session, head_item_key:str, context:str):
    """
    差入敷金保証金、投資その他の資産、固定資産、資産の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-43200_LeaseAndGuaranteeDepositsIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_share_of_profits_on_investments_in_partnership(session: Session, head_item_key:str, context:str):
    """
    投資事業組合分配金収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-43200_ProceedsFromShareOfProfitsOnInvestmentsInPartnership',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_disposal_of_treasury_stock(session: Session, head_item_key:str, context:str):
    """
    自己株式処分差益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-47690_GainOnDisposalOfTreasuryStock',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def head_office_relocation_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    本社移転費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-47690_HeadOfficeRelocationExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_surrender_value_of_insurance_policies_ope_cf(session: Session, head_item_key:str, context:str):
    """
    保険解約返戻金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-47690_ProceedsFromSurrenderValueOfInsurancePoliciesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_withdrawal_of_investments_in_securities_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投資有価証券の払戻による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-47690_ProceedsFromWithdrawalOfInvestmentsInSecuritiesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def retirement_benefit_liability_cl(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る負債、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-47690_RetirementBenefitLiabilityCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_for_damage_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取損害賠償金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-49280_CompensationForDamageIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_account_payable_transition_of_retirement_benefit_plan_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付制度移行に伴う未払金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-49280_IncreaseDecreaseInAccountPayableTransitionOfRetirementBenefitPlanOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_net_defined_benefit_asset_and_liability_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る資産負債の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-49280_IncreaseDecreaseInNetDefinedBenefitAssetAndLiabilityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_surrender_value_of_insurance_ope_cf(session: Session, head_item_key:str, context:str):
    """
    保険解約返戻金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-49280_ProceedsFromSurrenderValueOfInsuranceOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def customer_relationship_ia(session: Session, head_item_key:str, context:str):
    """
    顧客関連資産、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-49580_CustomerRelationshipIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_related_to_rebuilding_el(session: Session, head_item_key:str, context:str):
    """
    建替関連損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-49580_LossOnRelatedToRebuildingEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_related_to_rebuilding_ope_cf(session: Session, head_item_key:str, context:str):
    """
    建替関連損失、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-49580_LossOnRelatedToRebuildingOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_removal_cost_cl(session: Session, head_item_key:str, context:str):
    """
    撤去費用引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-49580_ProvisionForRemovalCostCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def surrender_value_of_insurance_policies_ope_cf(session: Session, head_item_key:str, context:str):
    """
    保険解約返戻金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-50360_SurrenderValueOfInsurancePoliciesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def collection_of_loans_receivable_from_subsidiaries_and_affiliates_inv_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社貸付金の回収による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-60460_CollectionOfLoansReceivableFromSubsidiariesAndAffiliatesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_for_damage_noe(session: Session, head_item_key:str, context:str):
    """
    損害賠償金、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-60460_CompensationForDamageNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def restricted_stock(session: Session, head_item_key:str, context:str):
    """
    譲渡制限付株式報酬
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-60460_RestrictedStock',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_development_of_system_el(session: Session, head_item_key:str, context:str):
    """
    システム開発に伴う損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-62770_LossOnDevelopmentOfSystemEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_development_of_system_ope_cf(session: Session, head_item_key:str, context:str):
    """
    システム開発に伴う損失、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-62770_LossOnDevelopmentOfSystemOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def nondeductible_consumption_tax_noe(session: Session, head_item_key:str, context:str):
    """
    控除対象外消費税等、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-62770_NondeductibleConsumptionTaxNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_penalty_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    違約金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-62770_ProceedsFromPenaltyIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_right_of_use_assets_ppe(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、使用権資産、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-69650_AccumulatedDepreciationRightOfUseAssetsPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def dividends_from_surplus_interim_dividends(session: Session, head_item_key:str, context:str):
    """
    剰余金の配当（中間配当）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-69650_DividendsFromSurplusInterimDividends',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_of_compensation_ei(session: Session, head_item_key:str, context:str):
    """
    受取賠償金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-69650_IncomeOfCompensationEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def right_of_use_assets_ppe(session: Session, head_item_key:str, context:str):
    """
    使用権資産、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-69650_RightOfUseAssetsPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def disposal_of_treasury_shares_by_stock_payment_trust(session: Session, head_item_key:str, context:str):
    """
    株式給付信託による自己株式の処分
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-76040_DisposalOfTreasurySharesByStockPaymentTrust',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_provision_for_loss_on_store_closing_ope_cf(session: Session, head_item_key:str, context:str):
    """
    閉店損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-76040_IncreaseDecreaseProvisionForLossOnStoreClosingOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_store_closure_cl(session: Session, head_item_key:str, context:str):
    """
    閉店損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-76040_ProvisionForLossOnStoreClosureCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def stock_related_cost_noe(session: Session, head_item_key:str, context:str):
    """
    株式関連費、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-76040_StockRelatedCostNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_for_damage_ope_cf(session: Session, head_item_key:str, context:str):
    """
    損害賠償金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-91700_CompensationForDamageOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_received_noi(session: Session, head_item_key:str, context:str):
    """
    補償金収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-91700_CompensationReceivedNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_due_to_share_issuance(session: Session, head_item_key:str, context:str):
    """
    株式交付による増加
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-91700_IncreaseDueToShareIssuance',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_in_cash_and_cash_equivalents_due_to_share_issuance(session: Session, head_item_key:str, context:str):
    """
    株式交付に伴う現金及び現金同等物の増加額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-91700_IncreaseInCashAndCashEquivalentsDueToShareIssuance',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_received_noi(session: Session, head_item_key:str, context:str):
    """
    保険金収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-91700_InsuranceReceivedNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_accident_el(session: Session, head_item_key:str, context:str):
    """
    事故関連損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-91700_LossOnAccidentEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_accident_ope_cf(session: Session, head_item_key:str, context:str):
    """
    事故関連損失、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-91700_LossOnAccidentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_accident_payments_ope_cf(session: Session, head_item_key:str, context:str):
    """
    事故関連損失の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-91700_LossOnAccidentPaymentsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def plant_office_rebuilding_expenses_el(session: Session, head_item_key:str, context:str):
    """
    事業所建替関連費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-91700_PlantOfficeRebuildingExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def plant_office_rebuilding_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    事業所建替関連費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-91700_PlantOfficeRebuildingExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_customer_relationship_ope_cf(session: Session, head_item_key:str, context:str):
    """
    顧客関連資産償却額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-95620_AmortizationOfCustomerRelationshipOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_lease_deposits_ope_cf(session: Session, head_item_key:str, context:str):
    """
    敷金償却、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-95620_AmortizationOfLeaseDepositsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def customer_related_asset_amortization_expense(session: Session, head_item_key:str, context:str):
    """
    顧客関連資産償却額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-95620_CustomerRelatedAssetAmortizationExpense',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_other_current_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他流動資産の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-95620_IncreaseDecreaseInOtherCurrentAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_due_to_insurance_contract_change_noe(session: Session, head_item_key:str, context:str):
    """
    保険契約変更による損失、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-95620_LossDueToInsuranceContractChangeNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_due_to_insurance_contract_change_ope_cf(session: Session, head_item_key:str, context:str):
    """
    保険契約変更による損失、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-95620_LossDueToInsuranceContractChangeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def refunds_due_to_changes_in_insurance_contract_inv_cf(session: Session, head_item_key:str, context:str):
    """
    保険契約変更による返戻額、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-95620_RefundsDueToChangesInInsuranceContractInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def refunds_due_to_changes_in_insurance_contract_noi(session: Session, head_item_key:str, context:str):
    """
    保険契約変更による返戻金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-95620_RefundsDueToChangesInInsuranceContractNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def refunds_due_to_changes_in_insurance_contract_ope_cf(session: Session, head_item_key:str, context:str):
    """
    保険契約変更による返戻金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-95620_RefundsDueToChangesInInsuranceContractOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def transfer_cost_from_sales_of_assets_for_rent_ope_cf(session: Session, head_item_key:str, context:str):
    """
    賃貸資産の売却による原価振替高、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-96990_TransferCostFromSalesOfAssetsForRentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def allowance_for_investment_evaluation_ioa(session: Session, head_item_key:str, context:str):
    """
    投資評価引当金、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-98690_AllowanceForInvestmentEvaluationIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def allowance_for_investment_loss_ncl(session: Session, head_item_key:str, context:str):
    """
    投資損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-98690_AllowanceForInvestmentLossNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def impairment_losses_segment_information(session: Session, head_item_key:str, context:str):
    """
    減損損失、セグメント情報
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-98690_ImpairmentLossesSegmentInformation',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def information_system_cost_sga(session: Session, head_item_key:str, context:str):
    """
    情報システム費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-98690_InformationSystemCostSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_allowance_for_investment_evaluation_el(session: Session, head_item_key:str, context:str):
    """
    投資評価引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-acedjpfr-98690_ProvisionOfAllowanceForInvestmentEvaluationEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def collection_of_lease_receivables_inv_cf(session: Session, head_item_key:str, context:str):
    """
    リース債権の回収による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-anedjpfr-29260_CollectionOfLeaseReceivablesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_collection_of_long_term_accounts_receivable_other_inv_cf_inv_cf(session: Session, head_item_key:str, context:str):
    """
    長期未収入金の回収による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-anedjpfr-29260_ProceedsFromCollectionOfLongTermAccountsReceivableOtherInvCFInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_new_banknote_support_el(session: Session, head_item_key:str, context:str):
    """
    新紙幣対応費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-anedjpfr-48090_CostOfNewBanknoteSupportEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def treasury_stock_payment_of_stock_ownership_plan_trust_changes_of_items_during_period(session: Session, head_item_key:str, context:str):
    """
    株式給付信託による自己株式の交付、当期変動額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-anedjpfr-48090_TreasuryStockPaymentOfStockOwnershipPlanTrustChangesOfItemsDuringPeriod',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_long_term_unearned_revenue_ope_cf(session: Session, head_item_key:str, context:str):
    """
    長期前受収益の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-anedjpfr-73860_IncreaseDecreaseInLongTermUnearnedRevenueOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_expenses_of_real_estate_for_investment_noe(session: Session, head_item_key:str, context:str):
    """
    投資不動産賃貸費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-anedjpfr-73860_RentExpensesOfRealEstateForInvestmentNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_coupon_ope_cf(session: Session, head_item_key:str, context:str):
    """
    クーポン引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-anedjpfr-77920_IncreaseDecreaseInProvisionForCouponOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_coupon_certificates_cl(session: Session, head_item_key:str, context:str):
    """
    クーポン引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-anedjpfr-77920_ProvisionForCouponCertificatesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def settlement_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取和解金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-anedjpfr-77920_SettlementIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def customer_related_assets_ia(session: Session, head_item_key:str, context:str):
    """
    顧客関連資産、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-14350_CustomerRelatedAssetsIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def advances_received_on_uncompleted_construction_contracts_and_others_cns(session: Session, head_item_key:str, context:str):
    """
    未成工事受入金等、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-18990_AdvancesReceivedOnUncompletedConstructionContractsAndOthersCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def prepayment_guarantee_fee_noe(session: Session, head_item_key:str, context:str):
    """
    前払金保証料、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-18990_PrepaymentGuaranteeFeeNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_forgiveness_of_debts_noi(session: Session, head_item_key:str, context:str):
    """
    債務免除益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-24610_GainOnForgivenessOfDebtsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cancellation_penalty_of_rent_agreement(session: Session, head_item_key:str, context:str):
    """
    賃貸借契約解約違約金、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-27020_CancellationPenaltyOfRentAgreement',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_portion_of_account_receivable_longterm(session: Session, head_item_key:str, context:str):
    """
    1年内回収予定の長期繰延営業債権
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-27020_CurrentPortionOfAccountReceivableLongterm',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_taxes_income_taxes(session: Session, head_item_key:str, context:str):
    """
    法人税等、法人税等
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-27020_IncomeTaxesIncomeTaxes',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_deferred_accounts_receivable(session: Session, head_item_key:str, context:str):
    """
    長期繰延営業債権
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-27020_LongTermDeferredAccountsReceivable',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_retirement_of_noncurrent_assets_at_company_operated_restaurants_noe(session: Session, head_item_key:str, context:str):
    """
    店舗用固定資産除却損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-27020_LossOnRetirementOfNoncurrentAssetsAtCompanyOperatedRestaurantsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_bonuses_non_current_ncl(session: Session, head_item_key:str, context:str):
    """
    賞与引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-27020_ProvisionForBonusesNonCurrentNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_directors_bonuses_ncl(session: Session, head_item_key:str, context:str):
    """
    役員賞与引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-27020_ProvisionForDirectorsBonusesNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_loss_on_disposal_of_inventories_cl(session: Session, head_item_key:str, context:str):
    """
    棚卸資産処分損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-27020_ReserveForLossOnDisposalOfInventoriesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_account_receivable_ioa(session: Session, head_item_key:str, context:str):
    """
    長期営業債権、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-27880_LongTermAccountReceivableIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def stay_credit_ioa(session: Session, head_item_key:str, context:str):
    """
    長期滞留債権、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-27880_StayCreditIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def theft_loss_el(session: Session, head_item_key:str, context:str):
    """
    盗難損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-27880_TheftLossEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cryptocurrency_valuation_loss_noe(session: Session, head_item_key:str, context:str):
    """
    暗号資産評価損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-30820_CryptocurrencyValuationLossNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_guarantees_noe(session: Session, head_item_key:str, context:str):
    """
    債務保証損失引当金繰入額、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-31540_ProvisionForLossOnGuaranteesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_from_completed_construction_contracts_and_contract_assets_cns(session: Session, head_item_key:str, context:str):
    """
    完成工事未収入金及び契約資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-32610_AccountsReceivableFromCompletedConstructionContractsAndContractAssetsCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def consumption_taxes_for_prior_periods_ei(session: Session, head_item_key:str, context:str):
    """
    過年度消費税等、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-32610_ConsumptionTaxesForPriorPeriodsEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_lease_contracts_cl(session: Session, head_item_key:str, context:str):
    """
    賃借契約損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-32710_ProvisionForLossOnLeaseContractsCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_lease_contracts_ncl(session: Session, head_item_key:str, context:str):
    """
    賃借契約損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-32710_ProvisionForLossOnLeaseContractsNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def adjustment_of_hyperinflation_cce(session: Session, head_item_key:str, context:str):
    """
    超インフレの調整額、現金及び現金同等物
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-33550_AdjustmentOfHyperinflationCCE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_the_net_monetary_position_noe(session: Session, head_item_key:str, context:str):
    """
    正味貨幣持高に関する損失、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-33550_LossOnTheNetMonetaryPositionNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_the_net_monetary_position_ope_cf(session: Session, head_item_key:str, context:str):
    """
    正味貨幣持高に関する損失、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-33550_LossOnTheNetMonetaryPositionOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_advance_payments_ioa(session: Session, head_item_key:str, context:str):
    """
    長期前渡金、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-34360_LongTermAdvancePaymentsIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deposits_received_from_silent_partnership_ncl(session: Session, head_item_key:str, context:str):
    """
    匿名組合出資預り金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-34820_DepositsReceivedFromSilentPartnershipNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_portion_of_convertible_bond_type_bonds_with_share_acquisition_rights_cl(session: Session, head_item_key:str, context:str):
    """
    1年内償還予定の転換社債型新株予約権付社債、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-36600_CurrentPortionOfConvertibleBondTypeBondsWithShareAcquisitionRightsCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def idle_asset_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    遊休資産諸費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-36600_IdleAssetExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_patent_right_noe(session: Session, head_item_key:str, context:str):
    """
    特許権償却、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-36630_AmortizationOfPatentRightNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_transfer_of_stocks_of_subsidiaries_and_affiliates_el(session: Session, head_item_key:str, context:str):
    """
    関係会社株式譲渡損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-36630_LossOnTransferOfStocksOfSubsidiariesAndAffiliatesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_software_el(session: Session, head_item_key:str, context:str):
    """
    ソフトウエア評価損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-36630_LossOnValuationOfSoftwareEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_the_reserve_for_capital_loss_of_related_companies_el(session: Session, head_item_key:str, context:str):
    """
    関係会社株式譲渡損失引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-36630_ProvisionOfTheReserveForCapitalLossOfRelatedCompaniesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_head_office_relocation_expenses_cl(session: Session, head_item_key:str, context:str):
    """
    本社移転費用引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-36960_ProvisionForHeadOfficeRelocationExpensesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_expenses_el(session: Session, head_item_key:str, context:str):
    """
    支払経済補償金、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-39470_CompensationExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_trade_and_contract_assets_ca(session: Session, head_item_key:str, context:str):
    """
    売掛金及び契約資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-39980_AccountsReceivableTradeAndContractAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def adjustment_of_payment_noe(session: Session, head_item_key:str, context:str):
    """
    支払精算金、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-39980_AdjustmentOfPaymentNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def transfer_restrictions_stocks_belonging_to_expenditure_related_noe(session: Session, head_item_key:str, context:str):
    """
    譲渡制限付株式関連費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-41710_TransferRestrictionsStocksBelongingToExpenditureRelatedNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def consumption_tax_difference_noi(session: Session, head_item_key:str, context:str):
    """
    消費税差額、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-43510_ConsumptionTaxDifferenceNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_real_estate_rental_income_noe(session: Session, head_item_key:str, context:str):
    """
    家賃原価、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-43510_CostOfRealEstateRentalIncomeNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def guarantee_deposited(session: Session, head_item_key:str, context:str):
    """
    預り保証金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-43510_GuaranteeDeposited',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_from_investment_partnerships_noe(session: Session, head_item_key:str, context:str):
    """
    投資事業組合損失、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-43510_LossFromInvestmentPartnershipsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def real_estate_rental_income_noi(session: Session, head_item_key:str, context:str):
    """
    家賃収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-43510_RealEstateRentalIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def security_and_lease_deposits_paid_ioa(session: Session, head_item_key:str, context:str):
    """
    差入保証金・敷金、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-43510_SecurityAndLeaseDepositsPaidIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_from_point_cord_noi(session: Session, head_item_key:str, context:str):
    """
    ポイント収入額、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-44480_IncomeFromPointCordNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def business_expenses(session: Session, head_item_key:str, context:str):
    """
    事業費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-45630_BusinessExpenses',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def business_revenues(session: Session, head_item_key:str, context:str):
    """
    事業収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-45630_BusinessRevenues',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def business_structural_reform_expenses_el(session: Session, head_item_key:str, context:str):
    """
    事業構造改革費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-45630_BusinessStructuralReformExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_business_restructuring_cl(session: Session, head_item_key:str, context:str):
    """
    事業構造改革引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-45630_ProvisionForBusinessRestructuringCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def research_and_development_revenues_rev_oa(session: Session, head_item_key:str, context:str):
    """
    研究開発事業収益、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-45630_ResearchAndDevelopmentRevenuesRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def right_of_use_asset_ppe(session: Session, head_item_key:str, context:str):
    """
    使用権資産、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-45630_RightOfUseAssetPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def plant_shutsdown_related_costs_noe(session: Session, head_item_key:str, context:str):
    """
    操業停止関連費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-45740_PlantShutsdownRelatedCostsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_subleases_cl(session: Session, head_item_key:str, context:str):
    """
    転貸損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-45740_ProvisionForLossOnSubleasesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_subleases_ncl(session: Session, head_item_key:str, context:str):
    """
    転貸損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-45740_ProvisionForLossOnSubleasesNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def refund_liabilities_cl(session: Session, head_item_key:str, context:str):
    """
    返金負債、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-45740_RefundLiabilitiesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def restoration_contribution_income_noi(session: Session, head_item_key:str, context:str):
    """
    原状回復負担金等収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-45740_RestorationContributionIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def non_operating_commission_fee_noe(session: Session, head_item_key:str, context:str):
    """
    営業外支払手数料、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-45860_NonOperatingCommissionFeeNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revenue_from_research_and_development_rev_oa(session: Session, head_item_key:str, context:str):
    """
    研究開発等収入、売上高
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-45860_RevenueFromResearchAndDevelopmentRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_net_monetary_position_noi(session: Session, head_item_key:str, context:str):
    """
    正味貨幣持高に係る利得、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-46340_GainOnNetMonetaryPositionNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_net_monetary_position_noe(session: Session, head_item_key:str, context:str):
    """
    正味貨幣持高に係る損失、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-46340_LossOnNetMonetaryPositionNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revenue_advertising_noi(session: Session, head_item_key:str, context:str):
    """
    広告収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-48480_RevenueAdvertisingNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def a_recall_related_loss_el(session: Session, head_item_key:str, context:str):
    """
    製品回収関連損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-49670_ARecallRelatedLossEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_losses_related_to_product_recall_cl(session: Session, head_item_key:str, context:str):
    """
    製品回収関連損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-49670_ReserveForLossesRelatedToProductRecallCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def customer_relation_assets(session: Session, head_item_key:str, context:str):
    """
    顧客関係資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-49790_CustomerRelationAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_sales_return(session: Session, head_item_key:str, context:str):
    """
    損害賠償引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-49790_ProvisionForSalesReturn',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def refund_liability(session: Session, head_item_key:str, context:str):
    """
    返金負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-49790_RefundLiability',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def a_product_repair_reserve_fund_cl(session: Session, head_item_key:str, context:str):
    """
    製品改修引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-58160_AProductRepairReserveFundCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def legal_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    支払報酬、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-58670_LegalExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_extinguishment_share_based_compensation_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    株式報酬費用消滅損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-58670_LossOnExtinguishmentShareBasedCompensationExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def refunds_on_prior_periods_dividends_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取返還金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-58670_RefundsOnPriorPeriodsDividendsIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_for_absence_from_work_to_employee(session: Session, head_item_key:str, context:str):
    """
    従業員休業補償損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-59500_CompensationForAbsenceFromWorkToEmployee',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_revenue_segment(session: Session, head_item_key:str, context:str):
    """
    その他の収益、セグメント
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-60710_OtherRevenueSegment',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revenue_from_contracts_with_customers_segment(session: Session, head_item_key:str, context:str):
    """
    顧客との契約から生じる収益、セグメント
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-60710_RevenueFromContractsWithCustomersSegment',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def sales_compensation_noi(session: Session, head_item_key:str, context:str):
    """
    営業補償金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-60710_SalesCompensationNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def services_at_transferred_at_a_point_in_time(session: Session, head_item_key:str, context:str):
    """
    一時点で移転されるサービス
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-60710_ServicesAtTransferredAtAPointInTime',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def services_transferred_over_time(session: Session, head_item_key:str, context:str):
    """
    一定の期間にわたり移転されるサービス
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-60710_ServicesTransferredOverTime',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def special_survey_costs_etc_el(session: Session, head_item_key:str, context:str):
    """
    特別調査費用等、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-60710_SpecialSurveyCostsEtcEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_electricity_sales_noe(session: Session, head_item_key:str, context:str):
    """
    売電原価、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-61710_CostOfElectricitySalesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rental_income_from_employees_buildings_noi(session: Session, head_item_key:str, context:str):
    """
    従業員受取家賃、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-63270_RentalIncomeFromEmployeesBuildingsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def burden_charge_for_development_noi(session: Session, head_item_key:str, context:str):
    """
    開発負担金収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-63400_BurdenChargeForDevelopmentNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def land_use_rights_ia(session: Session, head_item_key:str, context:str):
    """
    土地使用権、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-64110_LandUseRightsIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_cancellation_of_membership_el(session: Session, head_item_key:str, context:str):
    """
    会員権解約損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-64110_LossOnCancellationOfMembershipEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def post_retirement_benefits_payable_for_directors_ncl(session: Session, head_item_key:str, context:str):
    """
    役員退職慰労未払金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-64110_PostRetirementBenefitsPayableForDirectorsNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_money_held_in_trust_for_purchase_of_treasury_stock_fin_cf(session: Session, head_item_key:str, context:str):
    """
    自己株式取得のための金銭の信託の増減額（△は増加）、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-64980_DecreaseIncreaseInMoneyHeldInTrustForPurchaseOfTreasuryStockFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_trade_receivables_and_contract_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    売上債権及び契約資産の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-64980_DecreaseIncreaseInTradeReceivablesAndContractAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_income_noib(session: Session, head_item_key:str, context:str):
    """
    保険収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-64980_InsuranceIncomeNOIB',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_retirement_of_intangible_assets_el(session: Session, head_item_key:str, context:str):
    """
    無形固定資産除却損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-64980_LossOnRetirementOfIntangibleAssetsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_and_retirement_of_property_plant_and_equipment_el(session: Session, head_item_key:str, context:str):
    """
    有形固定資産除売却損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-64980_LossOnSalesAndRetirementOfPropertyPlantAndEquipmentEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def factory_transfer_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    工場移転費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-65240_FactoryTransferExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_payment_el(session: Session, head_item_key:str, context:str):
    """
    支払補償金、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-69290_CompensationPaymentEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_deposit_paid_for_repurchase_of_treasury_stock_fin_cf(session: Session, head_item_key:str, context:str):
    """
    自己株式取得のための預け金の増減額（△は増加）、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-69290_DecreaseIncreaseInDepositPaidForRepurchaseOfTreasuryStockFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def leasehold_right_ncl(session: Session, head_item_key:str, context:str):
    """
    土地使用権、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-69290_LeaseholdRightNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_trial_pieces_noi(session: Session, head_item_key:str, context:str):
    """
    試作品等売却代、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-72280_GainOnSalesOfTrialPiecesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def borrowing_fee_noe(session: Session, head_item_key:str, context:str):
    """
    借入手数料、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-73590_BorrowingFeeNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def expenses_for_purchases_of_goods_noe(session: Session, head_item_key:str, context:str):
    """
    物品購入費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-76130_ExpensesForPurchasesOfGoodsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_goods_noi(session: Session, head_item_key:str, context:str):
    """
    物品売却収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-76130_ProceedsFromSalesOfGoodsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_expenses_on_real_estate_for_investments_noe(session: Session, head_item_key:str, context:str):
    """
    投資不動産賃貸費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-78410_RentExpensesOnRealEstateForInvestmentsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_overseas_business_noi(session: Session, head_item_key:str, context:str):
    """
    海外事業関連損失、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-79360_LossOnOverseasBusinessNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_profit_structure_improvement_in_japan_el(session: Session, head_item_key:str, context:str):
    """
    国内収益構造改善損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-79360_LossOnProfitStructureImprovementInJapanEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_profit_structure_improvement_in_overseas_el(session: Session, head_item_key:str, context:str):
    """
    海外収益構造改善損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-79360_LossOnProfitStructureImprovementInOverseasEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def relocation_related_losses_el(session: Session, head_item_key:str, context:str):
    """
    移転関連損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-79360_RelocationRelatedLossesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def right_of_use_assets_ia(session: Session, head_item_key:str, context:str):
    """
    使用権資産、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-79360_RightOfUseAssetsIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_management_board_incentive_plan_trust(session: Session, head_item_key:str, context:str):
    """
    役員株式給付引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-79630_ProvisionForManagementBoardIncentivePlanTrust',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_stocks_payment(session: Session, head_item_key:str, context:str):
    """
    株式給付引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-79630_ProvisionForStocksPayment',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def contract_loss_allowance_ncl(session: Session, head_item_key:str, context:str):
    """
    契約損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-82020_ContractLossAllowanceNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def contract_loss_el(session: Session, head_item_key:str, context:str):
    """
    契約損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-82020_ContractLossEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_allowance_for_contract_loss_ei(session: Session, head_item_key:str, context:str):
    """
    契約損失引当金戻入額、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-82020_GainOnReversalOfAllowanceForContractLossEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_contract_cl(session: Session, head_item_key:str, context:str):
    """
    契約損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-82020_ProvisionForLossOnContractCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_allowance_for_contract_loss_el(session: Session, head_item_key:str, context:str):
    """
    契約損失引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-82020_ProvisionOfAllowanceForContractLossEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rents_noe(session: Session, head_item_key:str, context:str):
    """
    地代家賃、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-82020_RentsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_amortization_of_deposits_received_noi(session: Session, head_item_key:str, context:str):
    """
    預り金償却益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-88480_GainOnAmortizationOfDepositsReceivedNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_guarantees_for_rent_cl(session: Session, head_item_key:str, context:str):
    """
    保証履行引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-88480_ProvisionForLossOnGuaranteesForRentCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_related_to_repair_work_cl(session: Session, head_item_key:str, context:str):
    """
    補修工事関連損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-88480_ProvisionForLossOnRelatedToRepairWorkCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_related_to_repair_work_ncl(session: Session, head_item_key:str, context:str):
    """
    補修工事関連損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-88480_ProvisionForLossOnRelatedToRepairWorkNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_vacancies_ncl(session: Session, head_item_key:str, context:str):
    """
    空室損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-88480_ProvisionForLossOnVacanciesNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_provision_for_loss_on_related_to_repair_work_ei(session: Session, head_item_key:str, context:str):
    """
    補修工事関連損失引当金戻入額、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-88480_ReversalOfProvisionForLossOnRelatedToRepairWorkEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_income_arose_from_disaster_ei(session: Session, head_item_key:str, context:str):
    """
    災害に伴う受取保険金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-93610_InsuranceIncomeAroseFromDisasterEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trade_and_contract_assets_ca(session: Session, head_item_key:str, context:str):
    """
    売掛金及び契約資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-94210_TradeAndContractAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def buildings_and_accompanying_facilities_in_trust_net_ppe(session: Session, head_item_key:str, context:str):
    """
    信託建物附属設備（純額）、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-96720_BuildingsAndAccompanyingFacilitiesInTrustNetPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def buildings_in_trust_net_ppe(session: Session, head_item_key:str, context:str):
    """
    信託建物（純額）、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-96720_BuildingsInTrustNetPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def earthquake_resistant_construction_expense_el(session: Session, head_item_key:str, context:str):
    """
    耐震工事関連費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-96720_EarthquakeResistantConstructionExpenseEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def land_in_trust_ppe(session: Session, head_item_key:str, context:str):
    """
    信託土地、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-96720_LandInTrustPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_advance_paid_ioa(session: Session, head_item_key:str, context:str):
    """
    長期立替金、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-96720_LongTermAdvancePaidIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def profit_related_to_employment_adjustment_subsides_etc_noi(session: Session, head_item_key:str, context:str):
    """
    雇用調整助成金等、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-96720_ProfitRelatedToEmploymentAdjustmentSubsidesEtcNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trade_notes_and_accounts_receivable_trade_and_contract_assets_ca(session: Session, head_item_key:str, context:str):
    """
    受取手形、営業未収入金及び契約資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-96720_TradeNotesAndAccountsReceivableTradeAndContractAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_provision_for_loss_on_business_withdrawal_ei(session: Session, head_item_key:str, context:str):
    """
    事業撤退損失引当金戻入額、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-97220_GainOnReversalOfProvisionForLossOnBusinessWithdrawalEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_business_withdrawal_cl(session: Session, head_item_key:str, context:str):
    """
    事業撤退損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-97220_ProvisionForLossOnBusinessWithdrawalCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_business_withdrawal_el(session: Session, head_item_key:str, context:str):
    """
    事業撤退損失引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-97220_ProvisionForLossOnBusinessWithdrawalEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_noncurrent_assets_removal_cost_cl(session: Session, head_item_key:str, context:str):
    """
    固定資産撤去費用引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-97220_ProvisionForNoncurrentAssetsRemovalCostCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_removal_expenses_of_noncurrent_assets_el(session: Session, head_item_key:str, context:str):
    """
    固定資産撤去費用引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-97220_ProvisionForRemovalExpensesOfNoncurrentAssetsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def investment_partnership_management_fee_noe(session: Session, head_item_key:str, context:str):
    """
    投資事業組合管理費、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-97570_InvestmentPartnershipManagementFeeNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def claims_provable_in_bankruptcy_claims_provable_in_rehabilitation_and_other_ioa(session: Session, head_item_key:str, context:str):
    """
    破産債権等に準ずる債権、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qcedjpfr-99730_ClaimsProvableInBankruptcyClaimsProvableInRehabilitationAndOtherIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commission_income_noi(session: Session, head_item_key:str, context:str):
    """
    手数料収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-151A0_CommissionIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_for_damages_received_noi(session: Session, head_item_key:str, context:str):
    """
    受取損害賠償金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-22660_CompensationForDamagesReceivedNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def idle_assets_expense_noe(session: Session, head_item_key:str, context:str):
    """
    遊休資産費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-22660_IdleAssetsExpenseNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def material_profit_on_sale_noi(session: Session, head_item_key:str, context:str):
    """
    資材売却益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-22660_MaterialProfitOnSaleNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_building_demolition_expense_ncl(session: Session, head_item_key:str, context:str):
    """
    建物解体費用引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-22660_ProvisionForBuildingDemolitionExpenseNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_allowance_for_building_demolition_expense(session: Session, head_item_key:str, context:str):
    """
    建物解体費用引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-22660_ProvisionOfAllowanceForBuildingDemolitionExpense',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def supporting_expenses_for_subsidiaries_and_affiliates_noe(session: Session, head_item_key:str, context:str):
    """
    関係会社支援費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-22660_SupportingExpensesForSubsidiariesAndAffiliatesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def various_facilities_use_rights_ia(session: Session, head_item_key:str, context:str):
    """
    諸施設利用権、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-22660_VariousFacilitiesUseRightsIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cash_back_income_noi(session: Session, head_item_key:str, context:str):
    """
    キャッシュバック収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-248A0_CashBackIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def past_fiscal_years_consumption_tax_etc_noi(session: Session, head_item_key:str, context:str):
    """
    過年度消費税等、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-36670_PastFiscalYearsConsumptionTaxEtcNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def handicapped_employment_levy_noe(session: Session, head_item_key:str, context:str):
    """
    障害者雇用納付金、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-39480_HandicappedEmploymentLevyNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_anti_monopoly_act_el(session: Session, head_item_key:str, context:str):
    """
    独占禁止法関連損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-39480_LossOnAntiMonopolyActEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_profit_loss_operating_profit_loss(session: Session, head_item_key:str, context:str):
    """
    営業損失（△）、営業利益又は営業損失（△）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-40730_OperatingProfitLossOperatingProfitLoss',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def sales_commission_noi(session: Session, head_item_key:str, context:str):
    """
    販売手数料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-40730_SalesCommissionNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_restricted_stock_remuneration_noe(session: Session, head_item_key:str, context:str):
    """
    譲渡制限付株式報酬償却損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-42630_AmortizationOfRestrictedStockRemunerationNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def business_revenue(session: Session, head_item_key:str, context:str):
    """
    事業収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-42630_BusinessRevenue',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_business_revenue(session: Session, head_item_key:str, context:str):
    """
    事業原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-42630_CostOfBusinessRevenue',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lecture_s_fee_income_noi(session: Session, head_item_key:str, context:str):
    """
    講演料等収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-42630_LectureSFeeIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subsidy_income_etc_noi(session: Session, head_item_key:str, context:str):
    """
    助成金等収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-42630_SubsidyIncomeEtcNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def total_business_expenses(session: Session, head_item_key:str, context:str):
    """
    事業費用合計
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-42630_TotalBusinessExpenses',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trade_receivables_and_contract_asset_ca(session: Session, head_item_key:str, context:str):
    """
    売掛金及び契約資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-42630_TradeReceivablesAndContractAssetCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def transportation_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取運送料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-53800_TransportationIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_raw_materials_noi(session: Session, head_item_key:str, context:str):
    """
    原材料売却益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-55420_GainOnSalesOfRawMaterialsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_extinguishment_of_share_based_remuneration_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    株式報酬費用消滅損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-61560_LossOnExtinguishmentOfShareBasedRemunerationExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def sales_engineering_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    受注前活動費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-75000_SalesEngineeringExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def received_incentive_noi(session: Session, head_item_key:str, context:str):
    """
    受取報奨金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-93430_ReceivedIncentiveNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def goods_transfer_at_a_point_in_time(session: Session, head_item_key:str, context:str):
    """
    一時点で移転される財
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-98270_GoodsTransferAtAPointInTime',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def goods_transfer_over_time(session: Session, head_item_key:str, context:str):
    """
    一定の期間にわたり移転される財
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-qnedjpfr-98270_GoodsTransferOverTime',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def tender_offer_related_expenses_el(session: Session, head_item_key:str, context:str):
    """
    公開買付関連費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-14510_TenderOfferRelatedExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_deposits_paid_inv_cf(session: Session, head_item_key:str, context:str):
    """
    預け金の増減額（△は増加）、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-15180_DecreaseIncreaseInDepositsPaidInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_mine_closure_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    閉山損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-15180_IncreaseDecreaseInProvisionForMineClosureExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def product_compensation_loss_el(session: Session, head_item_key:str, context:str):
    """
    製品補償損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-15180_ProductCompensationLossEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def product_compensation_loss_ope_cf(session: Session, head_item_key:str, context:str):
    """
    製品補償損失、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-15180_ProductCompensationLossOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_mine_closure_expenses_ncl(session: Session, head_item_key:str, context:str):
    """
    閉山損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-15180_ProvisionForMineClosureExpensesNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def business_restructuring_expenses_el(session: Session, head_item_key:str, context:str):
    """
    事業構造改革費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-17210_BusinessRestructuringExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_for_damage_income_ei(session: Session, head_item_key:str, context:str):
    """
    受取損害賠償金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-17210_CompensationForDamageIncomeEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def e00322000_insurance_return_ei(session: Session, head_item_key:str, context:str):
    """
    保険返戻金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-17210_E00322000InsuranceReturnEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def unemployed_capital_cost_noe(session: Session, head_item_key:str, context:str):
    """
    遊休資産費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-17210_UnemployedCapitalCostNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def construction_guarantee_fee_noe(session: Session, head_item_key:str, context:str):
    """
    工事保証料、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-17260_ConstructionGuaranteeFeeNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_payable_for_construction_contracts_and_other_clcns(session: Session, head_item_key:str, context:str):
    """
    工事未払金等、流動負債、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-17680_AccountsPayableForConstructionContractsAndOtherCLCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_from_completed_construction_contracts_and_other_cns(session: Session, head_item_key:str, context:str):
    """
    完成工事未収入金等、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-17680_AccountsReceivableFromCompletedConstructionContractsAndOtherCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_transportation_business_cos(session: Session, head_item_key:str, context:str):
    """
    運輸事業売上原価、売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-17680_CostOfTransportationBusinessCOS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gross_profit_on_transportation_business_gp(session: Session, head_item_key:str, context:str):
    """
    運輸事業総利益、売上総利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-17680_GrossProfitOnTransportationBusinessGP',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_litigation_noe(session: Session, head_item_key:str, context:str):
    """
    訴訟損失引当金繰入額、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-17680_ProvisionForLossOnLitigationNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def sales_of_transportation_business_net_sales(session: Session, head_item_key:str, context:str):
    """
    運輸事業売上高、売上高
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-17680_SalesOfTransportationBusinessNetSales',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def contract_assets_ca(session: Session, head_item_key:str, context:str):
    """
    契約資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-18130_ContractAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def patent_enforcement_incom_noi(session: Session, head_item_key:str, context:str):
    """
    特許実施収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-18130_PatentEnforcementIncomNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayments_of_installment_payables_and_lease_obligations_fin_cf(session: Session, head_item_key:str, context:str):
    """
    割賦債務及びリース債務の返済による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-18130_RepaymentsOfInstallmentPayablesAndLeaseObligationsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def costs_on_real_estate_business_and_other_ca(session: Session, head_item_key:str, context:str):
    """
    不動産事業等支出金、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-18200_CostsOnRealEstateBusinessAndOtherCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_loss_on_real_estate_business_and_other_ope_cf(session: Session, head_item_key:str, context:str):
    """
    不動産事業等損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-18200_IncreaseDecreaseInProvisionForLossOnRealEstateBusinessAndOtherOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_support_to_subsidiaries_el(session: Session, head_item_key:str, context:str):
    """
    子会社支援損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-18200_LossOnSupportToSubsidiariesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_real_estate_business_and_other_cl(session: Session, head_item_key:str, context:str):
    """
    不動産事業等損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-18200_ProvisionForLossOnRealEstateBusinessAndOtherCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_net_defined_benefit_asset_or_liability_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る資産又は負債の増減額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-18480_IncreaseDecreaseInNetDefinedBenefitAssetOrLiabilityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_and_accounts_receivable_from_completed_construction_contracts_and_contract_assets_cns(session: Session, head_item_key:str, context:str):
    """
    受取手形、完成工事未収入金等及び契約資産、建設業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-18480_NotesAndAccountsReceivableFromCompletedConstructionContractsAndContractAssetsCNS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def financial_commission_noe(session: Session, head_item_key:str, context:str):
    """
    金融手数料、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-18820_FinancialCommissionNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def non_deducted_consumption_tax_noe(session: Session, head_item_key:str, context:str):
    """
    控除対象外消費税等、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-19050_NonDeductedConsumptionTaxNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_receivable_accounts_receivable_from_completed_construction_contracts_contract_assets_and_other(session: Session, head_item_key:str, context:str):
    """
    受取手形・完成工事未収入金及び契約資産等
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-19050_NotesReceivableAccountsReceivableFromCompletedConstructionContractsContractAssetsAndOther',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_compensation_for_damage_el(session: Session, head_item_key:str, context:str):
    """
    損害補償損失引当金繰入、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-19050_ProvisionForLossOnCompensationForDamageEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def license_income_noi(session: Session, head_item_key:str, context:str):
    """
    特許関連収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-19290_LicenseIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def animals(session: Session, head_item_key:str, context:str):
    """
    動物
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-20600_Animals',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commission_expenses_paid_fin_cf(session: Session, head_item_key:str, context:str):
    """
    支払手数料の支払額、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-20600_CommissionExpensesPaidFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def head_office_relocation_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    本社移転費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-20600_HeadOfficeRelocationExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_closing_of_factory_el(session: Session, head_item_key:str, context:str):
    """
    工場閉鎖損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-20600_LossOnClosingOfFactoryEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_head_office_relocation_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    本社移転費用の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-20600_PaymentsForHeadOfficeRelocationExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def stockpile_storage_revenue_noi(session: Session, head_item_key:str, context:str):
    """
    備蓄保管収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-20600_StockpileStorageRevenueNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_state_subsidy_inv_cf(session: Session, head_item_key:str, context:str):
    """
    国庫補助金等の受入による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-21080_ProceedsFromStateSubsidyInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayments_of_deposits_received_inv_cf(session: Session, head_item_key:str, context:str):
    """
    預り敷金の返還による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-21080_RepaymentsOfDepositsReceivedInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bounty_on_establishment_of_new_business_facilities_noi(session: Session, head_item_key:str, context:str):
    """
    企業立地奨励金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-22070_BountyOnEstablishmentOfNewBusinessFacilitiesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bounty_on_establishment_of_new_business_facilities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    企業立地奨励金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-22070_BountyOnEstablishmentOfNewBusinessFacilitiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bounty_on_establishment_of_new_business_facilities_received_ope_cf(session: Session, head_item_key:str, context:str):
    """
    企業立地奨励金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-22070_BountyOnEstablishmentOfNewBusinessFacilitiesReceivedOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_noncurrent_assets_removal_cost_ncl(session: Session, head_item_key:str, context:str):
    """
    固定資産撤去費用引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-22070_ProvisionForNoncurrentAssetsRemovalCostNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def removal_loss_of_property_plant_and_equipment_inv_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産撤去に伴う支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-22070_RemovalLossOfPropertyPlantAndEquipmentInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_income_received_ope_cf(session: Session, head_item_key:str, context:str):
    """
    受取補償金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-22090_CompensationIncomeReceivedOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_officers_retirement_benefits_ope_cf(session: Session, head_item_key:str, context:str):
    """
    執行役員退職慰労引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-22090_IncreaseDecreaseInProvisionForOfficersRetirementBenefitsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_officer_retirement_benefits(session: Session, head_item_key:str, context:str):
    """
    執行役員退職慰労引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-22090_ProvisionForOfficerRetirementBenefits',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def disbursement_to_the_hikari_foundation_el(session: Session, head_item_key:str, context:str):
    """
    公益財団法人ひかり協会負担金、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-22640_DisbursementToTheHIKARIFoundationEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_related_to_rebuilding_el(session: Session, head_item_key:str, context:str):
    """
    建替関連損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-22640_LossRelatedToRebuildingEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def costs_related_to_voluntary_recovery_of_product_el(session: Session, head_item_key:str, context:str):
    """
    製品自主回収関連費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-22880_CostsRelatedToVoluntaryRecoveryOfProductEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_restructual_reforms_cl(session: Session, head_item_key:str, context:str):
    """
    構造改革引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-22880_ProvisionForRestructualReformsCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def restructuring_expenses_el(session: Session, head_item_key:str, context:str):
    """
    構造改革費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-22880_RestructuringExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def restructuring_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    構造改革費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-22880_RestructuringExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decreae_increase_in_deffered_consumer_tax_ope_cf(session: Session, head_item_key:str, context:str):
    """
    繰延消費税等の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-23290_DecreaeIncreaseInDefferedConsumerTaxOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def expenses_related_to_the_proposed_tender_offer_el(session: Session, head_item_key:str, context:str):
    """
    公開買付提案対応費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-23290_ExpensesRelatedToTheProposedTenderOfferEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def tv_exhibition_rights_and_videogram_rights(session: Session, head_item_key:str, context:str):
    """
    映像使用権
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-23290_TVExhibitionRightsAndVideogramRights',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_assets_for_rent_ppe(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、賃貸資産、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-24450_AccumulatedDepreciationAssetsForRentPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def assets_for_rent_net_ppe(session: Session, head_item_key:str, context:str):
    """
    賃貸資産（純額）、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-24450_AssetsForRentNetPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def assets_for_rent_ppe(session: Session, head_item_key:str, context:str):
    """
    賃貸資産、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-24450_AssetsForRentPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_scrap_noi(session: Session, head_item_key:str, context:str):
    """
    スクラップ売却収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-24450_GainOnSalesOfScrapNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_retirement_of_assets_for_rent_ope_cf(session: Session, head_item_key:str, context:str):
    """
    賃貸資産除却に伴う原価振替額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-24450_LossOnRetirementOfAssetsForRentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_of_assets_for_rent_ope_cf(session: Session, head_item_key:str, context:str):
    """
    賃貸資産売却に伴う原価振替額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-24450_LossOnSalesOfAssetsForRentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_exemption_of_consumption_taxes_noi(session: Session, head_item_key:str, context:str):
    """
    消費税等免税益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-24750_GainOnExemptionOfConsumptionTaxesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def customer_related_assets_of_goodwill_ope_cf(session: Session, head_item_key:str, context:str):
    """
    顧客関連資産償却額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-24800_CustomerRelatedAssetsOfGoodwillOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_investment_securities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    投資有価証券評価損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-24800_LossOnValuationOfInvestmentSecuritiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_liquor_taxes_payable_ope_cf(session: Session, head_item_key:str, context:str):
    """
    未払酒税の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-25310_IncreaseDecreaseInLiquorTaxesPayableOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sale_of_investments_in_capital_of_subsidiaries_and_associates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社出資金売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-29160_LossGainOnSaleOfInvestmentsInCapitalOfSubsidiariesAndAssociatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sale_of_investments_in_capital_of_subsidiaries_and_associates_el(session: Session, head_item_key:str, context:str):
    """
    関係会社出資金売却損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-29160_LossOnSaleOfInvestmentsInCapitalOfSubsidiariesAndAssociatesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_sales_of_investments_in_capital_of_subsidiaries_and_affiliates_resulting_in_change_in_scope_of_consolidation_inv_cf(session: Session, head_item_key:str, context:str):
    """
    連結の範囲の変更を伴う関係会社出資金の売却による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-29160_PaymentsForSalesOfInvestmentsInCapitalOfSubsidiariesAndAffiliatesResultingInChangeInScopeOfConsolidationInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_a_product_repair_reserve_fund_ope_cf(session: Session, head_item_key:str, context:str):
    """
    製品改修引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-31030_IncreaseDecreaseInAProductRepairReserveFundOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def refunded_taxes_noi(session: Session, head_item_key:str, context:str):
    """
    還付税金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-31030_RefundedTaxesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def refunded_taxes_ope_cf(session: Session, head_item_key:str, context:str):
    """
    還付税金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-31030_RefundedTaxesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cash_over_and_short_noe(session: Session, head_item_key:str, context:str):
    """
    現金過不足、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-32210_CashOverAndShortNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_repair_ope_cf(session: Session, head_item_key:str, context:str):
    """
    補修費用に伴う支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-32380_PaymentsForRepairOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def borrowing_related_expenses_losses_noe(session: Session, head_item_key:str, context:str):
    """
    借入関係費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-33150_BorrowingRelatedExpensesLossesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def advances_received_deposits_noe(session: Session, head_item_key:str, context:str):
    """
    前受金保証料、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-34310_AdvancesReceivedDepositsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def automotive_safety_systems_business_division_rev_oa(session: Session, head_item_key:str, context:str):
    """
    自動車安全部品、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-35260_AutomotiveSafetySystemsBusinessDivisionRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def disaster_prevention_division_rev_oa(session: Session, head_item_key:str, context:str):
    """
    防災、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-35260_DisasterPreventionDivisionRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def industrial_materials_division_rev_oa(session: Session, head_item_key:str, context:str):
    """
    産業資材、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-35260_IndustrialMaterialsDivisionRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_product_compensation_el(session: Session, head_item_key:str, context:str):
    """
    製品補償対策費、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-35260_LossOnProductCompensationEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_businesses_division_rev_oa(session: Session, head_item_key:str, context:str):
    """
    その他
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-35260_OtherBusinessesDivisionRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_revenue(session: Session, head_item_key:str, context:str):
    """
    その他の収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-35260_OtherRevenue',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def paltem_division_rev_oa(session: Session, head_item_key:str, context:str):
    """
    パルテム、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-35260_PALTEMDivisionRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def product_warranty_loss_el(session: Session, head_item_key:str, context:str):
    """
    製品保証損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-35260_ProductWarrantyLossEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revenue_from_contracts_with_customers_rev_oa(session: Session, head_item_key:str, context:str):
    """
    顧客との契約から生じる収益、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-35260_RevenueFromContractsWithCustomersRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def dismantlement_related_expenses_el(session: Session, head_item_key:str, context:str):
    """
    解体撤去関連費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-35710_DismantlementRelatedExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def good_output_ca(session: Session, head_item_key:str, context:str):
    """
    完成品、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-35710_GoodOutputCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payment_of_demolition_and_removal_costs_ope_cf(session: Session, head_item_key:str, context:str):
    """
    解体撤去関連費用の支払額、営業活動によるキャッシュフロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-35710_PaymentOfDemolitionAndRemovalCostsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_factory_transfer_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    工場移転費用の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-35710_PaymentsForFactoryTransferExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def contents_assets_ca(session: Session, head_item_key:str, context:str):
    """
    コンテンツ資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-36410_ContentsAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_based_compensation(session: Session, head_item_key:str, context:str):
    """
    株式報酬引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-36410_ProvisionForShareBasedCompensation',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revenue_from_unused_point_by_withdrawal_from_membership_noi(session: Session, head_item_key:str, context:str):
    """
    退会者未使用課金収益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-36410_RevenueFromUnusedPointByWithdrawalFromMembershipNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def work_in_process_contents_assets_ca(session: Session, head_item_key:str, context:str):
    """
    仕掛コンテンツ資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-36410_WorkInProcessContentsAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def directors_share_based_allowances_ncl(session: Session, head_item_key:str, context:str):
    """
    役員株式報酬引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-37660_DirectorsShareBasedAllowancesNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def directors_share_based_allowances_sga(session: Session, head_item_key:str, context:str):
    """
    役員株式報酬引当金繰入額、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-37660_DirectorsShareBasedAllowancesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_directors_share_based_allowances_ope_cf(session: Session, head_item_key:str, context:str):
    """
    役員株式報酬引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-37660_IncreaseDecreaseInDirectorsShareBasedAllowancesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def contents_assets_ia(session: Session, head_item_key:str, context:str):
    """
    コンテンツ資産、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-37680_ContentsAssetsIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def money_held_in_trust_ioa(session: Session, head_item_key:str, context:str):
    """
    金銭の信託、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-37730_MoneyHeldInTrustIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_disposal_of_treasury_shares_from_exercise_of_share_acquisition_rights_fin_cf(session: Session, head_item_key:str, context:str):
    """
    新株予約権の行使による自己株式の処分による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-37730_ProceedsFromDisposalOfTreasurySharesFromExerciseOfShareAcquisitionRightsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_long_term_deposits_received_fin_cf(session: Session, head_item_key:str, context:str):
    """
    長期預り金の受入による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-37790_ProceedsFromLongTermDepositsReceivedFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_and_contract_assets_ca(session: Session, head_item_key:str, context:str):
    """
    売掛金及び契約資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-37980_AccountsReceivableAndContractAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def office_relocation_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    事務所移転費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-38420_OfficeRelocationExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_refund_liability_ope_cf(session: Session, head_item_key:str, context:str):
    """
    返金負債の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-38510_IncreaseDecreaseInRefundLiabilityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trial_products_income_noi(session: Session, head_item_key:str, context:str):
    """
    試作品売却収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-38950_TrialProductsIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_asset_retirement_obligations_ope_cf(session: Session, head_item_key:str, context:str):
    """
    資産除去債務戻入益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-39320_GainOnReversalOfAssetRetirementObligationsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sale_of_crypto_assets_noi(session: Session, head_item_key:str, context:str):
    """
    暗号資産売却益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-39320_GainOnSaleOfCryptoAssetsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sale_of_crypto_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    暗号資産売却益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-39320_LossGainOnSaleOfCryptoAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_valuation_of_cryptocurrency_ope_cf(session: Session, head_item_key:str, context:str):
    """
    暗号資産評価損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-39320_LossGainOnValuationOfCryptocurrencyOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_liquidation_of_investment_securities_el(session: Session, head_item_key:str, context:str):
    """
    投資有価証券清算損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-39320_LossOnLiquidationOfInvestmentSecuritiesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_liquidation_of_investment_securities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    投資有価証券清算損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-39320_LossOnLiquidationOfInvestmentSecuritiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_valuation_of_crypto_assets_noe(session: Session, head_item_key:str, context:str):
    """
    暗号資産評価損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-39320_LossOnValuationOfCryptoAssetsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_crypto_assets_inv_cf(session: Session, head_item_key:str, context:str):
    """
    暗号資産の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-39320_ProceedsFromSalesOfCryptoAssetsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_asset_retirement_obligations_noi(session: Session, head_item_key:str, context:str):
    """
    資産除去債務戻入益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-39340_GainOnReversalOfAssetRetirementObligationsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_implementation_of_environmental_and_safety_arrangement_ncl(session: Session, head_item_key:str, context:str):
    """
    環境安全整備引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-40280_ReserveForImplementationOfEnvironmentalAndSafetyArrangementNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_implementation_of_environmental_and_safety_arrangements_ope_cf(session: Session, head_item_key:str, context:str):
    """
    環境安全整備引当金の増減額(△は減少)、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-40280_ReserveForImplementationOfEnvironmentalAndSafetyArrangementsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_during_the_suspension_of_plant_operation_noe(session: Session, head_item_key:str, context:str):
    """
    操業休止等経費、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-40610_CostDuringTheSuspensionOfPlantOperationNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_issuance_of_bonds_fin_cf(session: Session, head_item_key:str, context:str):
    """
    社債の発行による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-40620_PaymentsForIssuanceOfBondsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def tender_offer_related_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    公開買付関連費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-40780_TenderOfferRelatedExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_cancellation_of_life_insurance_funds_inv_cf(session: Session, head_item_key:str, context:str):
    """
    生命保険積立金の解約による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-40940_ProceedsFromCancellationOfLifeInsuranceFundsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_insurance_funds(session: Session, head_item_key:str, context:str):
    """
    生命保険積立金の積立による支出
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-40940_PurchaseOfInsuranceFunds',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_closing_of_plant_el(session: Session, head_item_key:str, context:str):
    """
    工場閉鎖損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-41160_LossOnClosingOfPlantEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_compensation_of_claims_noe(session: Session, head_item_key:str, context:str):
    """
    クレーム弁償損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-41160_LossOnCompensationOfClaimsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_loss_compensation_ope_cf(session: Session, head_item_key:str, context:str):
    """
    損害補償損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-41250_IncreaseDecreaseInProvisionForLossCompensationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_compensation_cl(session: Session, head_item_key:str, context:str):
    """
    損害補償損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-41250_ProvisionForLossCompensationCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_compensation_noe(session: Session, head_item_key:str, context:str):
    """
    損害補償損失引当金繰入額、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-41250_ProvisionForLossCompensationNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def personnel_expenses_for_seconded_employees_noe(session: Session, head_item_key:str, context:str):
    """
    出向者労務費差額負担、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-41820_PersonnelExpensesForSecondedEmployeesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def fixed_asset_removal_costs_ope_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産撤去費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-42180_FixedAssetRemovalCostsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_refund_liabilities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    返金負債の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-42180_IncreaseDecreaseInRefundLiabilitiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_removal_of_noncurrent_assets_noe(session: Session, head_item_key:str, context:str):
    """
    固定資産撤去費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-42180_LossOnRemovalOfNoncurrentAssetsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_assets_removal_ncl_liabilities(session: Session, head_item_key:str, context:str):
    """
    固定資産撤去引当金、固定負債、負債の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-42290_ProvisionForAssetsRemovalNCLLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayments_of_long_term_deposits_received_fin_cf(session: Session, head_item_key:str, context:str):
    """
    長期預り金の返還による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-42750_RepaymentsOfLongTermDepositsReceivedFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def account_receivable_medical_income_ca(session: Session, head_item_key:str, context:str):
    """
    調剤報酬等購入債権、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-43500_AccountReceivableMedicalIncomeCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def account_receivable_monetization_of_receivable_ca(session: Session, head_item_key:str, context:str):
    """
    債権売却未収入金、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-43500_AccountReceivableMonetizationOfReceivableCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_account_receivable_medical_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    調剤報酬等購入債権の増減額（△は増加）、営業活動によるキャッシュフロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-43500_DecreaseIncreaseInAccountReceivableMedicalIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_account_receivable_ope_cf(session: Session, head_item_key:str, context:str):
    """
    債権売却未収入金の増減額（△は増加）、営業活動によるキャッシュフロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-43500_DecreaseIncreaseInAccountReceivableOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def communication_line_ia(session: Session, head_item_key:str, context:str):
    """
    通信回線使用権、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-43900_CommunicationLineIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_unrealized_gain_on_deferred_revenue_ope_cf(session: Session, head_item_key:str, context:str):
    """
    繰延延払利益の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-43900_IncreaseDecreaseInUnrealizedGainOnDeferredRevenueOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_and_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    受取利息及び配当金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-43900_InterestAndIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payment_for_guarantee_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    保証金の差入による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-43900_PaymentForGuaranteeDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_collection_of_guarantee_deposits_fin_cf(session: Session, head_item_key:str, context:str):
    """
    保証金の返戻による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-43900_ProceedsFromCollectionOfGuaranteeDepositsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def unrealized_gain_on_deferred_revenue_cl(session: Session, head_item_key:str, context:str):
    """
    繰延延払利益、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-43900_UnrealizedGainOnDeferredRevenueCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bonuses_and_provision_for_bonuses_sga(session: Session, head_item_key:str, context:str):
    """
    賞与及び賞与引当金繰入額、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-45210_BonusesAndProvisionForBonusesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def in_process_research_and_development_ia(session: Session, head_item_key:str, context:str):
    """
    仕掛研究開発、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-45210_InProcessResearchAndDevelopmentIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_retirement_benefit_asset_and_liability_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る資産負債の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-45210_IncreaseDecreaseInRetirementBenefitAssetAndLiabilityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_sales_of_finished_goods_and_merchandise(session: Session, head_item_key:str, context:str):
    """
    商品及び製品の販売
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-45210_NetSalesOfFinishedGoodsAndMerchandise',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_income(session: Session, head_item_key:str, context:str):
    """
    その他の収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-45210_OtherIncome',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def royalty(session: Session, head_item_key:str, context:str):
    """
    製品の販売等に関するライセンス契約
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-45210_Royalty',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def customer_related_intangible_assets_ia(session: Session, head_item_key:str, context:str):
    """
    顧客関連無形資産、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-45440_CustomerRelatedIntangibleAssetsIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_of_contingent_consideration_for_shares_of_subsidiaries_inv_cf(session: Session, head_item_key:str, context:str):
    """
    子会社株式の条件付取得対価の支払額、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-45440_PaymentsOfContingentConsiderationForSharesOfSubsidiariesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_compensation_loss_ncl(session: Session, head_item_key:str, context:str):
    """
    補償損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-45440_ProvisionForCompensationLossNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_provision_for_compensation_loss_el(session: Session, head_item_key:str, context:str):
    """
    補償損失引当金戻入額、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-45440_ReversalOfProvisionForCompensationLossEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_provision_for_compensation_loss_ope_cf(session: Session, head_item_key:str, context:str):
    """
    補償損失引当金戻入額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-45440_ReversalOfProvisionForCompensationLossOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def business_structure_improvement_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    事業構造改善費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-45480_BusinessStructureImprovementExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_income_for_damage_noi(session: Session, head_item_key:str, context:str):
    """
    受取賠償金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-45490_CompensationIncomeForDamageNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayments_to_share_acquisition_rights_fin_cf(session: Session, head_item_key:str, context:str):
    """
    自己新株予約権の取得による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-45640_RepaymentsToShareAcquisitionRightsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amends_for_product_warranties_cl(session: Session, head_item_key:str, context:str):
    """
    製品補償引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-46110_AmendsForProductWarrantiesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_amends_for_product(session: Session, head_item_key:str, context:str):
    """
    製品補償引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-46110_IncreaseDecreaseInAmendsForProduct',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_net_defined_benefit_asset_liability_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る資産負債の増減額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-46110_IncreaseDecreaseInNetDefinedBenefitAssetLiabilityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_of_loss_related_to_quality_ope_cf(session: Session, head_item_key:str, context:str):
    """
    品質関連損失の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-46110_PaymentsOfLossRelatedToQualityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def product_amends_drawing_noe(session: Session, head_item_key:str, context:str):
    """
    製品補償引当金繰入額、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-46110_ProductAmendsDrawingNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_payments_for_derivative_settlement_net_inv_cf(session: Session, head_item_key:str, context:str):
    """
    デリバティブ決済による収支（純額）、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-46130_ProceedsFromPaymentsForDerivativeSettlementNetInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_impairment_loss_ei(session: Session, head_item_key:str, context:str):
    """
    減損損失戻入益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-46130_ReversalOfImpairmentLossEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_impairment_loss_ope_cf(session: Session, head_item_key:str, context:str):
    """
    減損損失戻入益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-46130_ReversalOfImpairmentLossOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def segment_profit_segment_information(session: Session, head_item_key:str, context:str):
    """
    セグメント利益、セグメント情報
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-46130_SegmentProfitSegmentInformation',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_longterm_accounts_receivable_other_ope_cf(session: Session, head_item_key:str, context:str):
    """
    長期未収入金の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-46230_DecreaseIncreaseInLongtermAccountsReceivableOtherOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def shareholder_benefit_program_expense_noe(session: Session, head_item_key:str, context:str):
    """
    株主優待費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-46230_ShareholderBenefitProgramExpenseNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_operation_of_investment_noe(session: Session, head_item_key:str, context:str):
    """
    投資運用損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-46710_LossOnOperationOfInvestmentNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_forfeiture_of_unclaimed_dividends(session: Session, head_item_key:str, context:str):
    """
    除斥配当金受入益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-47710_GainOnForfeitureOfUnclaimedDividends',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_account_receivable_fixed_assets(session: Session, head_item_key:str, context:str):
    """
    滞留債権、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-47710_LongTermAccountReceivableFixedAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def fiduciary_obligation_income_noi(session: Session, head_item_key:str, context:str):
    """
    業務受託収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-48140_FiduciaryObligationIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def office_renovation_expenses_el(session: Session, head_item_key:str, context:str):
    """
    事務所改装費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-48140_OfficeRenovationExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_bad_debts_bonuses_and_retirement_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    引当金繰入額、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-49740_ProvisionForBadDebtsBonusesAndRetirementExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_other_property_inv_cf(session: Session, head_item_key:str, context:str):
    """
    その他償却資産の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-49740_PurchaseOfOtherPropertyInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_or_decrease_in_refund_liabilities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    返金負債の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-49980_IncreaseOrDecreaseInRefundLiabilitiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_or_decrease_in_returned_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    返品資産の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-49980_IncreaseOrDecreaseInReturnedAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def refund_liability_cl(session: Session, head_item_key:str, context:str):
    """
    返金負債、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-49980_RefundLiabilityCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def returned_assets_ca(session: Session, head_item_key:str, context:str):
    """
    返品資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-49980_ReturnedAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def technical_assets_ia(session: Session, head_item_key:str, context:str):
    """
    技術資産、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-50130_TechnicalAssetsIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accrued_gasoline_tax(session: Session, head_item_key:str, context:str):
    """
    未払揮発油税
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-50170_AccruedGasolineTax',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_accrued_gasoline_tax_ope_cf(session: Session, head_item_key:str, context:str):
    """
    未払揮発油税の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-50170_IncreaseDecreaseInAccruedGasolineTaxOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_sales_of_shares_of_subsidiaries_resulting_in_change_in_scope_of_consolidation_inv_cf(session: Session, head_item_key:str, context:str):
    """
    連結範囲の変更を伴う子会社株式の売却による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-50170_PaymentsForSalesOfSharesOfSubsidiariesResultingInChangeInScopeOfConsolidationInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_of_oil_tanks(session: Session, head_item_key:str, context:str):
    """
    タンク賃借料
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-50170_RentOfOilTanks',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rental_income_of_oil_tanks(session: Session, head_item_key:str, context:str):
    """
    タンク賃貸料
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-50170_RentalIncomeOfOilTanks',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayment_of_the_examination_by_the_regional_taxation_bureau_el(session: Session, head_item_key:str, context:str):
    """
    国税局調査に基づく返納金、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-50170_RepaymentOfTheExaminationByTheRegionalTaxationBureauEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def storage_tanks_net(session: Session, head_item_key:str, context:str):
    """
    油槽（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-50170_StorageTanksNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_deposit_ioa(session: Session, head_item_key:str, context:str):
    """
    長期性預金、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-51220_LongTermDepositIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def remeasurements_of_defined_benefit_plans_oci(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る調整額、その他の包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-51620_RemeasurementsOfDefinedBenefitPlansOCI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cash_dividends_paid_by_parent_company_fin_cf(session: Session, head_item_key:str, context:str):
    """
    親会社による配当金の支払額、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52370_CashDividendsPaidByParentCompanyFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def expenses_of_voluntary_recall_of_products_el(session: Session, head_item_key:str, context:str):
    """
    製品自主回収関連費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52370_ExpensesOfVoluntaryRecallOfProductsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def fee_on_sales_of_notes_payable_noe(session: Session, head_item_key:str, context:str):
    """
    手形売却費、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52370_FeeOnSalesOfNotesPayableNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_foreign_currency_translation_adjustment_ei(session: Session, head_item_key:str, context:str):
    """
    為替換算調整勘定取崩益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52370_GainOnReversalOfForeignCurrencyTranslationAdjustmentEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_foreign_currency_translation_adjustment_ope_cf(session: Session, head_item_key:str, context:str):
    """
    為替換算調整勘定取崩益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52370_GainOnReversalOfForeignCurrencyTranslationAdjustmentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_liquidation_of_subsidiaries_losses2_ope_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社清算損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52370_IncreaseDecreaseInProvisionForLiquidationOfSubsidiariesLosses2OpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_product_compensation_ope_cf(session: Session, head_item_key:str, context:str):
    """
    製品補償引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52370_IncreaseDecreaseInProvisionForProductCompensationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def litigation_loss_ei(session: Session, head_item_key:str, context:str):
    """
    訴訟損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52370_LitigationLossEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_closing_subsidiaries_and_affiliates_cl(session: Session, head_item_key:str, context:str):
    """
    関係会社清算損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52370_ProvisionForLossOnClosingSubsidiariesAndAffiliatesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_product_compensation_cl(session: Session, head_item_key:str, context:str):
    """
    製品補償引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52370_ProvisionForProductCompensationCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_guarantee_deposited_fin_cf(session: Session, head_item_key:str, context:str):
    """
    預り保証金の純増減額（△は減少）、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52610_IncreaseDecreaseInGuaranteeDepositedFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_special_compensation_ope_cf(session: Session, head_item_key:str, context:str):
    """
    従業員特別補償引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52610_IncreaseDecreaseInProvisionForSpecialCompensationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_accounts_receivable_net_amount_ca(session: Session, head_item_key:str, context:str):
    """
    営業未収入金（純額）、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52610_OperatingAccountsReceivableNetAmountCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_employee_special_amends_ncl(session: Session, head_item_key:str, context:str):
    """
    従業員特別補償引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52610_ProvisionForEmployeeSpecialAmendsNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_special_compensations_el(session: Session, head_item_key:str, context:str):
    """
    従業員特別補償引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52610_ProvisionForSpecialCompensationsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def refund_income_noi(session: Session, head_item_key:str, context:str):
    """
    還付金収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52610_RefundIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def disaster_repair_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    災害修繕費、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52620_DisasterRepairExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_employee_stock_ownership_plan_trust_ope_cf(session: Session, head_item_key:str, context:str):
    """
    従業員株式給付引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52620_IncreaseDecreaseInProvisionForEmployeeStockOwnershipPlanTrustOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_employee_stock_ownership_plan_trust_ncl(session: Session, head_item_key:str, context:str):
    """
    従業員株式給付引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52620_ProvisionForEmployeeStockOwnershipPlanTrustNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def listing_fees_noe(session: Session, head_item_key:str, context:str):
    """
    上場賦課金、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52820_ListingFeesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_of_loss_on_workplace_closing_ope_cf(session: Session, head_item_key:str, context:str):
    """
    事業所閉鎖損失の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52820_PaymentsOfLossOnWorkplaceClosingOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_workplace_closing_cl(session: Session, head_item_key:str, context:str):
    """
    事業所閉鎖損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52820_ProvisionForLossOnWorkplaceClosingCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def dividends_income_received_in_proportion_to_transactions_with_partnership_noi(session: Session, head_item_key:str, context:str):
    """
    利用分量配当金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52840_DividendsIncomeReceivedInProportionToTransactionsWithPartnershipNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_cancellation_of_membership_ope_cf(session: Session, head_item_key:str, context:str):
    """
    会員権解約損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52840_LossOnCancellationOfMembershipOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceed_from_disposal_of_iron_scraps_noi(session: Session, head_item_key:str, context:str):
    """
    鉄屑処分収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52840_ProceedFromDisposalOfIronScrapsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accrued_liability_for_factoring(session: Session, head_item_key:str, context:str):
    """
    ファクタリング未払金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-52880_AccruedLiabilityForFactoring',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_deposits_for_purchase_of_treausury_shares_fin_cf(session: Session, head_item_key:str, context:str):
    """
    自己株式取得のための預託金の増減額(△は増加)、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-53570_DecreaseIncreaseInDepositsForPurchaseOfTreausurySharesFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_suspense_receipt_ncl(session: Session, head_item_key:str, context:str):
    """
    長期仮受金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-54630_LongTermSuspenseReceiptNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def share_based_payment_expenses_el(session: Session, head_item_key:str, context:str):
    """
    株式報酬費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-54630_ShareBasedPaymentExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def foreign_withholding_tax_noe(session: Session, head_item_key:str, context:str):
    """
    外国源泉税、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-55410_ForeignWithholdingTaxNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_contract_ncl(session: Session, head_item_key:str, context:str):
    """
    契約損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-55410_ProvisionForLossContractNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_restoration_cost_cl(session: Session, head_item_key:str, context:str):
    """
    復旧費用引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-55410_ProvisionOfRestorationCostCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_restoration_cost_ncl(session: Session, head_item_key:str, context:str):
    """
    復旧費用引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-55410_ProvisionOfRestorationCostNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_non_current_assets_rent_noi(session: Session, head_item_key:str, context:str):
    """
    固定資産賃貸益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-56310_GainOnNonCurrentAssetsRentNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_inappropriate_conduct_in_quality_inspections_el(session: Session, head_item_key:str, context:str):
    """
    品質不適切行為関連損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-56310_LossOnInappropriateConductInQualityInspectionsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_business_restructure_cl(session: Session, head_item_key:str, context:str):
    """
    事業再構築引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-56310_ProvisionForBusinessRestructureCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_wind_power_generator_business_cl(session: Session, head_item_key:str, context:str):
    """
    風力事業損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-56310_ProvisionForLossOnWindPowerGeneratorBusinessCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payment_amount_of_compensation_ope_cf(session: Session, head_item_key:str, context:str):
    """
    支払補償金の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-56440_PaymentAmountOfCompensationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payment_compensation_ope_cf(session: Session, head_item_key:str, context:str):
    """
    支払補償金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-56440_PaymentCompensationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_land_used_for_mining_operations(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、鉱業用地
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-57060_AccumulatedDepreciationLandUsedForMiningOperations',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sale_of_shares_of_subsidiaries_and_associates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社株式売却益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-57060_GainOnSaleOfSharesOfSubsidiariesAndAssociatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def land_used_for_mining_operations_net(session: Session, head_item_key:str, context:str):
    """
    鉱業用地（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-57060_LandUsedForMiningOperationsNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def land_used_for_mining_operations_ppe(session: Session, head_item_key:str, context:str):
    """
    鉱業用地、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-57060_LandUsedForMiningOperationsPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_for_payment_el(session: Session, head_item_key:str, context:str):
    """
    支払補償金、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-57110_CompensationForPaymentEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deposited_gold_bullion_cl(session: Session, head_item_key:str, context:str):
    """
    預り金地金、流動負債、負債の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-57110_DepositedGoldBullionCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def expense_for_the_maintenance_and_management_of_abandoned_mines(session: Session, head_item_key:str, context:str):
    """
    鉱山残務整理費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-57110_ExpenseForTheMaintenanceAndManagementOfAbandonedMines',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_in_cash_and_cash_equivalents_from_newly_consolidated(session: Session, head_item_key:str, context:str):
    """
    非連結子会社の連結に伴う現金及び現金同等物の増加額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-57110_IncreaseInCashAndCashEquivalentsFromNewlyConsolidated',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def land_net_ppe(session: Session, head_item_key:str, context:str):
    """
    土地（純額）、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-57110_LandNetPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def leased_gold_bullion_receivable_ca(session: Session, head_item_key:str, context:str):
    """
    貸付け金地金、流動資産、資産の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-57110_LeasedGoldBullionReceivableCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def losses_on_withdrawal_from_business_el(session: Session, head_item_key:str, context:str):
    """
    事業撤退損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-57110_LossesOnWithdrawalFromBusinessEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payment_for_purchases_of_gold_bullion_from_market_for_customers_under_my_gold_plan_ope_cf(session: Session, head_item_key:str, context:str):
    """
    金地金購入による支出、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-57110_PaymentForPurchasesOfGoldBullionFromMarketForCustomersUnderMyGoldPlanOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sales_of_gold_bullion_deposited_from_customers_under_consuming_bailment_my_gold_plan_ope_cf(session: Session, head_item_key:str, context:str):
    """
    金地金売却による収入、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-57110_ProceedsFromSalesOfGoldBullionDepositedFromCustomersUnderConsumingBailmentMyGoldPlanOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_disaster_noe(session: Session, head_item_key:str, context:str):
    """
    災害損失、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-57270_LossOnDisasterNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def allowance_for_demolition_of_non_current_assets_liabilities(session: Session, head_item_key:str, context:str):
    """
    固定資産解体費用引当金、負債の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-58300_AllowanceForDemolitionOfNonCurrentAssetsLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_allowance_for_demolition_of_non_current_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産解体費用引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-58300_IncreaseDecreaseInAllowanceForDemolitionOfNonCurrentAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_share_based_compensation_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    株式報酬引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-58300_IncreaseDecreaseInProvisionForShareBasedCompensationOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_receivables_and_investment_assets_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    リース債権及びリース投資資産、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-58300_LeaseReceivablesAndInvestmentAssetsAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_based_compensation_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    株式報酬引当金、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-58300_ProvisionForShareBasedCompensationLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_reserve_for_financial_instruments_transaction_liabilities(session: Session, head_item_key:str, context:str):
    """
    金融商品取引責任準備金繰入額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-58300_ProvisionOfReserveForFinancialInstrumentsTransactionLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_pollution_load_levy_cl(session: Session, head_item_key:str, context:str):
    """
    汚染負荷量賦課金引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-59010_ProvisionForPollutionLoadLevyCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_pollution_load_levy_ncl(session: Session, head_item_key:str, context:str):
    """
    汚染負荷量賦課金引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-59010_ProvisionForPollutionLoadLevyNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def allowance_for_stock_benefit_for_employee_ncl(session: Session, head_item_key:str, context:str):
    """
    従業員株式給付引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-59020_AllowanceForStockBenefitForEmployeeNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def condolence_money_noe(session: Session, head_item_key:str, context:str):
    """
    弔慰金、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-59020_CondolenceMoneyNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_decommissioning_of_inventories_goods_ope_cf(session: Session, head_item_key:str, context:str):
    """
    棚卸資産廃棄費用引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-59020_IncreaseDecreaseInProvisionForDecommissioningOfInventoriesGoodsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_special_investigation_fees_ope_cf(session: Session, head_item_key:str, context:str):
    """
    特別調査費用引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-59020_IncreaseDecreaseInProvisionForSpecialInvestigationFeesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payment_for_busines_restrucuring_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    事業構造改革費用の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-59020_PaymentForBusinesRestrucuringExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_business_restructuring_ncl(session: Session, head_item_key:str, context:str):
    """
    事業構造改革引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-59020_ProvisionForBusinessRestructuringNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_decommissioning_of_inventories_goods_cl(session: Session, head_item_key:str, context:str):
    """
    棚卸資産廃棄費用引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-59020_ProvisionForDecommissioningOfInventoriesGoodsCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_special_investigation_expenses_cl(session: Session, head_item_key:str, context:str):
    """
    特別調査費用引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-59020_ProvisionForSpecialInvestigationExpensesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_liabilities_noi(session: Session, head_item_key:str, context:str):
    """
    債務取崩益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-59660_GainOnReversalOfLiabilitiesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def profit_on_cansellation_of_leases_ei(session: Session, head_item_key:str, context:str):
    """
    リース解約益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-59850_ProfitOnCansellationOfLeasesEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def new_factory_construction_expenses_el(session: Session, head_item_key:str, context:str):
    """
    新工場建設関連費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-60130_NewFactoryConstructionExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def litigation_expenses_el(session: Session, head_item_key:str, context:str):
    """
    訴訟関連費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-61660_LitigationExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def litigation_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    訴訟関連費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-61660_LitigationExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def litigation_expenses_paid_ope_cf(session: Session, head_item_key:str, context:str):
    """
    訴訟関連費用の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-61660_LitigationExpensesPaidOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rental_inventory_assets_ca(session: Session, head_item_key:str, context:str):
    """
    レンタル商品、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-61860_RentalInventoryAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    保険料、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-62030_InsuranceExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def maintenance_cost_for_idle_assets_noe(session: Session, head_item_key:str, context:str):
    """
    遊休資産維持管理費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-62030_MaintenanceCostForIdleAssetsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def withholding_tax_burden_loss_noe(session: Session, head_item_key:str, context:str):
    """
    源泉税負担損失、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-62030_WithholdingTaxBurdenLossNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def use_quantity_dividend_noi(session: Session, head_item_key:str, context:str):
    """
    利用分量配当金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-62570_UseQuantityDividendNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_scrap_metal_noi(session: Session, head_item_key:str, context:str):
    """
    原材料等売却益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-62580_GainOnScrapMetalNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def system_failure_response_costs_el(session: Session, head_item_key:str, context:str):
    """
    システム障害対応費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-62820_SystemFailureResponseCostsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_compensation_cl(session: Session, head_item_key:str, context:str):
    """
    損害補償損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63170_ProvisionForCompensationCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def directors_compensations_salaries_allowances_bonuses_and_welfare_expenses_sga(session: Session, head_item_key:str, context:str):
    """
    役員報酬及び従業員給与・諸手当・賞与・福利費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63320_DirectorsCompensationsSalariesAllowancesBonusesAndWelfareExpensesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def estimate_design_cost_sga(session: Session, head_item_key:str, context:str):
    """
    見積設計費、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63320_EstimateDesignCostSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_net_defined_benefit_asset_liability_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る資産負債の増減額(△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63780_IncreaseDecreaseNetDefinedBenefitAssetLiabilityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_receivable_accounts_receivable_from_completed_construction_contracts_and_contract_assets_ca(session: Session, head_item_key:str, context:str):
    """
    受取手形、完成工事未収入金及び契約資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63790_NotesReceivableAccountsReceivableFromCompletedConstructionContractsAndContractAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_into_long_term_time_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    長期性預金の預け入れによる支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63790_PaymentsIntoLongTermTimeDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_withdrawal_of_long_term_time_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    長期性預金の払戻による収入、投資活動によるキャッシュフロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63790_ProceedsFromWithdrawalOfLongTermTimeDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_receivable_accounts_receivable_from_completed_construction_contracts_and_other_and_contract_assets_ca(session: Session, head_item_key:str, context:str):
    """
    受取手形・完成工事未収入金等及び契約資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63830_NotesReceivableAccountsReceivableFromCompletedConstructionContractsAndOtherAndContractAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_issuance_of_convertible_bonds_with_stock_acquisition_rights_fin_cf(session: Session, head_item_key:str, context:str):
    """
    転換社債型新株予約権付社債の発行による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63830_ProceedsFromIssuanceOfConvertibleBondsWithStockAcquisitionRightsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_investments_in_partenership_fund_noe(session: Session, head_item_key:str, context:str):
    """
    組合投資損失、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63840_LossOnInvestmentsInPartenershipFundNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_unearned_interest_on_installment_sale_ope_cf(session: Session, head_item_key:str, context:str):
    """
    割賦販売前受利息の増減額(△は減少)、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63900_IncreaseDecreaseInUnearnedInterestOnInstallmentSaleOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_income_on_installment_sale_noi(session: Session, head_item_key:str, context:str):
    """
    割賦販売受取利息、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63900_InterestIncomeOnInstallmentSaleNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_from_rental_of_real_estate_for_investment_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投資不動産の賃貸による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63900_PaymentsFromRentalOfRealEstateForInvestmentInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    賃貸費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63900_RentExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_provision_for_product_warranties_noi(session: Session, head_item_key:str, context:str):
    """
    製品保証引当金戻入額、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63900_ReversalOfProvisionForProductWarrantiesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def directors_compensations_and_employees_salaries_sga(session: Session, head_item_key:str, context:str):
    """
    役員・従業員給与手当、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63920_DirectorsCompensationsAndEmployeesSalariesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def refund_liabilities(session: Session, head_item_key:str, context:str):
    """
    返金負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-63920_RefundLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_disaster_noe(session: Session, head_item_key:str, context:str):
    """
    災害損失引当金繰入額、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-64120_ProvisionForLossOnDisasterNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def restructuring_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    事業再編費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-64450_RestructuringExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_liquidation_of_non_current_assets_el(session: Session, head_item_key:str, context:str):
    """
    固定資産整理損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-65070_LossOnLiquidationOfNonCurrentAssetsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_liquidation_of_non_current_assets(session: Session, head_item_key:str, context:str):
    """
    固定資産整理損失引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-65070_ProvisionForLossOnLiquidationOfNonCurrentAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_product_warranties_cl(session: Session, head_item_key:str, context:str):
    """
    製品保証引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-65070_ProvisionForProductWarrantiesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def minimum_pension_liability_adjustment_oci(session: Session, head_item_key:str, context:str):
    """
    最小年金負債調整額、その他の包括利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-65880_MinimumPensionLiabilityAdjustmentOCI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def minimum_pension_liability_adjustments(session: Session, head_item_key:str, context:str):
    """
    最小年金負債調整額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-65880_MinimumPensionLiabilityAdjustments',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payment_for_extra_retirement_payments_ope_cf(session: Session, head_item_key:str, context:str):
    """
    割増退職金等の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-65880_PaymentForExtraRetirementPaymentsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_litigation_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    訴訟損失費用の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-65880_PaymentsForLitigationExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def restructuring_cost_el(session: Session, head_item_key:str, context:str):
    """
    事業構造改革費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-65880_RestructuringCostEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def restructuring_cost_ope_cf(session: Session, head_item_key:str, context:str):
    """
    事業構造改革費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-65880_RestructuringCostOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def the_right_of_using_land_ia(session: Session, head_item_key:str, context:str):
    """
    土地使用権、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66200_TheRightOfUsingLandIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def borrowing_fee_ope_cf(session: Session, head_item_key:str, context:str):
    """
    借入手数料、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_BorrowingFeeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_real_estate_for_sale_in_process_ope_cf(session: Session, head_item_key:str, context:str):
    """
    仕掛販売用不動産の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_DecreaseIncreaseInRealEstateForSaleInProcessOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deposits_form_silent_partnership_cl(session: Session, head_item_key:str, context:str):
    """
    匿名組合預り金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_DepositsFormSilentPartnershipCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def distributions_of_loss_on_silent_partnerships_ope_cf(session: Session, head_item_key:str, context:str):
    """
    匿名組合損益分配額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_DistributionsOfLossOnSilentPartnershipsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def dividend_to_a_sleeping_partner_fin_cf(session: Session, head_item_key:str, context:str):
    """
    匿名組合員への分配金、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_DividendToASleepingPartnerFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_provision_for_demolition_cost_ei(session: Session, head_item_key:str, context:str):
    """
    解体費用引当金戻入額、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_GainOnReversalOfProvisionForDemolitionCostEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_provision_for_demolition_cost_ope_cf(session: Session, head_item_key:str, context:str):
    """
    解体費用引当金戻入額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_GainOnReversalOfProvisionForDemolitionCostOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_accrued_business_taxes_ope_cf(session: Session, head_item_key:str, context:str):
    """
    未払事業税等の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_IncreaseDecreaseInAccruedBusinessTaxesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_or_decrease_in_the_trust_deposits_ope_cf(session: Session, head_item_key:str, context:str):
    """
    信託預金の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_IncreaseOrDecreaseInTheTrustDepositsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_of_borrowing_fee_fin_cf(session: Session, head_item_key:str, context:str):
    """
    借入手数料の支払額、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_PaymentsOfBorrowingFeeFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_withdrawal_of_investments_in_silent_partnership_fin_cf(session: Session, head_item_key:str, context:str):
    """
    匿名組合員からの出資払込による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_ProceedsFromWithdrawalOfInvestmentsInSilentPartnershipFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rental_real_estate_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    賃貸不動産経費、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_RentalRealEstateExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_allowance_for_doubtful_accounts_ope_cf(session: Session, head_item_key:str, context:str):
    """
    貸倒引当金戻入額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_ReversalOfAllowanceForDoubtfulAccountsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def sales_accrued_income_ca(session: Session, head_item_key:str, context:str):
    """
    営業未収収益、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_SalesAccruedIncomeCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def spending_funded_by_reimbursements_to_the_anonymous_members_fin_cf(session: Session, head_item_key:str, context:str):
    """
    匿名組合員への出資払戻による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_SpendingFundedByReimbursementsToTheAnonymousMembersFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trust_deposit(session: Session, head_item_key:str, context:str):
    """
    信託預金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_TrustDeposit',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trust_guarantee_deposits_received(session: Session, head_item_key:str, context:str):
    """
    信託預り保証金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_TrustGuaranteeDepositsReceived',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trust_unearned_revenue(session: Session, head_item_key:str, context:str):
    """
    信託前受金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66250_TrustUnearnedRevenue',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commission_for_purchase_of_treasury_shares_ope_cf(session: Session, head_item_key:str, context:str):
    """
    自己株式取得費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-66660_CommissionForPurchaseOfTreasurySharesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_repair_expenses_of_products_cl(session: Session, head_item_key:str, context:str):
    """
    製品補修引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-67430_ReserveForRepairExpensesOfProductsCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reseve_for_repair_expenses_of_products_ncl(session: Session, head_item_key:str, context:str):
    """
    製品補修引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-67430_ReseveForRepairExpensesOfProductsNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def assets_for_lease_net(session: Session, head_item_key:str, context:str):
    """
    賃貸資産（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-67750_AssetsForLeaseNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def expenses_of_real_estate_for_rent_noe(session: Session, head_item_key:str, context:str):
    """
    賃貸不動産関係費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-67770_ExpensesOfRealEstateForRentNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sale_of_raw_materials_noe(session: Session, head_item_key:str, context:str):
    """
    原材料売却損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-67770_LossOnSaleOfRawMaterialsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_operating_accounts_receivable_ope_cf(session: Session, head_item_key:str, context:str):
    """
    営業未収入金の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-68040_DecreaseIncreaseInOperatingAccountsReceivableOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def redumption_of_bonds_with_share_acquisition_rights_fin_cf(session: Session, head_item_key:str, context:str):
    """
    新株予約権付社債の償還による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-68040_RedumptionOfBondsWithShareAcquisitionRightsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_income_for_damages_ei(session: Session, head_item_key:str, context:str):
    """
    受取損害賠償金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-68450_CompensationIncomeForDamagesEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def expenses_of_real_estate_noe(session: Session, head_item_key:str, context:str):
    """
    不動産費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-68450_ExpensesOfRealEstateNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sale_of_investments_in_capital_of_subsidiaries_and_associates_ei(session: Session, head_item_key:str, context:str):
    """
    関係会社出資金売却益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-68450_GainOnSaleOfInvestmentsInCapitalOfSubsidiariesAndAssociatesEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_cash_and_cash_equivalents_resulting_from_change_in_accounting_period_of_subsidiaries_cce(session: Session, head_item_key:str, context:str):
    """
    連結子会社の決算期変更に伴う現金及び現金同等物の増減額（△は減少）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-68450_IncreaseDecreaseInCashAndCashEquivalentsResultingFromChangeInAccountingPeriodOfSubsidiariesCCE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sale_of_investments_in_capital_of_subsidiaries_resulting_in_change_in_scope_of(session: Session, head_item_key:str, context:str):
    """
    連結の範囲の変更を伴う子会社出資金の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-68450_ProceedsFromSaleOfInvestmentsInCapitalOfSubsidiariesResultingInChangeInScopeOf',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def electronically_recorded_obligations_operating_facilities_cl(session: Session, head_item_key:str, context:str):
    """
    設備電子記録債務、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-68550_ElectronicallyRecordedObligationsOperatingFacilitiesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_scraps_noi(session: Session, head_item_key:str, context:str):
    """
    材料屑売却益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-68550_GainOnSalesOfScrapsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_acceptance_of_investment_to_non_controlling_interests_fin_cf(session: Session, head_item_key:str, context:str):
    """
    投資事業組合等における非支配持分からの出資受入による収入、財務活動によるキャッシュフロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-68750_ProceedsFromAcceptanceOfInvestmentToNonControllingInterestsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_rental_assets(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、レンタル資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-69320_AccumulatedDepreciationRentalAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def income_of_rent_noi(session: Session, head_item_key:str, context:str):
    """
    賃貸収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-69320_IncomeOfRentNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rental_assets_net(session: Session, head_item_key:str, context:str):
    """
    レンタル資産（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-69320_RentalAssetsNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rental_assets_ppe(session: Session, head_item_key:str, context:str):
    """
    レンタル資産、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-69320_RentalAssetsPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_of_notes_and_accounts_receivable_trade_ope_cf(session: Session, head_item_key:str, context:str):
    """
    売上債権売却損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-69510_LossOnSalesOfNotesAndAccountsReceivableTradeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revenue_from_acceptance_of_development_services_noi(session: Session, head_item_key:str, context:str):
    """
    受託研究収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-69510_RevenueFromAcceptanceOfDevelopmentServicesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def sales_of_trade_receivables_paid(session: Session, head_item_key:str, context:str):
    """
    売上債権売却による支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-69510_SalesOfTradeReceivablesPaid',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def expenses_for_persons_of_temporary_transfer_ope_cf(session: Session, head_item_key:str, context:str):
    """
    出向者経費、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-69890_ExpensesForPersonsOfTemporaryTransferOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_loss_on_business_related_to_business_partners_el(session: Session, head_item_key:str, context:str):
    """
    取引先関連事業損失戻入益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-69890_GainOnReversalOfLossOnBusinessRelatedToBusinessPartnersEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_loss_on_business_related_to_business_partners_ope_cf(session: Session, head_item_key:str, context:str):
    """
    取引先関連事業損失戻入益、、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-69890_GainOnReversalOfLossOnBusinessRelatedToBusinessPartnersOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_potion_of_long_term_loans_payable_cl(session: Session, head_item_key:str, context:str):
    """
    一年以内返済長期借入金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-70600_CurrentPotionOfLongTermLoansPayableCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_consumption_taxes_payable_consumption_taxes_refund_receivable_ope_cf(session: Session, head_item_key:str, context:str):
    """
    未払又は未収消費税等の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-70600_IncreaseDecreaseInConsumptionTaxesPayableConsumptionTaxesRefundReceivableOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def note_notes_and_accounts_receivable_trade_and_contract_assets_net_ca(session: Session, head_item_key:str, context:str):
    """
    売掛金及び契約資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-70600_NoteNotesAndAccountsReceivableTradeAndContractAssetsNetCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operations_cosignment_fee_noi(session: Session, head_item_key:str, context:str):
    """
    業務受託収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-70600_OperationsCosignmentFeeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commission_for_syndicate_loan_ope_cf(session: Session, head_item_key:str, context:str):
    """
    シンジケートローン手数料、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-70880_CommissionForSyndicateLoanOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def amortization_of_customer_related_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    顧客関連資産償却額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-70940_AmortizationOfCustomerRelatedAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def expenses_etc_segment_information(session: Session, head_item_key:str, context:str):
    """
    経費等、セグメント情報
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-71630_ExpensesEtcSegmentInformation',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gross_operating_profit_segment_information(session: Session, head_item_key:str, context:str):
    """
    連結業務粗利益、セグメント情報
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-71630_GrossOperatingProfitSegmentInformation',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_point_program_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    ポイント引当金、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-71630_ReserveForPointProgramLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def balance_of_purchase_and_sales_of_treasury_stock_fin_cf(session: Session, head_item_key:str, context:str):
    """
    自己株式の取得・売却による収支、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-71840_BalanceOfPurchaseAndSalesOfTreasuryStockFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_due_to_share_delivery(session: Session, head_item_key:str, context:str):
    """
    株式交付による増加
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-71840_IncreaseDueToShareDelivery',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lncrease_decrease_in_lease_receivables_and_investment_assets_ope_cfbnk(session: Session, head_item_key:str, context:str):
    """
    リース債権及びリース投資資産の純増(△)減、営業活動によるキャッシュ・フロー、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-71840_LncreaseDecreaseInLeaseReceivablesAndInvestmentAssetsOpeCFBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_special_claims(session: Session, head_item_key:str, context:str):
    """
    特別クレーム損失引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-72350_ProvisionForLossOnSpecialClaims',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def development_fiduciary_obligation_fee_noi(session: Session, head_item_key:str, context:str):
    """
    開発業務受託料、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-72920_DevelopmentFiduciaryObligationFeeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_receivables_and_investments_in_leases_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    リース債権及びリース投資資産、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-73220_LeaseReceivablesAndInvestmentsInLeasesAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_awards(session: Session, head_item_key:str, context:str):
    """
    株式給付引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-73220_ProvisionForShareAwards',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_provision_for_loss_on_guarantees_noi(session: Session, head_item_key:str, context:str):
    """
    債務保証損失引当金戻入額、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-73270_ReversalOfProvisionForLossOnGuaranteesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_of_treasury_shares_by_increasing_of_entities_accounted_for_using_equity_method_ss(session: Session, head_item_key:str, context:str):
    """
    持分法適用の関連会社の増加に伴う自己株式の増加 、株主資本等変動計算書
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-73370_IncreaseOfTreasurySharesByIncreasingOfEntitiesAccountedForUsingEquityMethodSS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_receivables_and_investments_in_leases_assets(session: Session, head_item_key:str, context:str):
    """
    リース債権及びリース投資資産、資産の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-73370_LeaseReceivablesAndInvestmentsInLeasesAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_stockshares_liabilities(session: Session, head_item_key:str, context:str):
    """
    株式給付引当金、負債の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-73370_ProvisionForStocksharesLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def retained_earnings_increased_sales_associated_with_a_increase_in_equity_method_affiliates_ss(session: Session, head_item_key:str, context:str):
    """
    持分法適用の関連会社の増加に伴う利益剰余金の増加、株主資本等変動計算書
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-73370_RetainedEarningsIncreasedSalesAssociatedWithAIncreaseInEquityMethodAffiliatesSS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revaluation_reserve_for_land_changes_of_items_during_period(session: Session, head_item_key:str, context:str):
    """
    土地再評価差額金取崩額、当期変動額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-73370_RevaluationReserveForLandChangesOfItemsDuringPeriod',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_decrease_increase_in_margin_for_central_counterparty_ope_cf(session: Session, head_item_key:str, context:str):
    """
    中央清算機関差入証拠金の純増（△）減、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-73500_NetDecreaseIncreaseInMarginForCentralCounterpartyOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_based_compensation_liabilities(session: Session, head_item_key:str, context:str):
    """
    株式報酬引当金、負債の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-73500_ProvisionForShareBasedCompensationLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_shere_based_compensation_ope_cf(session: Session, head_item_key:str, context:str):
    """
    株式報酬引当金の増減（△）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-73500_ProvisionForShereBasedCompensationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def retirement_of_treasury_stock_changes_during_period(session: Session, head_item_key:str, context:str):
    """
    自己株式の消却、当期変動額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-73500_RetirementOfTreasuryStockChangesDuringPeriod',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_property_plant_and_equipment_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有形固定資産売却益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-73990_GainOnSalesOfPropertyPlantAndEquipmentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sales_and_retirement_of_property_plant_and_equipment_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有形固定資産除売却損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-73990_LossOnSalesAndRetirementOfPropertyPlantAndEquipmentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_cession_of_an_obligation_noe(session: Session, head_item_key:str, context:str):
    """
    売掛債権譲渡損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-74080_LossOnCessionOfAnObligationNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_compensation_ncl(session: Session, head_item_key:str, context:str):
    """
    損害補償損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-74080_ProvisionForCompensationNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def vending_machines_income_noi(session: Session, head_item_key:str, context:str):
    """
    自動販売機収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-74210_VendingMachinesIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_bad_loans_ope_cf(session: Session, head_item_key:str, context:str):
    """
    固定化債権の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-74600_DecreaseIncreaseInBadLoansOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sale_of_securities_of_other_subsidiaries_and_associates_ei(session: Session, head_item_key:str, context:str):
    """
    その他の関係会社有価証券売却益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-77340_GainOnSaleOfSecuritiesOfOtherSubsidiariesAndAssociatesEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sale_of_securities_of_other_subsidiaries_and_associates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他の関係会社有価証券売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-77340_LossGainOnSaleOfSecuritiesOfOtherSubsidiariesAndAssociatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sale_of_securities_of_other_subsidiaries_and_associates_inv_cf(session: Session, head_item_key:str, context:str):
    """
    その他の関係会社有価証券の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-77340_ProceedsFromSaleOfSecuritiesOfOtherSubsidiariesAndAssociatesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accrued_retirement_benefits_for_directors_ncl(session: Session, head_item_key:str, context:str):
    """
    未払役員退職慰労金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-78570_AccruedRetirementBenefitsForDirectorsNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def investment_advisory_fee_noe(session: Session, head_item_key:str, context:str):
    """
    投資顧問料、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-78570_InvestmentAdvisoryFeeNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def demolition_and_removal_costs_el(session: Session, head_item_key:str, context:str):
    """
    解体撤去費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-78680_DemolitionAndRemovalCostsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def demolition_and_removal_costs_ope_cf(session: Session, head_item_key:str, context:str):
    """
    解体撤去費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-78680_DemolitionAndRemovalCostsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def expenses_for_demolition_and_removal_costs_inv_cf(session: Session, head_item_key:str, context:str):
    """
    解体撤去費用の支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-78680_ExpensesForDemolitionAndRemovalCostsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sale_of_investment_in_affiliated_inv_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社出資金売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-78680_GainOnSaleOfInvestmentInAffiliatedInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sale_of_investments_in_capital_of_subsidiaries_and_associates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社出資金売却益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-78680_GainOnSaleOfInvestmentsInCapitalOfSubsidiariesAndAssociatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def special_survey_costs_etc_ope_cf(session: Session, head_item_key:str, context:str):
    """
    特別調査費用等、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-78680_SpecialSurveyCostsEtcOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def land_use_right_ia(session: Session, head_item_key:str, context:str):
    """
    土地使用権、無形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-78770_LandUseRightIA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def national_subsidies_ope_cf(session: Session, head_item_key:str, context:str):
    """
    国庫補助金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-79060_NationalSubsidiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_net_defined_benefit_asset_and_lability_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る資産及び負債の増減額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-79140_IncreaseDecreaseInNetDefinedBenefitAssetAndLabilityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_loss_on_anti_monopoly_act_ope_cf(session: Session, head_item_key:str, context:str):
    """
    独占禁止法関連損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-79140_IncreaseDecreaseInProvisionForLossOnAntiMonopolyActOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_product_defect_compensation_ope_cf(session: Session, head_item_key:str, context:str):
    """
    製品補償引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-79140_IncreaseDecreaseInProvisionForProductDefectCompensationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_product_compensation_el(session: Session, head_item_key:str, context:str):
    """
    製品補償引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-79140_ProvisionForProductCompensationEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_product_defect_compensation_ncl(session: Session, head_item_key:str, context:str):
    """
    製品補償引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-79140_ProvisionForProductDefectCompensationNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_for_damage_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    受取損害賠償金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-79460_CompensationForDamageIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_for_damage_income_received_ope_cf_fin_cf(session: Session, head_item_key:str, context:str):
    """
    受取損害賠償金の受領額、営業活動によるキャッシュ・フロー又は投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-79460_CompensationForDamageIncomeReceivedOpeCFFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_awards_for_employees_ncl(session: Session, head_item_key:str, context:str):
    """
    従業員株式給付引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-79580_ProvisionForShareAwardsForEmployeesNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_taxes_related_expenses_cl(session: Session, head_item_key:str, context:str):
    """
    租税関連費用引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-79580_ProvisionForTaxesRelatedExpensesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def miscellaneous_expenses_of_assets_for_rent_noe(session: Session, head_item_key:str, context:str):
    """
    貸与資産諸費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-79870_MiscellaneousExpensesOfAssetsForRentNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def paid_amount_of_bonus_for_directors_ope_cf(session: Session, head_item_key:str, context:str):
    """
    役員賞与の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80180_PaidAmountOfBonusForDirectorsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def right_of_use_assets_net_ppe(session: Session, head_item_key:str, context:str):
    """
    使用権資産（純額）、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80180_RightOfUseAssetsNetPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def incease_decrease_in_net_defined_benefit_asset_and_liability_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る資産及び負債の増減額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80220_InceaseDecreaseInNetDefinedBenefitAssetAndLiabilityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def intersegment_revenue_and_transfers(session: Session, head_item_key:str, context:str):
    """
    セグメント間の内部売上収益又は振替高
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80320_IntersegmentRevenueAndTransfers',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def revenue_from_external_customers(session: Session, head_item_key:str, context:str):
    """
    外部顧客への売上収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80320_RevenueFromExternalCustomers',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_investment_securities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    投資有価証券売却益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80780_GainOnSalesOfInvestmentSecuritiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_sales_of_investments_in_capital_of_subsidiaries_and_associates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社出資金売却益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80780_GainOnSalesOfInvestmentsInCapitalOfSubsidiariesAndAssociatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_retirement_benefit_asset_or_liability_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る資産又は負債の増減額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80780_IncreaseDecreaseInRetirementBenefitAssetOrLiabilityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_sales_of_investment_in_capital_of_subsidiaries_and_associates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社出資金売却損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80860_LossGainOnSalesOfInvestmentInCapitalOfSubsidiariesAndAssociatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_product_recall_el(session: Session, head_item_key:str, context:str):
    """
    製品回収関連損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80860_LossOnProductRecallEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sale_of_investment_in_affiliated_companies_el(session: Session, head_item_key:str, context:str):
    """
    関係会社出資金売却損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80860_LossOnSaleOfInvestmentInAffiliatedCompaniesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_sales_of_investments_in_capital_of_subsidiaries_resulting_in_change_in_scope_of_consolidation_inv_cf(session: Session, head_item_key:str, context:str):
    """
    連結の範囲の変更を伴う子会社出資金の売却による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80860_PaymentsForSalesOfInvestmentsInCapitalOfSubsidiariesResultingInChangeInScopeOfConsolidationInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_governmental_subsideies_for_investment_in_property_and_equipment_inv_cf(session: Session, head_item_key:str, context:str):
    """
    設備投資助成金の受入による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80860_ProceedsFromGovernmentalSubsideiesForInvestmentInPropertyAndEquipmentInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def puschase_of_stocks_of_affiliates_inv_cf(session: Session, head_item_key:str, context:str):
    """
    関連会社株式の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80860_PuschaseOfStocksOfAffiliatesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def state_subsidy_ope_cf(session: Session, head_item_key:str, context:str):
    """
    国庫補助金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80860_StateSubsidyOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_cancellation_of_lease_obligations_ei(session: Session, head_item_key:str, context:str):
    """
    リース債務解約益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80910_GainOnCancellationOfLeaseObligationsEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_forgiveness_of_lease_obligations_ope_cf(session: Session, head_item_key:str, context:str):
    """
    リース債務解約益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80910_GainOnForgivenessOfLeaseObligationsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_guarantee_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    差入保証金の増減額（△は増加）、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80930_DecreaseIncreaseInGuaranteeDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def restoration_cost_ope_cf(session: Session, head_item_key:str, context:str):
    """
    原状回復費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80930_RestorationCostOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def restoration_costs_el(session: Session, head_item_key:str, context:str):
    """
    原状回復費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-80930_RestorationCostsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_liquidation_of_subsidiaries_and_associates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社清算益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-81070_GainOnLiquidationOfSubsidiariesAndAssociatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_deposits_for_purchase_of_treasury_shares_fin_cf(session: Session, head_item_key:str, context:str):
    """
    自己株式取得のための預託金の増減額(△は増加)、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-81290_DecreaseIncreaseInDepositsForPurchaseOfTreasurySharesFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def exepences_before_deduction_of_temporary_consumption_tax_payment_sga(session: Session, head_item_key:str, context:str):
    """
    仮払消費税の未控除費用、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-81290_ExepencesBeforeDeductionOfTemporaryConsumptionTaxPaymentSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_anti_monopoly_act_ncl(session: Session, head_item_key:str, context:str):
    """
    独占禁止法関連損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-81290_ProvisionForLossOnAntiMonopolyActNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_derivatives_trading_noe(session: Session, head_item_key:str, context:str):
    """
    デリバティブ損失、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-81310_LossOnDerivativesTradingNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def advesory_cost(session: Session, head_item_key:str, context:str):
    """
    アドバイザリー費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-81390_AdvesoryCost',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_cancellation_of_lease_agreements_noe(session: Session, head_item_key:str, context:str):
    """
    差入保証金・敷金解約損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-82140_LossOnCancellationOfLeaseAgreementsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_decrease_increase_in_trust_beneficiary_right_inv_cf(session: Session, head_item_key:str, context:str):
    """
    信託受益権の純増減額（△は増加）、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-82140_NetDecreaseIncreaseInTrustBeneficiaryRightInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def received_settlement_fee_ei(session: Session, head_item_key:str, context:str):
    """
    受取解決金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-82140_ReceivedSettlementFeeEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def received_settlement_fee_ope_cf(session: Session, head_item_key:str, context:str):
    """
    受取解決金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-82140_ReceivedSettlementFeeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def the_receipt_of_settlement_fee_ope_cf(session: Session, head_item_key:str, context:str):
    """
    解決金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-82140_TheReceiptOfSettlementFeeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commission_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    業務受託費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-82810_CommissionExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_sale_of_non_current_assets_open_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産売却損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-82810_LossOnSaleOfNonCurrentAssetsOpenCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_executive_officers_retirement_benefits(session: Session, head_item_key:str, context:str):
    """
    執行役員退職慰労引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-83380_ProvisionForExecutiveOfficersRetirementBenefits',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_stocks_payment_liabilities(session: Session, head_item_key:str, context:str):
    """
    株式給付引当金、負債の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-83410_ProvisionForStocksPaymentLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_based_remuneration(session: Session, head_item_key:str, context:str):
    """
    株式給付引当金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-83430_ProvisionForShareBasedRemuneration',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_by_share_exchanges_changes_of_items_during_period(session: Session, head_item_key:str, context:str):
    """
    株式交換による増加、当期変動額
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-83590_IncreaseByShareExchangesChangesOfItemsDuringPeriod',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_cancellation_of_system_contracts_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    システム解約損失引当金、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-83590_ProvisionForLossOnCancellationOfSystemContractsLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_cancellation_of_system_contracts_liabilities(session: Session, head_item_key:str, context:str):
    """
    システム解約損失引当金、負債の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-83640_ProvisionForLossOnCancellationOfSystemContractsLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_provision_for_loss_on_cancellation_of_system_contracts_ei(session: Session, head_item_key:str, context:str):
    """
    システム解約損失引当金戻入益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-83640_ReversalOfProvisionForLossOnCancellationOfSystemContractsEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def transfer_to_other_capital_surplus_from_retained_earnings_brought_forward(session: Session, head_item_key:str, context:str):
    """
    繰越利益剰余金からその他資本剰余金への振替
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-83650_TransferToOtherCapitalSurplusFromRetainedEarningsBroughtForward',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_reserve_for_cancellation_of_shares(session: Session, head_item_key:str, context:str):
    """
    株式消却積立金の積立
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-83880_ProvisionOfReserveForCancellationOfShares',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_cancellation_of_shares(session: Session, head_item_key:str, context:str):
    """
    株式消却積立金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-83880_ReserveForCancellationOfShares',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def balance_at_the_beginning_of_the_period_after_retroactive_processing(session: Session, head_item_key:str, context:str):
    """
    遡及処理後当期首残高
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-83950_BalanceAtTheBeginningOfThePeriodAfterRetroactiveProcessing',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def atm_placement_fee_expenses_oebnk(session: Session, head_item_key:str, context:str):
    """
    ＡＴＭ設置支払手数料、経常費用、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_ATMPlacementFeeExpensesOEBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def atm_related_fee_expenses_oebnk(session: Session, head_item_key:str, context:str):
    """
    ＡＴＭ支払手数料、経常費用、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_ATMRelatedFeeExpensesOEBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def atm_related_fee_income_oibnk(session: Session, head_item_key:str, context:str):
    """
    ＡＴＭ受入手数料、経常収益、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_ATMRelatedFeeIncomeOIBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def atm_related_temporary_advances_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    ＡＴＭ仮受金、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_ATMRelatedTemporaryAdvancesLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def atm_related_temporary_payments_assets_bnk(session: Session, head_item_key:str, context:str):
    """
    ＡＴＭ仮払金、資産の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_ATMRelatedTemporaryPaymentsAssetsBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_payable_for_credit_card_business_liabilities(session: Session, head_item_key:str, context:str):
    """
    クレジットカード事業未払金、負債の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_AccountsPayableForCreditCardBusinessLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_members_assets(session: Session, head_item_key:str, context:str):
    """
    会員未収金、資産の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_AccountsReceivableMembersAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def credit_card_operating_expense_oebnk(session: Session, head_item_key:str, context:str):
    """
    クレジットカード業務経費、経常費用、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_CreditCardOperatingExpenseOEBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def credit_card_operating_income_oibnk(session: Session, head_item_key:str, context:str):
    """
    クレジットカード営業収入、経常収益、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_CreditCardOperatingIncomeOIBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_of_capital_surplus_by_change_of_share_to_consolidated_subsidiary(session: Session, head_item_key:str, context:str):
    """
    連結子会社に対する持分変動に伴う資本剰余金の増減
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_DecreaseIncreaseOfCapitalSurplusByChangeOfShareToConsolidatedSubsidiary',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deposits_for_electronic_money_liabilities(session: Session, head_item_key:str, context:str):
    """
    電子マネー預り金、負債の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_DepositsForElectronicMoneyLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def electronic_money_operating_expense_oebnk(session: Session, head_item_key:str, context:str):
    """
    電子マネー業務経費、経常費用、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_ElectronicMoneyOperatingExpenseOEBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def electronic_money_operating_income_oibnk(session: Session, head_item_key:str, context:str):
    """
    電子マネー営業収入、経常収益、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_ElectronicMoneyOperatingIncomeOIBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def fluctuation_resulting_from_exclusion_of_equity_method_affiliates(session: Session, head_item_key:str, context:str):
    """
    持分法適用会社の減少に伴う変動
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_FluctuationResultingFromExclusionOfEquityMethodAffiliates',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_expenses_segment_information(session: Session, head_item_key:str, context:str):
    """
    資金調達費用、セグメント情報
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_InterestExpensesSegmentInformation',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_income_segment_information(session: Session, head_item_key:str, context:str):
    """
    資金運用収益、セグメント情報
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_InterestIncomeSegmentInformation',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_stocks_payment_liabilities(session: Session, head_item_key:str, context:str):
    """
    株式給付引当金、負債の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84100_ReserveForStocksPaymentLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_employee_stock_ownership_plan_trust_liabilities(session: Session, head_item_key:str, context:str):
    """
    従業員株式給付引当金、負債の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84180_ProvisionForEmployeeStockOwnershipPlanTrustLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_management_board_benefit_trust_liabilities(session: Session, head_item_key:str, context:str):
    """
    役員株式給付引当金、負債の部
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84180_ProvisionForManagementBoardBenefitTrustLiabilities',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def distributions_of_loss_on_silent_partnerships_noe(session: Session, head_item_key:str, context:str):
    """
    匿名組合損益分配額、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84240_DistributionsOfLossOnSilentPartnershipsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_operating_assets_ppe(session: Session, head_item_key:str, context:str):
    """
    その他の営業資産、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84240_OtherOperatingAssetsPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_automobile_inspection_costs_ncl(session: Session, head_item_key:str, context:str):
    """
    メンテナンス引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84240_ProvisionForAutomobileInspectionCostsNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def operating_loan_receivables_ca(session: Session, head_item_key:str, context:str):
    """
    営業貸付債権、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84390_OperatingLoanReceivablesCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_operating_assets_ppelea(session: Session, head_item_key:str, context:str):
    """
    その他の営業資産、有形固定資産、リース事業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84390_OtherOperatingAssetsPPELEA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_car_maintenance_ncl(session: Session, head_item_key:str, context:str):
    """
    メンテナンス引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-84390_ReserveForCarMaintenanceNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commission_fee_rev_oa(session: Session, head_item_key:str, context:str):
    """
    受取手数料、営業活動による収益の内訳
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-85150_CommissionFeeRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_operational_guarantee_deposits_ope_cf(session: Session, head_item_key:str, context:str):
    """
    営業保証金等の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-85150_DecreaseIncreaseInOperationalGuaranteeDepositsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_other_operating_debentures_ope_cf(session: Session, head_item_key:str, context:str):
    """
    その他営業債権の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-85150_DecreaseIncreaseInOtherOperatingDebenturesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_purchased_receivables_ope_cf(session: Session, head_item_key:str, context:str):
    """
    買取債権の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-85150_DecreaseIncreaseInPurchasedReceivablesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_reserve_for_insurance_policy_liabilities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    保険契約準備金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-85150_IncreaseDecreaseInReserveForInsurancePolicyLiabilitiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_expenses_cos_exp_oa(session: Session, head_item_key:str, context:str):
    """
    保険費用、営業活動による費用・売上原価の内訳
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-85150_InsuranceExpensesCOSExpOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def insurance_revenue_rev_oa(session: Session, head_item_key:str, context:str):
    """
    保険収益、営業活動による収益の内訳
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-85150_InsuranceRevenueRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def other_operating_debentures_ca(session: Session, head_item_key:str, context:str):
    """
    その他営業債権、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-85150_OtherOperatingDebenturesCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_management_board_benefit_trust_liabilities_bnk(session: Session, head_item_key:str, context:str):
    """
    役員株式給付引当金、負債の部、銀行業
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-85500_ProvisionForManagementBoardBenefitTrustLiabilitiesBNK',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_futures_transaction_margin_customer_ope_cf(session: Session, head_item_key:str, context:str):
    """
    委託者先物取引差金の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-87420_DecreaseIncreaseInFuturesTransactionMarginCustomerOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def equity_investments_in_properties_for_sale_ca(session: Session, head_item_key:str, context:str):
    """
    営業出資金、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88010_EquityInvestmentsInPropertiesForSaleCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def land_held_for_development_ca(session: Session, head_item_key:str, context:str):
    """
    開発用土地、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88010_LandHeldForDevelopmentCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_non_recourse_loans_ncl(session: Session, head_item_key:str, context:str):
    """
    ノンリコース長期借入金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88010_LongTermNonRecourseLoansNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def non_recourse_bonds_due_within_one_year_cl(session: Session, head_item_key:str, context:str):
    """
    ノンリコース１年内償還予定の社債、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88010_NonRecourseBondsDueWithinOneYearCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def non_recourse_bonds_ncl(session: Session, head_item_key:str, context:str):
    """
    ノンリコース社債、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88010_NonRecourseBondsNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_equity_transactions_with_non_controlling_shareholder_fin_cf(session: Session, head_item_key:str, context:str):
    """
    非支配株主との資本取引による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88010_PaymentsForEquityTransactionsWithNonControllingShareholderFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_lease_and_guarantee_deposits_received_inv_cf(session: Session, head_item_key:str, context:str):
    """
    預り敷金保証金の受入による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88010_ProceedsFromLeaseAndGuaranteeDepositsReceivedInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayments_of_lease_and_guarantee_deposits_received_inv_cf(session: Session, head_item_key:str, context:str):
    """
    預り敷金保証金の返還による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88010_RepaymentsOfLeaseAndGuaranteeDepositsReceivedInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def short_term_non_recourse_loans_cl(session: Session, head_item_key:str, context:str):
    """
    ノンリコース短期借入金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88010_ShortTermNonRecourseLoansCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_portion_of_long_term_non_recourse_loans_payable_cl(session: Session, head_item_key:str, context:str):
    """
    ノンリコース1年内返済予定長期借入金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88300_CurrentPortionOfLongTermNonRecourseLoansPayableCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_portion_of_non_recourse_bonds_cl(session: Session, head_item_key:str, context:str):
    """
    ノンリコース1年内償還予定社債、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88300_CurrentPortionOfNonRecourseBondsCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def lease_and_guarantee_deposited_ncl(session: Session, head_item_key:str, context:str):
    """
    預り敷金及び保証金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88300_LeaseAndGuaranteeDepositedNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_non_recourse_loans_payable_ncl(session: Session, head_item_key:str, context:str):
    """
    ノンリコース長期借入金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88300_LongTermNonRecourseLoansPayableNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def non_recourese_bonds_payable_ncl(session: Session, head_item_key:str, context:str):
    """
    ノンリコース社債、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88300_NonRecoureseBondsPayableNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayment_of_long_term_non_recourse_loans_payable_fin_cf(session: Session, head_item_key:str, context:str):
    """
    ノンリコース長期借入金の返済による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88300_RepaymentOfLongTermNonRecourseLoansPayableFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deposits_received_from_real_estate_specified_joint_enterprise_investment(session: Session, head_item_key:str, context:str):
    """
    不動産特定共同事業出資受入金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88440_DepositsReceivedFromRealEstateSpecifiedJointEnterpriseInvestment',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deposits_received_from_real_estate_specified_joint_enterprise_investment_ncl(session: Session, head_item_key:str, context:str):
    """
    不動産特定共同事業出資受入金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88440_DepositsReceivedFromRealEstateSpecifiedJointEnterpriseInvestmentNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payables_under_fluidity_receivables_cl(session: Session, head_item_key:str, context:str):
    """
    債権流動化債務、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88440_PayablesUnderFluidityReceivablesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_deposits_received_from_real_estate_specified_joint_enterprise_investment_fin_cf(session: Session, head_item_key:str, context:str):
    """
    不動産特定共同事業出資受入による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88440_ProceedsFromDepositsReceivedFromRealEstateSpecifiedJointEnterpriseInvestmentFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayments_of_distribution_received_from_real_estate_specified_joint_enterprise_investment_fin_cf(session: Session, head_item_key:str, context:str):
    """
    不動産特定共同事業出資返還による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88440_RepaymentsOfDistributionReceivedFromRealEstateSpecifiedJointEnterpriseInvestmentFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_related_to_repair_work_el(session: Session, head_item_key:str, context:str):
    """
    補修工事関連損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88480_LossOnRelatedToRepairWorkEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_related_to_repair_work_ope_cf(session: Session, head_item_key:str, context:str):
    """
    補修工事関連損失、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88480_LossOnRelatedToRepairWorkOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payment_for_related_to_repair_work_ope_cf(session: Session, head_item_key:str, context:str):
    """
    補修工事関連支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88480_PaymentForRelatedToRepairWorkOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reversal_of_provision_for_loss_on_related_to_repair_work_ope_cf(session: Session, head_item_key:str, context:str):
    """
    補修工事関連損失引当金戻入額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88480_ReversalOfProvisionForLossOnRelatedToRepairWorkOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_payable_trade_and_accounts_payable_for_construction_contracts_cl(session: Session, head_item_key:str, context:str):
    """
    買掛金及び工事未払金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88500_AccountsPayableTradeAndAccountsPayableForConstructionContractsCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_lease_business_ncl(session: Session, head_item_key:str, context:str):
    """
    賃貸事業損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88500_ProvisionForLossOnLeaseBusinessNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def benefits_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取給付金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88900_BenefitsIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def commission_for_a_financial_loan_noe(session: Session, head_item_key:str, context:str):
    """
    財務手数料、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88900_CommissionForAFinancialLoanNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_on_investments_in_silent_partnership_ope_cf(session: Session, head_item_key:str, context:str):
    """
    匿名組合出資金の増減額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88900_DecreaseIncreaseOnInvestmentsInSilentPartnershipOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_capital_reduction_with_compensation_of_subsidiaries_and_affiliates_ei(session: Session, head_item_key:str, context:str):
    """
    関係会社有償減資払戻差益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88900_GainOnCapitalReductionWithCompensationOfSubsidiariesAndAffiliatesEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_capital_reduction_with_compensation_of_subsidiaries_and_affiliates_ope_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社有償減資払戻差益、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88900_GainOnCapitalReductionWithCompensationOfSubsidiariesAndAffiliatesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_lease_deposits_received_ope_cf(session: Session, head_item_key:str, context:str):
    """
    預り敷金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88900_IncreaseDecreaseInLeaseDepositsReceivedOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_liquidation_of_subsidiaries_and_affiliates_investments_el(session: Session, head_item_key:str, context:str):
    """
    関係会社出資金清算損、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88900_LossOnLiquidationOfSubsidiariesAndAffiliatesInvestmentsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_liquidation_of_subsidiaries_and_affiliates_investments_ope_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社出資金清算損、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88900_LossOnLiquidationOfSubsidiariesAndAffiliatesInvestmentsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_capital_reduction_of_affiliated_company_stock_inv_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社株式の有償減資による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88900_ProceedsFromCapitalReductionOfAffiliatedCompanyStockInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_the_liquidation_of_subsidiaries_and_associates_inv_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社の清算による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-88900_ProceedsFromTheLiquidationOfSubsidiariesAndAssociatesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_cancellation_of_insurance_policies_noi(session: Session, head_item_key:str, context:str):
    """
    保険解約益、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-89950_GainOnCancellationOfInsurancePoliciesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_due_to_maturity_of_insurance_funds_inv_cf(session: Session, head_item_key:str, context:str):
    """
    保険積立金の返戻による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-89950_ProceedsDueToMaturityOfInsuranceFundsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def profit_loss_before_income_taxes_ope_cf(session: Session, head_item_key:str, context:str):
    """
    税金等調整前中間純利益又は税金等調整前中間純損失（△）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-89950_ProfitLossBeforeIncomeTaxesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def allowance_for_construction_loss_cl(session: Session, head_item_key:str, context:str):
    """
    工事損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90060_AllowanceForConstructionLossCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_uneamed_fares_ope_cf(session: Session, head_item_key:str, context:str):
    """
    前受運賃の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90060_IncreaseDecreaseInUneamedFaresOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_dismantling_of_fixed_assets_cl(session: Session, head_item_key:str, context:str):
    """
    解体費用引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90060_ProvisionForDismantlingOfFixedAssetsCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def reserve_for_dismantling_costs_ncl(session: Session, head_item_key:str, context:str):
    """
    解体費用引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90060_ReserveForDismantlingCostsNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def covid19_subsidies_noi(session: Session, head_item_key:str, context:str):
    """
    新型コロナウイルス感染症対策補助金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90450_COVID19SubsidiesNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_capital_reduction_of_affiliates_inv_cf(session: Session, head_item_key:str, context:str):
    """
    関係会社株式の有償減資による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90450_ProceedsFromCapitalReductionOfAffiliatesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_loss_on_liquidation_ope_cf(session: Session, head_item_key:str, context:str):
    """
    整理損失引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90480_IncreaseDecreaseInProvisionForLossOnLiquidationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_liquidation_cl(session: Session, head_item_key:str, context:str):
    """
    整理損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90480_ProvisionForLossOnLiquidationCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_liquidation_ncl(session: Session, head_item_key:str, context:str):
    """
    整理損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90480_ProvisionForLossOnLiquidationNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_redemption_of_gift_certificates_cl(session: Session, head_item_key:str, context:str):
    """
    商品券等引換引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90480_ProvisionForRedemptionOfGiftCertificatesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_return_of_subsidy_el(session: Session, head_item_key:str, context:str):
    """
    助成金返還引当金繰入額、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90480_ProvisionForReturnOfSubsidyEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trade_accounts_receivable_and_contract_assets_ca(session: Session, head_item_key:str, context:str):
    """
    営業未収入金及び契約資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90670_TradeAccountsReceivableAndContractAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_retirement_benefits_asset_and_liability_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る資産及び負債の増減額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90720_IncreaseDecreaseInRetirementBenefitsAssetAndLiabilityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accumulated_depreciation_machinery_equipment_and_tools_furniture_and_fixtures_ppe(session: Session, head_item_key:str, context:str):
    """
    減価償却累計額、機械装置及び工具器具備品、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90830_AccumulatedDepreciationMachineryEquipmentAndToolsFurnitureAndFixturesPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def machinery_equipment_and_tools_furniture_and_fixtures_net_ppe(session: Session, head_item_key:str, context:str):
    """
    機械装置及び工具器具備品（純額）、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90830_MachineryEquipmentAndToolsFurnitureAndFixturesNetPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def machinery_equipment_and_tools_furniture_and_fixtures_ppe(session: Session, head_item_key:str, context:str):
    """
    機械装置及び工具器具備品、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90830_MachineryEquipmentAndToolsFurnitureAndFixturesPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_business_of_subsidiaries_and_associates_noe(session: Session, head_item_key:str, context:str):
    """
    関係会社事業損失引当金繰入額、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90830_ProvisionForLossOnBusinessOfSubsidiariesAndAssociatesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_allowance_for_doubtful_accounts_for_subsidiaries_and_associates_noe(session: Session, head_item_key:str, context:str):
    """
    関係会社貸倒引当金繰入額、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90830_ProvisionOfAllowanceForDoubtfulAccountsForSubsidiariesAndAssociatesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subsidies_for_bus_ei(session: Session, head_item_key:str, context:str):
    """
    車両等購入補助金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-90830_SubsidiesForBusEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_and_accounts_receivable_trade_and_contract_assets_ca(session: Session, head_item_key:str, context:str):
    """
    受取手形、営業未収金及び契約資産、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-91430_NotesAndAccountsReceivableTradeAndContractAssetsCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_accruned_consumption_tax_refund_ope_cf(session: Session, head_item_key:str, context:str):
    """
    未収還付消費税の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-91710_DecreaseIncreaseAccrunedConsumptionTaxRefundOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_long_term_accounts_payable_other_fin_cf(session: Session, head_item_key:str, context:str):
    """
    長期未払金の増加による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-91710_ProceedsFromLongTermAccountsPayableOtherFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def depreciation_cos(session: Session, head_item_key:str, context:str):
    """
    減価償却費、売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93020_DepreciationCOS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def direct_operation_expense_cos(session: Session, head_item_key:str, context:str):
    """
    作業直接費、売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93020_DirectOperationExpenseCOS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_and_operation_accounts_receivable_trade_and_contract_assets(session: Session, head_item_key:str, context:str):
    """
    受取手形、営業未収金及び契約資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93020_NotesAndOperationAccountsReceivableTradeAndContractAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def port_terminal_operation_rev_oa(session: Session, head_item_key:str, context:str):
    """
    港湾作業料、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93020_PortTerminalOperationRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_expenses_cos(session: Session, head_item_key:str, context:str):
    """
    賃借料、売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93020_RentExpensesCOS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def salaries_and_allowances_cos(session: Session, head_item_key:str, context:str):
    """
    給料及び手当、売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93020_SalariesAndAllowancesCOS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def expenses_related_to_the100th_anniversary_of_foundation_el(session: Session, head_item_key:str, context:str):
    """
    創業100周年記念関連費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93050_ExpensesRelatedToThe100thAnniversaryOfFoundationEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def buildings_and_structures_in_trust_net(session: Session, head_item_key:str, context:str):
    """
    信託建物及び信託構築物（純額）
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93080_BuildingsAndStructuresInTrustNet',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_deferred_and_prepaid_expenses_ope_cf(session: Session, head_item_key:str, context:str):
    """
    繰延及び前払費用の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93080_DecreaseIncreaseInDeferredAndPrepaidExpensesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_notes_and_accounts_receivable_contract_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    契約資産の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93080_DecreaseIncreaseInNotesAndAccountsReceivableContractAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_sale_of_goods_noe(session: Session, head_item_key:str, context:str):
    """
    物品売却費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93360_CostOfSaleOfGoodsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_deposits_pledged_as_collateral_inv_cf(session: Session, head_item_key:str, context:str):
    """
    担保に供している預金の増減額（△は増加）、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93360_DecreaseIncreaseInDepositsPledgedAsCollateralInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def landfills_net_ppe(session: Session, head_item_key:str, context:str):
    """
    最終処分場（純額）、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93360_LandfillsNetPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_gain_on_valuation_of_currency_swaps_ope_cf(session: Session, head_item_key:str, context:str):
    """
    通貨スワップ評価損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93360_LossGainOnValuationOfCurrencySwapsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_on_sales_of_goods_noi(session: Session, head_item_key:str, context:str):
    """
    物品売却収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93360_ProceedsOnSalesOfGoodsNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_of_allowance_for_doubtful_accounts_of_golf_club_membership_noe(session: Session, head_item_key:str, context:str):
    """
    ゴルフ会員権貸倒引当金繰入額、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93550_ProvisionOfAllowanceForDoubtfulAccountsOfGolfClubMembershipNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def trade_notes_and_accounts_receivable_trade_and_contract_assets(session: Session, head_item_key:str, context:str):
    """
    受取手形、営業未収入金及び契約資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-93550_TradeNotesAndAccountsReceivableTradeAndContractAssets',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_removal_expenses_of_non_current_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産撤去費用引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-94010_IncreaseDecreaseInProvisionForRemovalExpensesOfNonCurrentAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def program_rights_and_work_in_process(session: Session, head_item_key:str, context:str):
    """
    番組及び仕掛品
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-94010_ProgramRightsAndWorkInProcess',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def removal_expenses_of_non_current_assets_el(session: Session, head_item_key:str, context:str):
    """
    固定資産撤去費、 特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-94010_RemovalExpensesOfNonCurrentAssetsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_gas_appliance_warranties_ncl(session: Session, head_item_key:str, context:str):
    """
    器具保証引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-95350_ProvisionForGasApplianceWarrantiesNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def allowance_for_withdrawal_of_business_ncl(session: Session, head_item_key:str, context:str):
    """
    事業撤退損失引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-96160_AllowanceForWithdrawalOfBusinessNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_withdrawal_of_business_el(session: Session, head_item_key:str, context:str):
    """
    事業撤退損失、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-96160_LossOnWithdrawalOfBusinessEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_withdrawal_of_business_ope_cf(session: Session, head_item_key:str, context:str):
    """
    事業撤退損失、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-96160_LossOnWithdrawalOfBusinessOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def business_restructuring_expenses_noe(session: Session, head_item_key:str, context:str):
    """
    事業構造改善費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-96840_BusinessRestructuringExpensesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def content_production_account_ca(session: Session, head_item_key:str, context:str):
    """
    コンテンツ制作勘定、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-96840_ContentProductionAccountCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_office_relocation_ncl(session: Session, head_item_key:str, context:str):
    """
    事務所退去費用引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-96840_ProvisionForOfficeRelocationNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def relocation_related_costs_noe(session: Session, head_item_key:str, context:str):
    """
    移転関連費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-96840_RelocationRelatedCostsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cost_of_food_and_beverage_cos(session: Session, head_item_key:str, context:str):
    """
    飲食売上原価、売上原価
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97060_CostOfFoodAndBeverageCOS',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def facility_rent_income_rev_oa(session: Session, head_item_key:str, context:str):
    """
    施設利用料収入、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97060_FacilityRentIncomeRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def office_shop_rent_income_rev_oa(session: Session, head_item_key:str, context:str):
    """
    家賃収入、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97060_OfficeShopRentIncomeRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def sales_of_food_and_beverage_rev_oa(session: Session, head_item_key:str, context:str):
    """
    飲食売上高、営業活動による収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97060_SalesOfFoodAndBeverageRevOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_income_of_real_estate_noi(session: Session, head_item_key:str, context:str):
    """
    不動産賃貸収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97290_RentIncomeOfRealEstateNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def acquisitions_of_subsidiaries_accompanied_with_change_in_scope_of_consolidation_inv_cf(session: Session, head_item_key:str, context:str):
    """
    連結の範囲の変更を伴う子会社株式の取得、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_AcquisitionsOfSubsidiariesAccompaniedWithChangeInScopeOfConsolidationInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def call_loan_ca(session: Session, head_item_key:str, context:str):
    """
    コールローン、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_CallLoanCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cash_deposits_for_cash_collection_and_deposit_services_ca(session: Session, head_item_key:str, context:str):
    """
    現金護送業務用現金及び預金、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_CashDepositsForCashCollectionAndDepositServicesCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def damage_insurance_claim_gain_ei(session: Session, head_item_key:str, context:str):
    """
    受取損害保険金、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_DamageInsuranceClaimGainEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def damage_insurance_claim_gain_ope_cf(session: Session, head_item_key:str, context:str):
    """
    受取損害保険金、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_DamageInsuranceClaimGainOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_investment_deposits_by_policyholders_unearned_premiums_and_other_insurance_liabilities_ope_cf(session: Session, head_item_key:str, context:str):
    """
    保険契約準備金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_DecreaseIncreaseInInvestmentDepositsByPolicyholdersUnearnedPremiumsAndOtherInsuranceLiabilitiesOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_net_defined_benefit_asset_and_liability_ope_cf(session: Session, head_item_key:str, context:str):
    """
    退職給付に係る負債及び資産の増減額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_DecreaseIncreaseInNetDefinedBenefitAssetAndLiabilityOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deferred_revenue_cl(session: Session, head_item_key:str, context:str):
    """
    前受契約料、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_DeferredRevenueCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def deposits_received_for_cash_collection_and_deposit_services_cl(session: Session, head_item_key:str, context:str):
    """
    現金護送業務用預り金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_DepositsReceivedForCashCollectionAndDepositServicesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def dismantlement_expenses_el(session: Session, head_item_key:str, context:str):
    """
    解体撤去費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_DismantlementExpensesEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def due_from_subscribers_ca(session: Session, head_item_key:str, context:str):
    """
    未収契約料、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_DueFromSubscribersCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def gain_on_reversal_of_allowance_for_doubtful_accounts_ei(session: Session, head_item_key:str, context:str):
    """
    貸倒引当金戻入益、特別利益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_GainOnReversalOfAllowanceForDoubtfulAccountsEI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_cash_deposits_for_cash_collection_and_deposit_services_and_deposits_received_ope_cf(session: Session, head_item_key:str, context:str):
    """
    現金護送業務用現金預金及び預り金の増減額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_IncreaseDecreaseInCashDepositsForCashCollectionAndDepositServicesAndDepositsReceivedOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_deferred_revenue_ope_cf(session: Session, head_item_key:str, context:str):
    """
    前受契約料の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_IncreaseDecreaseInDeferredRevenueOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_deferred_revenue_ncl(session: Session, head_item_key:str, context:str):
    """
    長期前受契約料、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_LongTermDeferredRevenueNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_disposal_of_fixed_assets_noe(session: Session, head_item_key:str, context:str):
    """
    固定資産売却廃棄損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_LossOnDisposalOfFixedAssetsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_loss_gain_on_sales_and_disposal_of_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    固定資産売却損益及び廃棄損益（△は益）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_NetLossGainOnSalesAndDisposalOfAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_sales_of_shares_of_subsidiaries_resulting_in_change_in_scope_of_consolidation(session: Session, head_item_key:str, context:str):
    """
    連結の範囲の変更を伴う子会社株式の売却
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_PaymentsForSalesOfSharesOfSubsidiariesResultingInChangeInScopeOfConsolidation',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_damage_insurance_income_ope_cf(session: Session, head_item_key:str, context:str):
    """
    損害保険金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_ProceedsFromDamageInsuranceIncomeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_stocks_of_affiliates_inv_cf(session: Session, head_item_key:str, context:str):
    """
    関連会社株式の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_PurchaseOfStocksOfAffiliatesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def security_equipment_and_control_stations_net_ppe(session: Session, head_item_key:str, context:str):
    """
    警報機器及び設備（純額）、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97350_SecurityEquipmentAndControlStationsNetPPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def long_term_lease_and_guarantee_deposits_ncl(session: Session, head_item_key:str, context:str):
    """
    預り敷金保証金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97600_LongTermLeaseAndGuaranteeDepositsNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_cancellation_of_rental_contracts_noe(session: Session, head_item_key:str, context:str):
    """
    賃貸借解約損、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97600_LossOnCancellationOfRentalContractsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def settlement_money_noe(session: Session, head_item_key:str, context:str):
    """
    解決金、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97600_SettlementMoneyNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def construction_material_ca(session: Session, head_item_key:str, context:str):
    """
    建設機材、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97630_ConstructionMaterialCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def subsidy_refund_amount_noe(session: Session, head_item_key:str, context:str):
    """
    助成金返還額、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97760_SubsidyRefundAmountNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_disaster_ope_cf(session: Session, head_item_key:str, context:str):
    """
    災害損失引当金繰入額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-97900_ProvisionForLossOnDisasterOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_payable_for_construction_contracts(session: Session, head_item_key:str, context:str):
    """
    工事未払金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-98310_AccountsPayableForConstructionContracts',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def accounts_receivable_from_completed_construction_contracts(session: Session, head_item_key:str, context:str):
    """
    完成工事未収入金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-98310_AccountsReceivableFromCompletedConstructionContracts',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def advances_received_on_construction_contracts_in_progress(session: Session, head_item_key:str, context:str):
    """
    未成工事受入金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-98310_AdvancesReceivedOnConstructionContractsInProgress',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def costs_on_construction_contracts_in_progress(session: Session, head_item_key:str, context:str):
    """
    未成工事支出金
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-98310_CostsOnConstructionContractsInProgress',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_inventories_and_advance_payments_ope_cf(session: Session, head_item_key:str, context:str):
    """
    棚卸資産及び前渡金の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-98800_DecreaseIncreaseInInventoriesAndAdvancePaymentsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_expenses_on_real_estates_for_investment_noe(session: Session, head_item_key:str, context:str):
    """
    投資不動産賃貸費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-scedjpfr-99550_RentExpensesOnRealEstatesForInvestmentNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_project_contracts_cl(session: Session, head_item_key:str, context:str):
    """
    プロジェクト損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-17170_ProvisionForLossOnProjectContractsCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def royalty_noe(session: Session, head_item_key:str, context:str):
    """
    支払技術料、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-17300_RoyaltyNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def non_deductionable_consumption_tax_noe(session: Session, head_item_key:str, context:str):
    """
    控除対象外消費税等、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-22040_NonDeductionableConsumptionTaxNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def ritairemennt_ope_cf(session: Session, head_item_key:str, context:str):
    """
    役員退職慰労未払金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-22040_RitairemenntOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_business_guaranty_money_ope_cf(session: Session, head_item_key:str, context:str):
    """
    営業保証金の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-26660_DecreaseIncreaseInBusinessGuarantyMoneyOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_removal_of_fixed_assets_el(session: Session, head_item_key:str, context:str):
    """
    固定資産撤去費用、特別損失
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-28060_LossOnRemovalOfFixedAssetsEL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def loss_on_removal_of_fixed_assets_ope_cf(session: Session, head_item_key:str, context:str):
    """
    有形固定資産撤去費用、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-28060_LossOnRemovalOfFixedAssetsOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def compensation_for_damage_income_received_ope_cf(session: Session, head_item_key:str, context:str):
    """
    損害賠償金の受取額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-28140_CompensationForDamageIncomeReceivedOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_share_based_remuneration_for_employee_ope_cf(session: Session, head_item_key:str, context:str):
    """
    従業員株式給付引当金の増減額（△は減少）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-28140_IncreaseDecreaseInProvisionForShareBasedRemunerationForEmployeeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_share_based_remuneration_for_employee_ncl(session: Session, head_item_key:str, context:str):
    """
    従業員株式給付引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-28140_ProvisionForShareBasedRemunerationForEmployeeNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def increase_decrease_in_provision_for_provision_for_performance_linked_incentive_compensation_ope_cf(session: Session, head_item_key:str, context:str):
    """
    業績連動報酬引当金の増減額(△は減少)、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-31790_IncreaseDecreaseInProvisionForProvisionForPerformanceLinkedIncentiveCompensationOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_disposal_of_treasury_shares_resulting_from_exercise_of_share_acquisition_rights_fin_cf(session: Session, head_item_key:str, context:str):
    """
    新株予約権の行使による自己株式の処分による収入、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-31790_ProceedsFromDisposalOfTreasurySharesResultingFromExerciseOfShareAcquisitionRightsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_performance_linked_incentive_compensation_ncl(session: Session, head_item_key:str, context:str):
    """
    業績連動報酬引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-31790_ProvisionForPerformanceLinkedIncentiveCompensationNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def repayment_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取弁済金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-31790_RepaymentIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def allowance_for_employee_stock_benefits_ncl(session: Session, head_item_key:str, context:str):
    """
    従業員株式給付引当金、固定負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-36820_AllowanceForEmployeeStockBenefitsNCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def employment_levy_system_for_persons_with_disabilities_noe(session: Session, head_item_key:str, context:str):
    """
    障害者雇用納付金、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-36820_EmploymentLevySystemForPersonsWithDisabilitiesNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_for_purchase_of_treasury_subscription_right_to_shares_fin_cf(session: Session, head_item_key:str, context:str):
    """
    自己新株予約権の取得による支出、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-45940_PaymentsForPurchaseOfTreasurySubscriptionRightToSharesFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def settlement_received_noi(session: Session, head_item_key:str, context:str):
    """
    受取和解金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-45940_SettlementReceivedNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_shares_of_associates_inv_cf(session: Session, head_item_key:str, context:str):
    """
    関連会社株式の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-46620_PurchaseOfSharesOfAssociatesInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def consignment_income_from_research_and_development_noi(session: Session, head_item_key:str, context:str):
    """
    受託研究収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-48880_ConsignmentIncomeFromResearchAndDevelopmentNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_increase_decrease_in_restrictions_on_bank_deposit_withdrawals_fin_cf(session: Session, head_item_key:str, context:str):
    """
    引出制限付預金の純増減額（△は増加）、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-48880_NetIncreaseDecreaseInRestrictionsOnBankDepositWithdrawalsFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def expense_of_inactive_noncurrent_assets_noe(session: Session, head_item_key:str, context:str):
    """
    生産休止費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-49600_ExpenseOfInactiveNoncurrentAssetsNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_expenses_and_guarantee_commission_ope_cf(session: Session, head_item_key:str, context:str):
    """
    支払利息及び支払保証料、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-52680_InterestExpensesAndGuaranteeCommissionOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def interest_expenses_and_guarantee_commission_paid_ope_cf(session: Session, head_item_key:str, context:str):
    """
    利息及び保証料の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-52680_InterestExpensesAndGuaranteeCommissionPaidOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def various_cost_according_to_factory_stop_noe(session: Session, head_item_key:str, context:str):
    """
    工場休止に伴う諸費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-53860_VariousCostAccordingToFactoryStopNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_removal_loss_cl(session: Session, head_item_key:str, context:str):
    """
    撤去損失引当金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-59230_ProvisionForRemovalLossCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def shareholder_benefit_program_noe(session: Session, head_item_key:str, context:str):
    """
    株主優待費用、営業外費用
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-59410_ShareholderBenefitProgramNOE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def decrease_increase_in_advance_payment_ope_cf(session: Session, head_item_key:str, context:str):
    """
    前払金の増減額（△は増加）、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-61810_DecreaseIncreaseInAdvancePaymentOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def non_operating_commission_fee_ope_cf(session: Session, head_item_key:str, context:str):
    """
    営業外支払手数料、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-61810_NonOperatingCommissionFeeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payment_of_non_operating_commission_fee_ope_cf(session: Session, head_item_key:str, context:str):
    """
    営業外支払手数料の支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-61810_PaymentOfNonOperatingCommissionFeeOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def tax_refund_noi(session: Session, head_item_key:str, context:str):
    """
    租税公課還付金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-62310_TaxRefundNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def expenses_on_interest_subsidy_noi(session: Session, head_item_key:str, context:str):
    """
    利子補給金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-63470_ExpensesOnInterestSubsidyNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_into_periodical_deposits_inv_cf(session: Session, head_item_key:str, context:str):
    """
    定期積金の預入による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-63470_PaymentsIntoPeriodicalDepositsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def notes_and_accounts_payable_trade_and_contract_liabilities_cl(session: Session, head_item_key:str, context:str):
    """
    支払手形、買掛金及び契約負債、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-64950_NotesAndAccountsPayableTradeAndContractLiabilitiesCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_anti_monopoly_act_ope_cf(session: Session, head_item_key:str, context:str):
    """
    独占禁止法関連損失、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-64950_ProvisionForLossOnAntiMonopolyActOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def provision_for_loss_on_anti_monopoly_act_paid_ope_cf(session: Session, head_item_key:str, context:str):
    """
    独占禁止法関連支払額、営業活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-64950_ProvisionForLossOnAntiMonopolyActPaidOpeCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def consulting_income_noi(session: Session, head_item_key:str, context:str):
    """
    コンサルティング収入、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-65500_ConsultingIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def payments_from_collection_of_loans_receivable_from_directors_inv_cf(session: Session, head_item_key:str, context:str):
    """
    役員に対する貸付による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-65500_PaymentsFromCollectionOfLoansReceivableFromDirectorsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_collection_of_loans_receivable_from_directors_inv_cf(session: Session, head_item_key:str, context:str):
    """
    役員に対する貸付金の回収による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-65500_ProceedsFromCollectionOfLoansReceivableFromDirectorsInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def proceeds_from_sale_of_investment_securities_and_others_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投資有価証券等の売却による収入、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-65680_ProceedsFromSaleOfInvestmentSecuritiesAndOthersInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def purchase_of_investment_securities_and_others_inv_cf(session: Session, head_item_key:str, context:str):
    """
    投資有価証券等の取得による支出、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-65680_PurchaseOfInvestmentSecuritiesAndOthersInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bounty_for_early_payments_sga(session: Session, head_item_key:str, context:str):
    """
    完納奨励金、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-74430_BountyForEarlyPaymentsSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def bounty_for_suppliers_sga(session: Session, head_item_key:str, context:str):
    """
    出荷奨励金、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-74430_BountyForSuppliersSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def rent_of_the_markets_base_on_sales_sga(session: Session, head_item_key:str, context:str):
    """
    売上高割市場使用料、販売費及び一般管理費
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-74430_RentOfTheMarketsBaseOnSalesSGA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def collection_of_cooperation_money_of_cemetery_development_inv_cf(session: Session, head_item_key:str, context:str):
    """
    霊園開発協力金の回収、投資活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-75780_CollectionOfCooperationMoneyOfCemeteryDevelopmentInvCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def cooperation_money_o_fcemetery_development_ioa(session: Session, head_item_key:str, context:str):
    """
    霊園開発協力金、投資その他の資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-75780_CooperationMoneyOFcemeteryDevelopmentIOA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def permanent_using_right_ca(session: Session, head_item_key:str, context:str):
    """
    永代使用権、流動資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-75780_PermanentUsingRightCA',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def sales_incentive_income_noi(session: Session, head_item_key:str, context:str):
    """
    受取販売奨励金、営業外収益
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-75780_SalesIncentiveIncomeNOI',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def antique_ppe(session: Session, head_item_key:str, context:str):
    """
    美術骨董品、有形固定資産
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-76210_AntiquePPE',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def net_increase_decrease_in_guarantee_deposits_received_fin_cf(session: Session, head_item_key:str, context:str):
    """
    預り保証金の純増減額(△は減少)、財務活動によるキャッシュ・フロー
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-76210_NetIncreaseDecreaseInGuaranteeDepositsReceivedFinCF',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

def current_portion_of_long_term_loans_payable_cl(session: Session, head_item_key:str, context:str):
    """
    一年内返済予定長期借入金、流動負債
    """
    statement = (
        select(IxNonFraction)
        .where(
            IxNonFraction.name == 'tse-snedjpfr-78630_CurrentPortionOfLongTermLoansPayableCL',
            IxNonFraction.head_item_key == head_item_key,
            IxNonFraction.context == context,
        )
    )
    result = session.exec(statement)
    item = result.all()
    if len(item) > 1:
        raise ValueError('複数のデータが取得されました。contextが不足しています。')
    elif len(item) < 1:
        raise ValueError('データが取得されませんでした。')
    return item[0]

