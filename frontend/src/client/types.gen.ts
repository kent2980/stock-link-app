// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

/**
 * 日次株価情報を公開するためのクラス
 */
export type DailyStockPricePublic = {
    code: string;
    days: string;
    open: number;
    high: number;
    low: number;
    close: number;
    volume?: (number | null);
    adjusted_close?: (number | null);
};

export type DisclosureCursor = {
    /**
     * 次のカーソル
     */
    next_cursor?: (number | null);
    /**
     * 前のカーソル
     */
    previous_cursor?: (number | null);
    /**
     * 開示項目の総数
     */
    count?: number;
    data?: Array<DisclosureItem>;
};

/**
 * 開示項目を表すクラス
 */
export type DisclosureItem = {
    headItemKey: string;
    item_id: number;
    company: string;
    code: string;
    reporting_date: string;
    insert_date: string;
    title: string;
    summary: string;
    operating_result: (FinItemsResponse | null);
    forecast: (FinItemsResponse | null);
    cashflow: (FinItemsResponse | null);
    category: string;
    important: boolean;
};

/**
 * 開示項目のIDリストを表すクラス
 */
export type DisclosureItems = {
    item_id: number;
    data?: (DisclosureItem | null);
};

/**
 * 開示項目のリストを表すクラス
 */
export type DisclosureItemsList = {
    count: number;
    page: number;
    next_page?: (number | null);
    previous_page?: (number | null);
    data?: Array<DisclosureItem>;
};

export type DocumentListPublic = {
    id: number;
    head_item_key: string;
    insert_date: string;
    securities_code: string;
    company_name: string;
    document_name: string;
    document_short_name?: (string | null);
    report_type: string;
    url?: (string | null);
    period_index?: (number | null);
    current_period?: (string | null);
    report_date?: (string | null);
};

export type DocumentListPublics = {
    count: number;
    data: Array<DocumentListPublic>;
};

/**
 * メトリック情報のリストを表すクラス
 */
export type FinItemsResponse = {
    period?: (PeriodSchemaBase | null);
    head_item_key?: (string | null);
    data?: (Array<FinValueFinance> | null);
};

/**
 * メトリック情報を表すクラス
 */
export type FinValueBase = {
    name: string;
    value: (number | null);
    unit: (string | null);
    display_scale: (string | null);
    scale: (number | null);
};

/**
 * メトリック親情報を表すクラス
 */
export type FinValueFinance = {
    name: string;
    order: number;
    label?: (string | null);
    result?: (FinValueWithChange | null);
    forecast?: (FinValueWithChange | null);
    upper?: (FinValueWithChange | null);
    lower?: (FinValueWithChange | null);
};

export type FinValueWithChange = {
    isActive?: (boolean | null);
    curValue?: (FinValueBase | null);
    curChange?: (FinValueBase | null);
    preValue?: (FinValueBase | null);
    preChange?: (FinValueBase | null);
    context?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type IndustriesList = {
    data: Array<Industry>;
};

export type Industry = {
    /**
     * 業種コード
     */
    code: number;
    /**
     * 業種名
     */
    name: string;
    /**
     * 本日追加されたレコードの数
     */
    todays_record: number;
    new_report_date: string;
};

export type industry_count = {
    code: number;
    name: string;
    count: number;
};

export type industry_count_list = {
    data: Array<industry_count>;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

/**
 * iXBRLのヘッダー情報の要約を作成するクラス
 */
export type IxSummaryResponseCreate = {
    head_item_key: string;
    /**
     * 要約内容
     */
    summary?: string;
    /**
     * 営業利益のJSONデータ
     */
    operating_result_json?: (string | null);
    /**
     * 業績予想のJSONデータ
     */
    forecast_json?: (string | null);
    /**
     * キャッシュフローのJSONデータ
     */
    cashflow_json?: (string | null);
};

export type JpxStockInfoPublic = {
    input_date: string;
    code: string;
    name: string;
    market_or_type: string;
    industry_33_code: (number | null);
    industry_33_name: (string | null);
    industry_17_code: (number | null);
    industry_17_name: (string | null);
    scale_code: (number | null);
    scale_name: (string | null);
};

export type JpxStockInfosPublicList = {
    count: number;
    data: Array<JpxStockInfoPublic>;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

/**
 * 期間情報を表すクラス
 */
export type PeriodSchemaBase = {
    accountingStandard: string;
    fiscalYear: string;
    period: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type PublicCalender = {
    reporting_date: string;
    count: number;
};

export type PublicCalenders = {
    count: number;
    data: Array<PublicCalender>;
};

/**
 * 最新の報告日を表すクラス
 */
export type PublicLatestReportingDate = {
    /**
     * 最新の報告日
     */
    reporting_date: string;
    /**
     * 件数
     */
    count: number;
};

/**
 * StockWikiPublic
 */
export type StockWikiPublic = {
    code: string;
    name?: (string | null);
    description?: (string | null);
    url?: (string | null);
    error?: (string | null);
};

/**
 * StockWikisPublicList
 */
export type StockWikisPublicList = {
    count: number;
    data: Array<StockWikiPublic>;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

/**
 * URLを表すクラス
 */
export type UrlSchema = {
    /**
     * URL
     */
    url: string;
    /**
     * 証券コード
     */
    securities_code: string;
};

/**
 * URLのリストを表すクラス
 */
export type UrlSchemaList = {
    data: Array<UrlSchema>;
    count: number;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type FinancialSummaryGetDisclosureItemsData = {
    /**
     * 17業種コード
     */
    code17?: (number | null);
    /**
     * 33業種コード
     */
    code33?: (number | null);
    /**
     * 重複を排除するかどうか
     */
    isDistinct?: boolean;
    /**
     * 取得する開示項目の最大数
     */
    limit?: number;
    /**
     * ページ番号
     */
    page?: number;
    /**
     * 取得する開示項目のレポートタイプ
     */
    reportTypes?: (Array<(string)> | null);
    /**
     * 特定の日付の開示項目を取得する場合に指定
     */
    selectDate?: (string | null);
};

export type FinancialSummaryGetDisclosureItemsResponse = (DisclosureItemsList);

export type FinancialSummaryGetDisclosureItemsCursorData = {
    /**
     * カーソル
     */
    cursor?: (number | null);
    /**
     * カーソルの方向。'order' または 'newer' を指定
     */
    direction?: string;
    /**
     * 取得する開示項目の最大数
     */
    limit?: number;
    /**
     * 取得する開示項目のレポートタイプ
     */
    reportTypes?: (Array<(string)> | null);
};

export type FinancialSummaryGetDisclosureItemsCursorResponse = (DisclosureCursor);

export type FinancialSummaryGetDisclosureItemsByIdData = {
    /**
     * 開示項目のID
     */
    itemId: number;
    /**
     * 取得する開示項目のレポートタイプ
     */
    reportTypes?: (Array<(string)> | null);
};

export type FinancialSummaryGetDisclosureItemsByIdResponse = (DisclosureItems);

export type FinancialSummaryPostIxTitleSummariesResponse = (number);

export type FinancialSummaryPatchIxTitleSummaryAllResponse = (number);

export type FinancialSummaryPostIxTitleSummaryItemData = {
    /**
     * ヘッドアイテムキー
     */
    headItemKey: string;
};

export type FinancialSummaryPostIxTitleSummaryItemResponse = (IxSummaryResponseCreate);

export type InformationGetDocumentCountData = {
    dateStr?: (string | null);
    reportTypes?: (Array<(string)> | null);
};

export type InformationGetDocumentCountResponse = (number);

export type InformationGetLatestDocumentTitleResponse = (string);

export type InformationReadIxHeadTitleItemData = {
    headItemKey: string;
};

export type InformationReadIxHeadTitleItemResponse = (DocumentListPublic);

export type InformationGetDocumentListData = {
    dateStr?: (string | null);
    industry17Code?: (number | null);
    industry33Code?: (number | null);
    reportTypes?: (Array<(string)> | null);
};

export type InformationGetDocumentListResponse = (DocumentListPublics);

export type InformationReadIxHeadTitleItemsUrlListResponse = (UrlSchemaList);

export type InformationGetCalendarResponse = (PublicCalenders);

export type InformationGetLatestReportingDateResponse = (PublicLatestReportingDate);

export type InformationGetUpdateTimestampResponse = (string);

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type IxStockCreateDailyStockPriceData = {
    code: string;
    dateStr?: (string | null);
};

export type IxStockCreateDailyStockPriceResponse = (unknown);

export type IxStockGetDailyStockPriceData = {
    /**
     * YYYY-MM-DD形式の日付
     */
    dateStr?: (string | null);
    /**
     * 株式コード
     */
    stockCode?: (string | null);
};

export type IxStockGetDailyStockPriceResponse = (DailyStockPricePublic);

export type JpxReadJpxStockInfoItemData = {
    code: string;
};

export type JpxReadJpxStockInfoItemResponse = (JpxStockInfoPublic);

export type JpxReadJpxStockInfoItemsResponse = (JpxStockInfosPublicList);

export type JpxReadJpxStockInfoItemsTcsData = {
    industry17Code?: (number | null);
    industry33Code?: (Array<(number)> | null);
    isItems?: boolean;
    limit?: number;
};

export type JpxReadJpxStockInfoItemsTcsResponse = (JpxStockInfosPublicList);

export type JpxReadJpxStockInfoItemTcsData = {
    market: string;
};

export type JpxReadJpxStockInfoItemTcsResponse = (JpxStockInfosPublicList);

export type JpxGetIndustriesInfoData = {
    /**
     * レポートタイプのリスト
     */
    reportTypes?: Array<(string)>;
    type: number;
};

export type JpxGetIndustriesInfoResponse = (IndustriesList);

export type JpxReadSelectIndustriesData = {
    industry17Code?: (number | null);
};

export type JpxReadSelectIndustriesResponse = (IndustriesList);

export type JpxReadIndustryCountData = {
    /**
     * 業種品類コード
     */
    type?: number;
};

export type JpxReadIndustryCountResponse = (industry_count_list);

export type JpxReadIndustryNameData = {
    code: number;
    type: number;
};

export type JpxReadIndustryNameResponse = (string);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);

export type WikiGetStockWikiItemData = {
    code: string;
};

export type WikiGetStockWikiItemResponse = (StockWikiPublic);

export type WikiGetStockWikiItemsResponse = (StockWikisPublicList);

export type XbrlSourceGetIxSourceFileItemData = {
    sourceFileId: string;
};

export type XbrlSourceGetIxSourceFileItemResponse = (boolean);