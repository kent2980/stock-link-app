// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { FinancialSummaryGetOperatingResultsData, FinancialSummaryGetOperatingResultsResponse, FinancialSummaryGetOtherOperatingResultsData, FinancialSummaryGetOtherOperatingResultsResponse, FinancialSummaryGetForecastsData, FinancialSummaryGetForecastsResponse, FinancialSummaryGetFinancialPositionData, FinancialSummaryGetFinancialPositionResponse, FinancialSummaryGetCashFlowsData, FinancialSummaryGetCashFlowsResponse, FinancialSummaryGetForecastChangeData, FinancialSummaryGetForecastChangeResponse, FinancialSummaryGetDividendsChangeData, FinancialSummaryGetDividendsChangeResponse, InformationGetDocumentCountData, InformationGetDocumentCountResponse, InformationGetLatestDocumentTitleResponse, InformationReadIxHeadTitleItemData, InformationReadIxHeadTitleItemResponse, InformationGetDocumentListData, InformationGetDocumentListResponse, InformationReadIxHeadTitleItemsUrlListResponse, InformationGetCalendarResponse, InformationGetLatestReportingDateResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, JpxReadJpxStockInfoItemData, JpxReadJpxStockInfoItemResponse, JpxReadJpxStockInfoItemsResponse, JpxReadJpxStockInfoItemsTcsData, JpxReadJpxStockInfoItemsTcsResponse, JpxReadJpxStockInfoItemTcsData, JpxReadJpxStockInfoItemTcsResponse, JpxReadJpxStockInfoIndustryNamesData, JpxReadJpxStockInfoIndustryNamesResponse, JpxReadSelectIndustriesData, JpxReadSelectIndustriesResponse, JpxReadIndustryCountData, JpxReadIndustryCountResponse, JpxReadIndustryNameData, JpxReadIndustryNameResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse, WikiGetStockWikiItemData, WikiGetStockWikiItemResponse, WikiGetStockWikiItemsResponse } from './types.gen';

export class FinancialSummaryService {
    /**
     * 経営成績情報を取得
     * @param data The data for the request.
     * @param data.code 銘柄コード
     * @param data.headItemKey head_item_key
     * @param data.reportTypes レポートタイプ
     * @param data.offset オフセット
     * @returns FinItemsResponse Successful Response
     * @throws ApiError
     */
    public static getOperatingResults(data: FinancialSummaryGetOperatingResultsData = {}): CancelablePromise<FinancialSummaryGetOperatingResultsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/summary/operating_results/income/',
            query: {
                code: data.code,
                head_item_key: data.headItemKey,
                report_types: data.reportTypes,
                offset: data.offset
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * その他の経営成績情報を取得
     * @param data The data for the request.
     * @param data.code 銘柄コード
     * @param data.headItemKey head_item_key
     * @param data.reportTypes レポートタイプ
     * @param data.offset オフセット
     * @returns FinItemsResponse Successful Response
     * @throws ApiError
     */
    public static getOtherOperatingResults(data: FinancialSummaryGetOtherOperatingResultsData = {}): CancelablePromise<FinancialSummaryGetOtherOperatingResultsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/summary/operating_results/other/{}',
            query: {
                code: data.code,
                head_item_key: data.headItemKey,
                report_types: data.reportTypes,
                offset: data.offset
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 予測情報を取得
     * @param data The data for the request.
     * @param data.code 銘柄コード
     * @param data.headItemKey head_item_key
     * @param data.reportTypes レポートタイプ
     * @param data.offset オフセット
     * @returns FinItemsResponse Successful Response
     * @throws ApiError
     */
    public static getForecasts(data: FinancialSummaryGetForecastsData = {}): CancelablePromise<FinancialSummaryGetForecastsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/summary/forecasts/',
            query: {
                code: data.code,
                head_item_key: data.headItemKey,
                report_types: data.reportTypes,
                offset: data.offset
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 財政状態情報を取得
     * @param data The data for the request.
     * @param data.code 銘柄コード
     * @param data.headItemKey head_item_key
     * @param data.reportTypes レポートタイプ
     * @param data.offset オフセット
     * @returns FinItemsResponse Successful Response
     * @throws ApiError
     */
    public static getFinancialPosition(data: FinancialSummaryGetFinancialPositionData = {}): CancelablePromise<FinancialSummaryGetFinancialPositionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/summary/financial_position',
            query: {
                code: data.code,
                head_item_key: data.headItemKey,
                report_types: data.reportTypes,
                offset: data.offset
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * キャッシュフロー情報を取得
     * @param data The data for the request.
     * @param data.code
     * @param data.year 年度
     * @param data.offset オフセット
     * @returns FinItemsResponse Successful Response
     * @throws ApiError
     */
    public static getCashFlows(data: FinancialSummaryGetCashFlowsData): CancelablePromise<FinancialSummaryGetCashFlowsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/summary/cash_flows/{code}',
            path: {
                code: data.code
            },
            query: {
                year: data.year,
                offset: data.offset
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 業績予想の変更情報を取得
     * @param data The data for the request.
     * @param data.headItemKey head_item_key
     * @param data.code 銘柄コード
     * @param data.reportTypes レポートタイプ
     * @param data.offset オフセット
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getForecastChange(data: FinancialSummaryGetForecastChangeData = {}): CancelablePromise<FinancialSummaryGetForecastChangeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/summary/forecasts/change/',
            query: {
                head_item_key: data.headItemKey,
                code: data.code,
                report_types: data.reportTypes,
                offset: data.offset
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 配当予想の変更情報を取得
     * @param data The data for the request.
     * @param data.headItemKey head_item_key
     * @param data.code 銘柄コード
     * @param data.reportTypes レポートタイプ
     * @param data.offset オフセット
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getDividendsChange(data: FinancialSummaryGetDividendsChangeData = {}): CancelablePromise<FinancialSummaryGetDividendsChangeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/summary/dividends/change/',
            query: {
                head_item_key: data.headItemKey,
                code: data.code,
                report_types: data.reportTypes,
                offset: data.offset
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class InformationService {
    /**
     * 条件を指定してXBRL文書数を取得
     * @param data The data for the request.
     * @param data.dateStr
     * @param data.reportTypes
     * @returns number Successful Response
     * @throws ApiError
     */
    public static getDocumentCount(data: InformationGetDocumentCountData = {}): CancelablePromise<InformationGetDocumentCountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/document/count',
            query: {
                date_str: data.dateStr,
                report_types: data.reportTypes
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 最も新しいXBRL文書のタイトルを取得
     * @returns string Successful Response
     * @throws ApiError
     */
    public static getLatestDocumentTitle(): CancelablePromise<InformationGetLatestDocumentTitleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/document/latest/title'
        });
    }
    
    /**
     * 指定したIDのXBRL文書の詳細を取得
     * Get item by head_item_key.
     * @param data The data for the request.
     * @param data.headItemKey
     * @returns DocumentListPublic Successful Response
     * @throws ApiError
     */
    public static readIxHeadTitleItem(data: InformationReadIxHeadTitleItemData): CancelablePromise<InformationReadIxHeadTitleItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/ix/head/',
            query: {
                head_item_key: data.headItemKey
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 条件抽出したXBRL文書のリストを取得
     * @param data The data for the request.
     * @param data.reportTypes
     * @param data.dateStr
     * @param data.industry17Code
     * @param data.industry33Code
     * @returns DocumentListPublics Successful Response
     * @throws ApiError
     */
    public static getDocumentList(data: InformationGetDocumentListData = {}): CancelablePromise<InformationGetDocumentListResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/document/list',
            query: {
                report_types: data.reportTypes,
                date_str: data.dateStr,
                industry_17_code: data.industry17Code,
                industry_33_code: data.industry33Code
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 企業URLのリストを取得
     * Get items.
     * @returns UrlSchemaList Successful Response
     * @throws ApiError
     */
    public static readIxHeadTitleItemsUrlList(): CancelablePromise<InformationReadIxHeadTitleItemsUrlListResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/url_list/'
        });
    }
    
    /**
     * XBRLカレンダーを取得
     * @returns PublicCalenders Successful Response
     * @throws ApiError
     */
    public static getCalendar(): CancelablePromise<InformationGetCalendarResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/calendar'
        });
    }
    
    /**
     * 最新の報告日を取得
     * Get latest reporting date.
     * @returns PublicLatestReportingDate Successful Response
     * @throws ApiError
     */
    public static getLatestReportingDate(): CancelablePromise<InformationGetLatestReportingDateResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/latest_reporting_date'
        });
    }
    
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class JpxService {
    /**
     * コードを指定してマーケット情報を取得
     * Get item by code.
     * @param data The data for the request.
     * @param data.code
     * @returns JpxStockInfoPublic Successful Response
     * @throws ApiError
     */
    public static readJpxStockInfoItem(data: JpxReadJpxStockInfoItemData): CancelablePromise<JpxReadJpxStockInfoItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/code/{code}',
            path: {
                code: data.code
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 全銘柄のマーケット情報を取得
     * Get all items.
     * @returns JpxStockInfosPublicList Successful Response
     * @throws ApiError
     */
    public static readJpxStockInfoItems(): CancelablePromise<JpxReadJpxStockInfoItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/'
        });
    }
    
    /**
     * 業種コードを指定してマーケット情報を取得
     * Get all items.
     * @param data The data for the request.
     * @param data.industry17Code
     * @param data.industry33Code
     * @param data.isItems
     * @param data.limit
     * @returns JpxStockInfosPublicList Successful Response
     * @throws ApiError
     */
    public static readJpxStockInfoItemsTcs(data: JpxReadJpxStockInfoItemsTcsData = {}): CancelablePromise<JpxReadJpxStockInfoItemsTcsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/tcs',
            query: {
                industry_17_code: data.industry17Code,
                industry_33_code: data.industry33Code,
                isItems: data.isItems,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 上場市場を指定してマーケット情報を取得
     * Get item by market.
     * @param data The data for the request.
     * @param data.market
     * @returns JpxStockInfosPublicList Successful Response
     * @throws ApiError
     */
    public static readJpxStockInfoItemTcs(data: JpxReadJpxStockInfoItemTcsData): CancelablePromise<JpxReadJpxStockInfoItemTcsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/tcs/{market}',
            path: {
                market: data.market
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * [17] または [33] を入力して業種の名称とコードを取得
     * Get all industries.
     * @param data The data for the request.
     * @param data.type
     * @returns IndustriesList Successful Response
     * @throws ApiError
     */
    public static readJpxStockInfoIndustryNames(data: JpxReadJpxStockInfoIndustryNamesData): CancelablePromise<JpxReadJpxStockInfoIndustryNamesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/industries/{type}',
            path: {
                type: data.type
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 17業種分類のコードを指定して33業種の名称とコードを取得
     * Get all industries.
     * @param data The data for the request.
     * @param data.industry17Code
     * @returns IndustriesList Successful Response
     * @throws ApiError
     */
    public static readSelectIndustries(data: JpxReadSelectIndustriesData = {}): CancelablePromise<JpxReadSelectIndustriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/industries',
            query: {
                industry_17_code: data.industry17Code
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 業種別で上場銘柄数を取得
     * Get industry_list.
     * @param data The data for the request.
     * @param data.type 業種品類コード
     * @returns industry_count_list Successful Response
     * @throws ApiError
     */
    public static readIndustryCount(data: JpxReadIndustryCountData = {}): CancelablePromise<JpxReadIndustryCountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/industry_list/',
            query: {
                type: data.type
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 業種コードを指定して業種名を取得
     * Get industry name by code.
     * @param data The data for the request.
     * @param data.type
     * @param data.code
     * @returns string Successful Response
     * @throws ApiError
     */
    public static readIndustryName(data: JpxReadIndustryNameData): CancelablePromise<JpxReadIndustryNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/industry_name',
            query: {
                type: data.type,
                code: data.code
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}

export class WikiService {
    /**
     * 銘柄コードを指定してWiki概要を取得
     * Get item.
     * @param data The data for the request.
     * @param data.code
     * @returns StockWikiPublic Successful Response
     * @throws ApiError
     */
    public static getStockWikiItem(data: WikiGetStockWikiItemData): CancelablePromise<WikiGetStockWikiItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/wiki/{code}',
            path: {
                code: data.code
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 全銘柄のWiki概要を取得
     * Get all items.
     * @returns StockWikisPublicList Successful Response
     * @throws ApiError
     */
    public static getStockWikiItems(): CancelablePromise<WikiGetStockWikiItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/wiki/'
        });
    }
    
}