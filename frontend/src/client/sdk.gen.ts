// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { FinancialSummaryGetDisclosureItemsData, FinancialSummaryGetDisclosureItemsResponse, FinancialSummaryGetDisclosureItemsCursorData, FinancialSummaryGetDisclosureItemsCursorResponse, FinancialSummaryGetDisclosureItemsByIdData, FinancialSummaryGetDisclosureItemsByIdResponse, FinancialSummaryPostIxTitleSummariesResponse, FinancialSummaryPatchIxTitleSummaryAllResponse, FinancialSummaryPostIxTitleSummaryItemData, FinancialSummaryPostIxTitleSummaryItemResponse, InformationGetDocumentCountData, InformationGetDocumentCountResponse, InformationGetLatestDocumentTitleResponse, InformationReadIxHeadTitleItemData, InformationReadIxHeadTitleItemResponse, InformationGetDocumentListData, InformationGetDocumentListResponse, InformationReadIxHeadTitleItemsUrlListResponse, InformationGetCalendarResponse, InformationGetLatestReportingDateResponse, InformationGetUpdateTimestampResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, IxStockCreateDailyStockPriceData, IxStockCreateDailyStockPriceResponse, IxStockGetDailyStockPriceData, IxStockGetDailyStockPriceResponse, JpxReadJpxStockInfoItemData, JpxReadJpxStockInfoItemResponse, JpxReadJpxStockInfoItemsResponse, JpxReadJpxStockInfoItemsTcsData, JpxReadJpxStockInfoItemsTcsResponse, JpxReadJpxStockInfoItemTcsData, JpxReadJpxStockInfoItemTcsResponse, JpxGetIndustriesInfoData, JpxGetIndustriesInfoResponse, JpxReadSelectIndustriesData, JpxReadSelectIndustriesResponse, JpxReadIndustryCountData, JpxReadIndustryCountResponse, JpxReadIndustryNameData, JpxReadIndustryNameResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, PrivateCreateUserData, PrivateCreateUserResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse, WikiGetStockWikiItemData, WikiGetStockWikiItemResponse, WikiGetStockWikiItemsResponse, XbrlSourceGetIxSourceFileItemData, XbrlSourceGetIxSourceFileItemResponse } from './types.gen';

export class FinancialSummaryService {
    /**
     * 開示項目情報を取得
     * 開示項目情報を取得するエンドポイント。
     * Args:
     * session (SessionDep): データベースセッション依存性。
     * report_types (list[str] | None, optional): 取得する開示項目のレポートタイプ。デフォルトは["edif", "edus", "edjp"]。
     * limit (int, optional): 取得する開示項目の最大数。デフォルトは20。
     * offset (int, optional): オフセット値。デフォルトは0。
     * Raises:
     * HTTPException: パラメータ不正やデータが見つからない場合に発生。
     * Returns:
     * sc.DisclosureItemsList: 開示項目のリストとメタデータを含むレスポンスモデル。
     * @param data The data for the request.
     * @param data.reportTypes 取得する開示項目のレポートタイプ
     * @param data.page ページ番号
     * @param data.limit 取得する開示項目の最大数
     * @param data.code17 17業種コード
     * @param data.code33 33業種コード
     * @param data.isDistinct 重複を排除するかどうか
     * @param data.selectDate 特定の日付の開示項目を取得する場合に指定
     * @returns DisclosureItemsList Successful Response
     * @throws ApiError
     */
    public static getDisclosureItems(data: FinancialSummaryGetDisclosureItemsData = {}): CancelablePromise<FinancialSummaryGetDisclosureItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/summary/disclosure_items/',
            query: {
                report_types: data.reportTypes,
                page: data.page,
                limit: data.limit,
                code_17: data.code17,
                code_33: data.code33,
                is_distinct: data.isDistinct,
                select_date: data.selectDate
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 開示項目情報を取得
     * 開示項目情報を取得するエンドポイント。
     * Args:
     * session (SessionDep): データベースセッション依存性。
     * report_types (list[str] | None, optional): 取得する開示項目のレポートタイプ。デフォルトは["edif", "edus", "edjp"]。
     * limit (int, optional): 取得する開示項目の最大数。デフォルトは20。
     * offset (int, optional): オフセット値。デフォルトは0。
     * Raises:
     * HTTPException: パラメータ不正やデータが見つからない場合に発生。
     * Returns:
     * sc.DisclosureItemsList: 開示項目のリストとメタデータを含むレスポンスモデル。
     * @param data The data for the request.
     * @param data.reportTypes 取得する開示項目のレポートタイプ
     * @param data.cursor カーソル
     * @param data.direction カーソルの方向。'order' または 'newer' を指定
     * @param data.limit 取得する開示項目の最大数
     * @returns DisclosureCursor Successful Response
     * @throws ApiError
     */
    public static getDisclosureItemsCursor(data: FinancialSummaryGetDisclosureItemsCursorData = {}): CancelablePromise<FinancialSummaryGetDisclosureItemsCursorResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/summary/disclosure_items/cursor/',
            query: {
                report_types: data.reportTypes,
                cursor: data.cursor,
                direction: data.direction,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 開示項目情報をIDで取得
     * 開示項目情報をIDで取得するエンドポイント。
     *
     * Args:
     * session (SessionDep): データベースセッション依存性。
     * id (int): 開示項目のID。
     *
     * Raises:
     * HTTPException: データが見つからない場合に発生。
     *
     * Returns:
     * sc.DisclosureItem: 開示項目の詳細情報。
     * @param data The data for the request.
     * @param data.itemId 開示項目のID
     * @param data.reportTypes 取得する開示項目のレポートタイプ
     * @returns DisclosureItems Successful Response
     * @throws ApiError
     */
    public static getDisclosureItemsById(data: FinancialSummaryGetDisclosureItemsByIdData): CancelablePromise<FinancialSummaryGetDisclosureItemsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/summary/disclosure_items/id/{id}',
            query: {
                report_types: data.reportTypes,
                item_id: data.itemId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * iXBRLのヘッダー情報の要約レコードを書き込む
     * Get IX title summaries.
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postIxTitleSummaries(): CancelablePromise<FinancialSummaryPostIxTitleSummariesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/ix/summary/ix_title_summary/all/'
        });
    }
    
    /**
     * iXBRLのヘッダー情報の要約レコードを更新
     * @returns number Successful Response
     * @throws ApiError
     */
    public static patchIxTitleSummaryAll(): CancelablePromise<FinancialSummaryPatchIxTitleSummaryAllResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/ix/summary/ix_title_summary/all/'
        });
    }
    
    /**
     * iXBRLのヘッダー情報の要約レコードを作成
     * @param data The data for the request.
     * @param data.headItemKey ヘッドアイテムキー
     * @returns IxSummaryResponseCreate Successful Response
     * @throws ApiError
     */
    public static postIxTitleSummaryItem(data: FinancialSummaryPostIxTitleSummaryItemData): CancelablePromise<FinancialSummaryPostIxTitleSummaryItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/ix/summary/ix_title_summary/item/',
            query: {
                head_item_key: data.headItemKey
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class InformationService {
    /**
     * 条件を指定してXBRL文書数を取得
     * @param data The data for the request.
     * @param data.dateStr
     * @param data.reportTypes
     * @returns number Successful Response
     * @throws ApiError
     */
    public static getDocumentCount(data: InformationGetDocumentCountData = {}): CancelablePromise<InformationGetDocumentCountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/document/count',
            query: {
                date_str: data.dateStr,
                report_types: data.reportTypes
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 最も新しいXBRL文書のタイトルを取得
     * @returns string Successful Response
     * @throws ApiError
     */
    public static getLatestDocumentTitle(): CancelablePromise<InformationGetLatestDocumentTitleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/document/latest/title'
        });
    }
    
    /**
     * 指定したIDのXBRL文書の詳細を取得
     * Get item by head_item_key.
     * @param data The data for the request.
     * @param data.headItemKey
     * @returns DocumentListPublic Successful Response
     * @throws ApiError
     */
    public static readIxHeadTitleItem(data: InformationReadIxHeadTitleItemData): CancelablePromise<InformationReadIxHeadTitleItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/ix/head/',
            query: {
                head_item_key: data.headItemKey
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 条件抽出したXBRL文書のリストを取得
     * @param data The data for the request.
     * @param data.reportTypes
     * @param data.dateStr
     * @param data.industry17Code
     * @param data.industry33Code
     * @returns DocumentListPublics Successful Response
     * @throws ApiError
     */
    public static getDocumentList(data: InformationGetDocumentListData = {}): CancelablePromise<InformationGetDocumentListResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/document/list',
            query: {
                report_types: data.reportTypes,
                date_str: data.dateStr,
                industry_17_code: data.industry17Code,
                industry_33_code: data.industry33Code
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 企業URLのリストを取得
     * Get items.
     * @returns UrlSchemaList Successful Response
     * @throws ApiError
     */
    public static readIxHeadTitleItemsUrlList(): CancelablePromise<InformationReadIxHeadTitleItemsUrlListResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/url_list/'
        });
    }
    
    /**
     * XBRLカレンダーを取得
     * @returns PublicCalenders Successful Response
     * @throws ApiError
     */
    public static getCalendar(): CancelablePromise<InformationGetCalendarResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/calendar'
        });
    }
    
    /**
     * 最新の報告日を取得
     * Get latest reporting date.
     * @returns PublicLatestReportingDate Successful Response
     * @throws ApiError
     */
    public static getLatestReportingDate(): CancelablePromise<InformationGetLatestReportingDateResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/latest_reporting_date'
        });
    }
    
    /**
     * 最新の更新日時を取得
     * Get latest update timestamp.
     * @returns string Successful Response
     * @throws ApiError
     */
    public static getUpdateTimestamp(): CancelablePromise<InformationGetUpdateTimestampResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock_info/update_timestamp'
        });
    }
    
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class IxStockService {
    /**
     * Create Daily Stock Price
     * 日次株価情報を作成
     * @param data The data for the request.
     * @param data.code
     * @param data.dateStr
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createDailyStockPrice(data: IxStockCreateDailyStockPriceData): CancelablePromise<IxStockCreateDailyStockPriceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/ix/stock/daily_stock_price',
            query: {
                date_str: data.dateStr,
                code: data.code
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 日次株価情報を取得
     * 日次株価情報を取得
     * @param data The data for the request.
     * @param data.dateStr YYYY-MM-DD形式の日付
     * @param data.stockCode 株式コード
     * @returns DailyStockPricePublic Successful Response
     * @throws ApiError
     */
    public static getDailyStockPrice(data: IxStockGetDailyStockPriceData = {}): CancelablePromise<IxStockGetDailyStockPriceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ix/stock/select_daily_stock_price',
            query: {
                date_str: data.dateStr,
                stock_code: data.stockCode
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class JpxService {
    /**
     * コードを指定してマーケット情報を取得
     * Get item by code.
     * @param data The data for the request.
     * @param data.code
     * @returns JpxStockInfoPublic Successful Response
     * @throws ApiError
     */
    public static readJpxStockInfoItem(data: JpxReadJpxStockInfoItemData): CancelablePromise<JpxReadJpxStockInfoItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/code/{code}',
            path: {
                code: data.code
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 全銘柄のマーケット情報を取得
     * Get all items.
     * @returns JpxStockInfosPublicList Successful Response
     * @throws ApiError
     */
    public static readJpxStockInfoItems(): CancelablePromise<JpxReadJpxStockInfoItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/'
        });
    }
    
    /**
     * 業種コードを指定してマーケット情報を取得
     * Get all items.
     * @param data The data for the request.
     * @param data.industry17Code
     * @param data.industry33Code
     * @param data.isItems
     * @param data.limit
     * @returns JpxStockInfosPublicList Successful Response
     * @throws ApiError
     */
    public static readJpxStockInfoItemsTcs(data: JpxReadJpxStockInfoItemsTcsData = {}): CancelablePromise<JpxReadJpxStockInfoItemsTcsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/tcs',
            query: {
                industry_17_code: data.industry17Code,
                industry_33_code: data.industry33Code,
                isItems: data.isItems,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 上場市場を指定してマーケット情報を取得
     * Get item by market.
     * @param data The data for the request.
     * @param data.market
     * @returns JpxStockInfosPublicList Successful Response
     * @throws ApiError
     */
    public static readJpxStockInfoItemTcs(data: JpxReadJpxStockInfoItemTcsData): CancelablePromise<JpxReadJpxStockInfoItemTcsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/tcs/{market}',
            path: {
                market: data.market
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * [17] または [33] を入力して業種の名称とコードを取得
     * Get all industries.
     * @param data The data for the request.
     * @param data.type
     * @param data.reportTypes レポートタイプのリスト
     * @returns IndustriesList Successful Response
     * @throws ApiError
     */
    public static getIndustriesInfo(data: JpxGetIndustriesInfoData): CancelablePromise<JpxGetIndustriesInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/industries/{type}',
            path: {
                type: data.type
            },
            query: {
                report_types: data.reportTypes
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 17業種分類のコードを指定して33業種の名称とコードを取得
     * Get all industries.
     * @param data The data for the request.
     * @param data.industry17Code
     * @returns IndustriesList Successful Response
     * @throws ApiError
     */
    public static readSelectIndustries(data: JpxReadSelectIndustriesData = {}): CancelablePromise<JpxReadSelectIndustriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/industries',
            query: {
                industry_17_code: data.industry17Code
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 業種別で上場銘柄数を取得
     * Get industry_list.
     * @param data The data for the request.
     * @param data.type 業種品類コード
     * @returns industry_count_list Successful Response
     * @throws ApiError
     */
    public static readIndustryCount(data: JpxReadIndustryCountData = {}): CancelablePromise<JpxReadIndustryCountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/industry_list/',
            query: {
                type: data.type
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 業種コードを指定して業種名を取得
     * Get industry name by code.
     * @param data The data for the request.
     * @param data.type
     * @param data.code
     * @returns string Successful Response
     * @throws ApiError
     */
    public static readIndustryName(data: JpxReadIndustryNameData): CancelablePromise<JpxReadIndustryNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/jpx/stock_info/industry_name',
            query: {
                type: data.type,
                code: data.code
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}

export class WikiService {
    /**
     * 銘柄コードを指定してWiki概要を取得
     * Get item.
     * @param data The data for the request.
     * @param data.code
     * @returns StockWikiPublic Successful Response
     * @throws ApiError
     */
    public static getStockWikiItem(data: WikiGetStockWikiItemData): CancelablePromise<WikiGetStockWikiItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/wiki/{code}',
            path: {
                code: data.code
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * 全銘柄のWiki概要を取得
     * Get all items.
     * @returns StockWikisPublicList Successful Response
     * @throws ApiError
     */
    public static getStockWikiItems(): CancelablePromise<WikiGetStockWikiItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/wiki/'
        });
    }
    
}

export class XbrlSourceService {
    /**
     * Get Ix Source File Item
     * Get item.
     * @param data The data for the request.
     * @param data.sourceFileId
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static getIxSourceFileItem(data: XbrlSourceGetIxSourceFileItemData): CancelablePromise<XbrlSourceGetIxSourceFileItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/xbrl/is/exits/source_file_id/',
            query: {
                source_file_id: data.sourceFileId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}